Quality Control
###
Auditing
###
34404/PostgreSQL
###
[Karen Waldroff] QC report, checks for common keying mistakes like adopting to rescues instead of transfers, bad state codes, etc. Customization Required.
###
en
###
SELECT * FROM
(

--Adoption Coordinator is not entered.  This is for organizations that use Adoption
--Coordinators
--SELECT 
--a.animalname AS name,
--a.sheltercode AS code,
--date(a.LastChangedDate) AS issuedate,
--'Adoption Coordinator not assigned in Entry Section.' AS issue 
--FROM animal a
--WHERE a.archived = 0
--AND a.nonshelteranimal = 0
--AND a.adoptioncoordinatorid = 0
 --AND NOT (a.AdditionalFlags LIKE 'Ignore Issues|%' OR a.AdditionalFlags  LIKE '%|Ignore Issues|%')

--An Adoption Movement was entered for a person record flagged as 'Other Shelter'.
--Probably should be a Transfer Movement.
SELECT
  animal.animalname AS name,
  animal.sheltercode AS code,
  adoption.movementdate AS issuedate,
   'Adoption was entered for a record flagged as <i>Shelter</i>.  Should be Transfer Movement' AS issue
FROM animal
  INNER JOIN adoption on adoption.id = animal.activemovementid
  INNER JOIN owner on owner.id = adoption.ownerid
  LEFT OUTER JOIN owner cw ON cw.ID = animal.adoptioncoordinatorID
WHERE animal.nonshelteranimal = 0
  AND animal.DATEBROUGHTIN > '2010-01-01'
  AND adoption.movementtype = 1
  AND (owner.AdditionalFlags LIKE 'shelter|%' OR owner.AdditionalFlags  LIKE '%|shelter|%')
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--This checks to see if there is a corresponding Adoption Movement for any 
--Adoption payments entered.  Sometimes people will delete an Adoption Movement
--instead of just entering an Adoption Return Date.
UNION SELECT
  animal.animalname AS name,
  animal.sheltercode AS code,
  od.date AS issuedate,
   'Adoption payment recorded, but Adoption movement missing.' AS issue
FROM ownerdonation od
LEFT OUTER JOIN owner o ON od.OwnerID = o.ID
INNER JOIN animal ON od.AnimalID = animal.ID
WHERE od.donationtypeid in (2)  --run select * from donationtype
  AND NOT od.comments LIKE '%ponsor%' --ignore if Sponsored adoption fee
  AND NOT EXISTS(SELECT ID FROM adoption WHERE OwnerID = od.ownerid OR ReturnedByOwnerID = od.ownerid)
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--This looks for the word 'foster' in the animal bio so that the public knows not
--to come to the shelter to meet an animal.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
    'Animal in Foster Without Note to the Public in Bio (Notes section > Description).' AS issue
FROM animal
INNER JOIN media ON media.LINKID = animal.id
--INNER JOIN adoption ON animal.ID = adoption.AnimalID
WHERE animal.Archived = 0
  AND animal.isnotavailableforadoption = 0
  AND animal.activeMovementType=2
  AND animal.haspermanentfoster = 0
  AND media.websitephoto = 1 
  AND NOT (animal.animalcomments LIKE '%foster%' OR animal.animalcomments LIKE '%Foster%')
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--When you clone an animal, ASM also clones the Log entries.  So if you enter 
--weight, your cloned animal will contain weight info for the original animal.
--UNION SELECT   -- Not worth tracking in most cases.  
--  animal.animalname AS name,
--  animal.sheltercode AS code,
--  current_date -1 AS issuedate,
--    'Animal with multiple Weights on same day (Log Tab).' AS issue
--FROM log
--INNER JOIN animal ON animal.id = log.linkid
--WHERE log.LOGTYPEID = 4
--AND log.linktype = 0
--AND log.date > '2019-01-01'
--AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')
--GROUP BY 1, 2, 3, cast(log.date as date)
--HAVING count(*) > 1

--Compares Animal Type with either Non-Shelter Type or Entry Reasons, depending
--on Shelter/Rescue.  
UNION SELECT
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
    'Animal With Possible Wrong Animal Type' AS issue
FROM animal
WHERE animal.datebroughtin > '2020-01-01'
  AND animal.NONSHELTERANIMAL = 0
  AND (animal.animaltypeid = 40  -- Non-Shelter Animal Type
  OR (animal.speciesid = 1 AND animal.animaltypeid <> 2)
  OR (animal.speciesid = 2 AND animal.animaltypeid <> 11))
  --AND animal.animalname NOT LIKE 'Template%'
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')
--OR THE BELOW WHERE
--WHERE (animal.animaltypeid = 44 AND animal.entryreasonid <> 16)
--OR (animal.animaltypeid = 45 AND entryreason.ReasonName NOT LIKE 'OS -%')
--OR (animal.animaltypeid = 46 AND entryreason.ReasonName LIKE 'OS -%')
--OR (animal.animaltypeid = 47 AND animal.entryreasonid <> 15)
--AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Compares vaccination types with species type.  Needs customization for vaccination 
--types.
UNION SELECT -- BE SURE TO LOOK AT VACC IDs
  animal.animalname AS name,
  animal.sheltercode AS code,
  av.DateRequired AS issuedate,
    'Animal with possible wrong Vaccination Type.' AS issue
FROM animal
INNER JOIN animalvaccination av ON animal.ID = av.AnimalID
INNER JOIN vaccinationtype v ON av.VaccinationID = v.ID
WHERE (animal.SpeciesID=1 AND v.id IN (5,8)) OR (animal.SpeciesID=2 AND v.id = 9) -- have to look at vaccination ids
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Days on Shelter should = 0 if DOA checkbox is checked.  Added 8/12/2021
UNION SELECT
  animal.animalname as name,
  animal.sheltercode as code,
  date(animal.LastChangedDate) as issuedate,
    'Death Issue.  Days on Shelter should equal 0 if <i>Dead of arrival</i> Checkbox is selected.' AS issue
FROM animal
WHERE DeceasedDate is not null
AND IsDOA = 1 and DaysOnShelter <> 0
AND NonShelterAnimal = 0
AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Invalid death reason with DOA Issue.  Added 8/12/21
UNION SELECT
  animal.animalname as name,
  animal.sheltercode as code,
  date(animal.LastChangedDate) as issuedate,
    'Death Issue.  DOA Category and DOA Checkbox Should Match' AS issue
FROM animal
WHERE DECEASEDDATE is not null
AND (animal.IsDOA = 1 AND animal.PTSReasonID <> 1 -- REVIEW Death Reasons LOOKUP FIELDS
  OR animal.IsDOA = 0 AND animal.PTSReasonID = 1)

--Euthanized and DOA should not both be checked.  DOA means dead before
--animal entered shelter.  Added 8/12/21
UNION SELECT
  animal.animalname as name,
  animal.sheltercode as code,
  date(animal.LastChangedDate) as issuedate,
    'Death Issue.  DOA and Euthanized should not both be checked' AS issue
FROM animal
WHERE DECEASEDDATE is not null
AND (animal.IsDOA = 1 AND animal.Puttosleep = 1
  OR animal.IsDOA = 1 AND animal.AsilomarOwnerRequestedEuthanasia = 1)

--Euthanasia check box not selected.  Added 8/12/21
UNION SELECT
  animal.animalname as name,
  animal.sheltercode as code,
  date(animal.LastChangedDate) as issuedate,
    'Death Issue.  Euthanasia Checkbox Needs to be Checked' AS issue
FROM animal
WHERE PutToSleep = 0
  AND PTSReasonID in (3,5,6,7,8)  -- REVIEW Death Reasons LOOKUP FIELDS
  AND DECEASEDDATE is not null
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%') 

--Invalid death reason with euthanasia check box selected. Added 8/12/21
UNION SELECT
  animal.animalname as name,
  animal.sheltercode as code,
  date(animal.LastChangedDate) as issuedate,
    'Death Issue.  Invalid Death Reason for Checked Euthanasia Box' AS issue
FROM animal
WHERE animal.PutToSleep = 1 AND animal.PTSReasonID IN (1,2) -- REVIEW Death Reasons LOOKUP FIELDS (**Remove Requested ID if using Asilomar).
AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%') 

--Alerts when an animal has been marked as either euthanized or DOA, but then the 
--Death date later removed.  The euthanized or DOA fields need to be cleared out.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
    'Death Issue. Marked deceased without Deceased Date.  Enter temp Deceased Date to clear deceased reason, then re-Save.' AS issue
FROM animal
WHERE (puttosleep = 1 OR diedoffshelter = 1 OR isdoa = 1)
  AND deceaseddate IS NULL
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Alerts when an litter name was added to an animal, but a litter was not added in Edit Litters
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
    'Litter Name Added, but Litter Not Created in ASM > Edit litters.' AS issue
FROM animal
WHERE acceptancenumber <> '' 
AND NOT EXISTS(select ID FROM animallitter al WHERE al.acceptancenumber = animal.acceptancenumber)

--Checks for Media with default name of New document.  Added 11/5/2021
UNION SELECT   
  'See Code to search' as name,
  CASE WHEN linktypeid = 0 THEN (SELECT 'Sheltercode ' || sheltercode FROM animal a WHERE linkID = a.id)
   WHEN linktypeid = 1 THEN (SELECT 'Lost Animal ' || TO_CHAR(ID, '000000') FROM animallost al WHERE linkID = al.id)
   WHEN linktypeid = 2 THEN (SELECT 'Found Animal ' || TO_CHAR(ID, '000000') FROM animalfound af WHERE linkID = af.id)
   WHEN linktypeid = 3 THEN (SELECT 'Person Code ' || ownercode FROM owner o WHERE linkID = o.id)
   WHEN linktypeid = 5 THEN (SELECT 'Waitlist ' || TO_CHAR(ID, '000000') FROM animalwaitinglist aw WHERE linkID = aw.id)
   WHEN linktypeid = 6 THEN (SELECT 'AC Incident ' || TO_CHAR(ID, '000000') FROM animalcontrol ac WHERE linkID = ac.id)
   END AS code,
  date(media.createddate) AS issuedate,
  'Media Issue.  Rename document or delete blank <i>New document</i>.' AS issue
FROM media
WHERE medianotes = 'New document'

--Alerts when adopted and marked microchip, but no microchip number entered.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  'Microchip Issue.  Marked <i>Microchipped</i> but no number in Health and Identification section. <font color = "Red">Alerts for 30 days.</font>' AS issue 
FROM animal
WHERE  animal.deceaseddate is null
  AND animal.Identichipped = 1 
  AND animal.Identichipnumber = ''
  AND NOT animal.ACTIVEMOVEMENTTYPE = 5
  AND animal.activemovementdate > current_date - 30
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Alerts when an animal is adopted, but hasn't been microchipped.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  animal.activemovementdate AS issuedate,
  'Microchip Issue.  Not Microchipped but adopted.' AS issue 
FROM animal
WHERE  animal.deceaseddate IS NULL
  AND animal.NONSHELTERANIMAL = 0
  AND animal.activemovementtype = 1
  --AND animal.activemovementdate > current_date - 60 - ignore. Make them enter.
  AND animal.activemovementdate > '2019-01-01'
  AND animal.Identichipped = 0
  --AND adoption.ISTRIAL = 0 - look for neutered instead.
  AND animal.Neutered = 1
  AND animal.speciesid in (1,2)
  AND animal.iscourtesy = 0
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--While ASM will accept - & *, if someone is searching for a microchip number, and
--enters only numbers, they will not find these records. Better to stay consistent.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  'Microchip Number invalid.  Remove - or *.' AS issue
FROM animal
WHERE ((animal.identichipnumber LIKE '%*%' OR animal.identichipnumber LIKE '%-%')
  OR (animal.identichip2number LIKE '%*%' OR animal.identichip2number LIKE '%-%'))
  AND animal.IsNotForRegistration = 0
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Reports when Entry Category indicates Owner Surrender, but no owner
--entered in Original Owner field.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  'No Owner in <i>Original Owner</i> field in Entry section even though designated Owner Surrender' AS issue
FROM animal
INNER JOIN entryreason ON entryreason.ID = animal.EntryReasonID
WHERE animal.archived=0
  AND animal.originalownerid = 0
  --AND animal.entryreasonid < 16
  AND entryreason.ReasonName LIKE 'OS -%'
  AND animal.istransfer = 0
  AND animal.reasonno = '' -- make sure a Reason not from owner wasn't entered
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Reports when an owner is not entered for a Non-Shelter animal.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.DateBroughtIn) AS issuedate,
  'No Owner in <i>Original Owner</i> field in Entry section on Non-Shelter animal.' AS issue 
FROM animal
WHERE  animal.deceaseddate IS NULL
  AND animal.NONSHELTERANIMAL = 1 
  AND animal.ORIGINALOWNERID = 0
  AND NOT animal.animalname LIKE 'Template%'
  AND datebroughtin > '2010-01-01'
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')
  
--Reports when a Non-Shelter Flag is added to an animal with an active movement. Added 2/9/2022
UNION SELECT animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  '<font color = "Red"><i>Non-Shelter</i> Flag added to animal with an active movement. Alerts Only Once.</font>' AS issue
FROM animal
WHERE date_trunc('day', LastChangedDate) = current_date -1
  AND nonshelteranimal = 1 
  AND activemovementtype > 0

--Reports animals adopted but not altered. Can use this or next option if you set a spay/neuter due date in Medical. 
UNION SELECT
  animal.animalname AS name,
  animal.sheltercode AS code,
  animal.activemovementdate AS issuedate,
    'Not altered but adopted.' AS issue
FROM animal
  LEFT OUTER JOIN owner cw ON cw.ID = animal.adoptioncoordinatorID
  INNER JOIN adoption ON adoption.ID = animal.activemovementID
WHERE  animal.deceaseddate IS NULL
  AND animal.nonshelteranimal = 0
  AND animal.activemovementtype = 1
  AND animal.activemovementdate > '2010-01-01'
  AND animal.Neutered = 0
  AND adoption.ISTRIAL = 0
  AND EXTRACT(days FROM current_date - animal.dateofbirth) >= 185
  AND animal.speciesid in (1,2)
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

-- Either use code above or this code.  Use this code if you set a spay/neuter due date in Medical. Added 8/12/2021
UNION SELECT
  animal.animalname as name,
  animal.sheltercode as code,
  animal.activemovementdate AS issuedate,
    'Not altered but adopted.  Spay/Neuter due date not entered in Medical or past due.' AS issue
FROM animal
  LEFT OUTER JOIN owner cw ON cw.ID = animal.adoptioncoordinatorID
  INNER JOIN adoption ON adoption.ID = animal.activemovementID
WHERE animal.deceaseddate is null
  AND animal.activemovementtype = 1
  AND animal.activemovementdate > '2010-01-01'
  AND animal.Neutered = 0
  AND adoption.ISTRIAL = 0
  AND EXTRACT(days FROM current_date - animal.dateofbirth) >= 185
  AND animal.speciesid in (1,2)
  AND (NOT EXISTS(SELECT animalmedical.ID FROM animalmedical INNER JOIN animalmedicaltreatment amt ON amt.animalmedicalid = animalmedical.ID WHERE animalmedical.AnimalID = animal.ID AND animalmedical.TreatmentName like 'Spay%') -- REVIEW.  Update to match Medical Profile name
       OR
    EXISTS(SELECT animalmedical.ID FROM animalmedical INNER JOIN animalmedicaltreatment amt ON amt.animalmedicalid = animalmedical.ID WHERE animalmedical.AnimalID = animal.ID AND animalmedical.TreatmentName like 'Spay%' AND amt.DateRequired < current_date -1))  -- REVIEW.  Update to match Medical Profile name
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%') 


--Compares current owner (animal.ownerid with adoption.ownerid) to see if maybe
--someone changed this field instead of creating a movement.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
   date(animal.LastChangedDate) AS issuedate,
   '<i>Owner</i> field in Details Section has changed.  Be sure that this was not changed instead of creating a Movement.  This should only be used when an <b>adopter</b> re-homes an animal and you do not wish to track that Movement.  <font color = "Red">Alerts Only Once.</font>' AS issue
FROM animal
INNER JOIN adoption ON adoption.id = animal.activemovementid
WHERE date_trunc('day', animal.LASTCHANGEDDATE) = current_date -1
  AND animal.ownerid <> adoption.ownerid
  AND adoption.MovementType = 1
  AND adoption.istrial = 0
  AND adoption.ReturnDate IS NULL
  AND animal.deceasedDate IS NULL

--Reports when Entry Category indicates NOT Owner Surrender, but an owner is
--entered in Original Owner field.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  'Person in <i>Original Owner</i> field in Entry section even though NOT Owner Surrender' AS issue 
FROM animal
INNER JOIN entryreason ON entryreason.ID = animal.EntryReasonID
WHERE animal.nonshelteranimal = 0
  AND NOT animal.originalownerid = 0
  AND animal.istransfer = 0
  --AND animal.entryreasonid > 15
  --AND entryreason.ReasonName NOT LIKE 'OS -%'
  AND NOT (entryreason.ReasonName LIKE 'OS -%' OR entryreason.ReasonName LIKE 'Abuse%')
--  AND NOT animal.entryreasonid = 20 -- REVIEW ENTRY REASONS
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Reports when Entry Category indicates Owner Surrender, and the owner is entered
--in BOTH broughtinby and original owner field.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  'Person in <i>Brought In By</i> field is not needed.  Delete and Save.  (Entry section)' AS issue
FROM animal
INNER JOIN entryreason ON entryreason.ID = animal.EntryReasonID
WHERE animal.nonshelteranimal = 0
  AND animal.originalownerid <> 0
  AND animal.originalownerid = animal.BROUGHTINBYOWNERID
  --AND animal.entryreasonid < 16
  AND entryreason.ReasonName LIKE 'OS -%'
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')  

-- Looks for Alerts in the publishing logs.
UNION SELECT
  'Logs' AS name,
  'None' AS code,
  current_date AS issuedate,
      'Please review Publishing > View publishing logs > for error. <font color = "Red">Alerts Only Once.</font>' AS issue
FROM publishlog
WHERE date_trunc('day', publishlog.publishdatetime) = current_date
  AND ALERTS > 0
  AND LOGDATA NOT LIKE '%Got 0 matching animals for publishing%'

--Check to see if published animals have had bios written for them.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  'Published animal without bio in Description box (Notes section).' AS issue
FROM animal
INNER JOIN media ON media.LINKID = animal.id
WHERE Archived = 0
  AND EXTRACT(days FROM current_date - animal.dateofbirth) >= 60
  AND animal.isnotavailableforadoption = 0
  AND media.websitephoto = 1
  AND animal.ACTIVEMOVEMENTTYPE IS NULL
  AND animal.animalcomments = ''
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Animal's gender is not entered.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  'Sex not specified.' AS issue 
FROM animal
WHERE animal.nonshelteranimal = 0
  AND animal.deceaseddate IS NULL
  AND animal.DATEBROUGHTIN > '2019-01-01'
  AND animal.sex = 2
  AND animal.speciesid in (1,2)
  AND EXTRACT(days FROM animal.datebroughtin - animal.dateofbirth) > 42 -- at 6weeks
   AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--This is a TWO PART check.  This alerts when an animal was too young for a 
--heartworm test when it came in, but now is old enough.
UNION SELECT
   animal.animalname AS name,
   animal.sheltercode AS code,
   date(animal.LastChangedDate) AS issuedate,
  'Test Issue.  Heartworm Test <i>Due</i> needs to be added in Test Tab.' AS issue -- this is needed for pups that reach 6m in shelter. Part 1
FROM animal
WHERE animal.archived=0
  AND EXTRACT(days FROM current_date - animal.dateofbirth) >= 210 -- 7 months to alway for Templates
  --AND EXTRACT(days FROM animal.datebroughtin - animal.dateofbirth) > 180  -- Only test if 6m when received.
   AND animal.speciesid = 1 -- COMMENT OUT ON CAT REPORT
   AND NOT EXISTS(SELECT animaltest.testtypeid FROM animaltest INNER JOIN testtype ON testtype.ID = animaltest.TESTTYPEID WHERE animaltest.AnimalID = animal.ID AND testtype.TESTNAME like 'Heartworm%') 
    AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--This is the second part of a TWO PART check.  This alerts when an animal is older
--than a year without a heartworm test scheduled. 
UNION SELECT
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  'Test Issue.  Heartworm Test <i>Due</i> needs to be added in Test Tab.' AS issue -- This finds tests that are older than 1 year. Part 2
FROM animal
--INNER JOIN animaltest ON animaltest.ANIMALID = animal.id
WHERE animal.archived=0
  AND EXTRACT(days FROM current_date - animal.dateofbirth) >= 210 -- 7 months to allow for Templates
  AND animal.speciesid = 1
  AND EXISTS(SELECT animaltest.testtypeid FROM animaltest INNER JOIN testtype ON testtype.ID = animaltest.TESTTYPEID WHERE animaltest.AnimalID = animal.ID    AND testtype.TESTNAME like 'Heartworm%' and animaltest.DATEOFTEST < CURRENT_DATE - INTERVAL '1 year')
  AND NOT EXISTS(SELECT animaltest.testtypeid FROM animaltest INNER JOIN testtype ON testtype.ID = animaltest.TESTTYPEID WHERE animaltest.AnimalID = animal.ID AND testtype.TESTNAME like 'Heartworm%' and animaltest.DATEOFTEST >= CURRENT_DATE - INTERVAL '1 year')
 AND NOT EXISTS(SELECT animaltest.testtypeid FROM animaltest INNER JOIN testtype ON testtype.ID = animaltest.TESTTYPEID WHERE animaltest.AnimalID = animal.ID AND testtype.TESTNAME like 'Heartworm%' and animaltest.DATEOFTEST is null)
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Alerts when an animal is adopted that is over 6 months and not heartworm tested.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  animal.activemovementdate AS issuedate,
'Test Issue.  Not Heartworm Tested but adopted.  <font color = "Red">Alerts for 7 Days Only.</font>' AS issue
FROM animal
WHERE animal.deceaseddate IS NULL
  AND animal.activemovementtype = 1
  AND animal.activemovementdate > current_date - 7 --Reports for 7 days then goes away
  AND EXTRACT(days FROM animal.datebroughtin - animal.dateofbirth) > 180
  AND animal.heartwormtested = 0
  AND animal.speciesid = 1
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--This checks HW Positive Dogs for a retest date if shelter follows up on HW positive dogs.   Added 8/12/2021
--Change from 6 month TO 1 year in INTERVAL statements if needed
UNION SELECT
animal.animalname as name,
animal.sheltercode as code,
date(animal.LastChangedDate) AS issuedate,
   'Test Issue. Heartworm Positive Dog needs to be re-tested or Heartworm Test Due needs to be added to Test Tab.' AS ISSUE
FROM animal
  INNER JOIN species ON species.ID = animal.SpeciesID
  LEFT OUTER JOIN owner cw ON cw.ID = animal.adoptioncoordinatorID
--INNER JOIN animaltest ON animaltest.ANIMALID = animal.id
WHERE (animal.archived=0 OR (animal.activemovementtype IN (1,11) AND animal.ActiveMovementDate > '2020-01-01'))
  AND animal.HeartwormTestResult = 2
  AND animal.speciesid = 1
  AND animal.HeartwormTestDate < CURRENT_DATE - INTERVAL '1 year'
  AND NOT EXISTS(SELECT animaltest.testtypeid FROM animaltest INNER JOIN testtype ON testtype.ID = animaltest.TESTTYPEID WHERE animaltest.AnimalID = animal.ID AND testtype.TESTNAME like 'Heartworm%' and animaltest.DATEOFTEST is null)     
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%') 

--Two-part check for FIV/FLV Test
UNION SELECT
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate, 
 'Test Issue.  FIV/FLV Test <i>Due</i> needs to be added in Test Tab.' AS issue -- this is needed for cats that reach 2m in shelter. Part 1
FROM animal
WHERE animal.archived=0
  AND EXTRACT(days FROM current_date - animal.dateofbirth) >= 60 -- 7 months to alway for Templates
--  --AND EXTRACT(days FROM animal.datebroughtin - animal.dateofbirth) > 180  -- Only test if 6m when received.
  AND animal.speciesid = 2
  AND NOT EXISTS(SELECT animaltest.testtypeid FROM animaltest INNER JOIN testtype ON testtype.ID = animaltest.TESTTYPEID WHERE animaltest.AnimalID = animal.ID AND testtype.TESTNAME like 'FIV%') 
   AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

-- This catches tests older than one year.  Part 2
UNION SELECT
animal.animalname AS name,
animal.sheltercode AS code,
 date(animal.LastChangedDate) AS issuedate,
  'Test Issue.  FIV/FLV Test <i>Due</i> needs to be added in Test Tab.' AS issue -- This finds tests that are older than 1 year. Part 2
FROM animal
--INNER JOIN animaltest ON animaltest.ANIMALID = animal.id
WHERE animal.archived=0
  AND EXTRACT(days FROM current_date - animal.dateofbirth) >= 210 -- 7 months to allow for Templates   AND animal.speciesid = 1
  AND EXISTS(SELECT animaltest.testtypeid FROM animaltest INNER JOIN testtype ON testtype.ID = animaltest.TESTTYPEID WHERE animaltest.AnimalID = animal.ID  AND testtype.TESTNAME like 'FIV%' and animaltest.DATEOFTEST < CURRENT_DATE - INTERVAL '1 year')
 AND NOT EXISTS(SELECT animaltest.testtypeid FROM animaltest INNER JOIN testtype ON testtype.ID = animaltest.TESTTYPEID WHERE animaltest.AnimalID = animal.ID AND testtype.TESTNAME like 'FIV%' and animaltest.DATEOFTEST >= CURRENT_DATE - INTERVAL '1 year')
 AND NOT EXISTS(SELECT animaltest.testtypeid FROM animaltest INNER JOIN testtype ON testtype.ID = animaltest.TESTTYPEID WHERE animaltest.AnimalID = animal.ID AND testtype.TESTNAME like 'FIV%' and animaltest.DATEOFTEST is null)
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Alerts for cat adoptions without FIV test
UNION SELECT 
animal.animalname AS name,
animal.sheltercode AS code,
 animal.activemovementdate AS issuedate,
'Test Issue. Not FIV/FLV Tested but adopted.  <font color = "Red">Alerts for 7 Days Only.</font>' AS Issue 
FROM animal
WHERE animal.deceaseddate IS NULL
  AND animal.activemovementtype = 1
  AND animal.activemovementdate > current_date - 7
  AND EXTRACT(days FROM animal.datebroughtin - animal.dateofbirth) > 60
  AND animal.CombiTested = 0
  AND animal.speciesid = 2
 AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Alerts if marked 'Transfer In'  but the Entry Category not set to Transfer from …
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  'Transfer In Issue. Marked <i>Transfer In</i>, but <i>Entry Category</i> not set to Transfer from Shelter/Rescue in Entry section.' AS issue 
FROM animal
  INNER JOIN entryreason ON entryreason.ID = animal.EntryReasonID
WHERE animal.nonshelteranimal = 0
  AND animal.istransfer = 1
--AND NOT animal.entryreasonid = 18  -- Check Entry Reason ID
  AND entryreason.ReasonName NOT LIKE '%Transf%'
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Alerts if Entry Category set to Transfer from but 'Transfer In' box not checked. Added 8/12/21
UNION SELECT 
animal.animalname as name,
animal.sheltercode as code,
date(animal.LastChangedDate) as issuedate,
'Transfer In Issue. <i>Transfer</i> Entry Category Selected, but <i>Transfer In Checkbox</i> Not Selected in Entry Section.' AS issue 
FROM animal
   INNER JOIN entryreason ON entryreason.ID = animal.EntryReasonID
WHERE animal.nonshelteranimal = 0
  AND animal.datebroughtin > '2020-01-01'
  AND animal.istransfer = 0
--AND NOT animal.entryreasonid = 18  -- USE THIS OR NEXT LINE.  Check Entry Reason ID
  AND entryreason.ReasonName LIKE '%Transf%'
AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--If marked 'Transfer In' , but check to see if there is a person in the 'Transferred From'
--field in the Entry Section.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  'Transfer In Issue. Marked <i>Transfer In</i>, but no person in <i>Transferred From</i> field in Entry section.' AS issue 
FROM animal
INNER JOIN entryreason ON entryreason.ID = animal.EntryReasonID
WHERE animal.datebroughtin > '2000-01-01'
  AND animal.nonshelteranimal = 0
  AND animal.broughtinbyownerid = 0
  AND (animal.istransfer = 1 OR entryreason.ReasonName LIKE '%Transf%')
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--If marked 'Transfer In' ,  check to see if person in the 'Transferred From'
--field is flagged as a Vet or Other Shelter.  Added 8/12/2021
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  date(animal.LastChangedDate) AS issuedate,
  'Transfer In Issue. Marked <i>Transfer In</i>, but person in from not flagged as <i>Other Shelter or Vet</i>' AS issue 
FROM animal
INNER JOIN entryreason ON entryreason.ID = animal.EntryReasonID
INNER JOIN owner on owner.id = animal.broughtinbyownerid
WHERE animal.datebroughtin > '2000-01-01'
  AND animal.nonshelteranimal = 0
  AND animal.broughtinbyownerid <> 0
  AND NOT (owner.AdditionalFlags LIKE 'shelter|%' OR owner.AdditionalFlags  LIKE '%|shelter|%' OR owner.AdditionalFlags LIKE 'vet|%' OR owner.AdditionalFlags LIKE '%|vet|%')
  AND (animal.istransfer = 1 OR entryreason.ReasonName LIKE '%Transf%')
  AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Reports an animal that was transferred to a organization/person that doesn't have
--the Other Shelter flag.   This flag is needed for the 'Transfer an animal' functionality
--to work.
UNION SELECT
  animal.animalname AS name,
  animal.sheltercode AS code,
  animal.activemovementdate AS issuedate,
   'Transfer Movement. Person record not flagged as <i>Other Shelter</i>' AS issue
FROM animal
  INNER JOIN adoption on adoption.id = animal.activemovementid
  INNER JOIN owner on owner.id = adoption.ownerid
  LEFT OUTER JOIN owner cw ON cw.ID = animal.adoptioncoordinatorID
WHERE animal.nonshelteranimal = 0
  AND animal.DATEBROUGHTIN > '2010-01-01'
  AND adoption.movementtype = 3
  AND NOT (owner.AdditionalFlags LIKE 'shelter|%' OR owner.AdditionalFlags  LIKE '%|shelter|%')
  -- AND animal.id > 4750
AND NOT (animal.AdditionalFlags LIKE 'Ignore Issues|%' OR animal.AdditionalFlags  LIKE '%|Ignore Issues|%')
  
--Alerts when animal is marked as a Trial Adoption but no trail ends on date is entered.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  animal.activemovementdate AS issuedate,
  'Trial Adoption - <i>Trial ends on</i> date field is blank.' AS issue 
FROM animal
INNER JOIN adoption ON adoption.ID = animal.activemovementID
WHERE animal.deceaseddate IS NULL
  AND animal.activemovementtype = 1
  AND adoption.ISTRIAL = 1
  AND adoption.trialenddate is null

--Alerts when the Trial end date has expired.
UNION SELECT 
  animal.animalname AS name,
  animal.sheltercode AS code,
  adoption.trialenddate AS issuedate,
  'Trial adoption ended.  Extend date or Uncheck <i>Trial</i> box in Movement.' AS issue
FROM animal
INNER JOIN adoption ON adoption.ID = animal.activemovementID
WHERE animal.deceaseddate IS NULL
  AND animal.activemovementtype = 1
  AND adoption.ISTRIAL = 1
  AND adoption.trialenddate < current_date
  
--Alerts when first character of Vaccination Manufacturer is a numeric.
UNION SELECT 
animal.animalname as name,
animal.sheltercode as code,
  animalvaccination.DateOfVaccination AS issuedate,
'Vaccination Issue. Manufacturer Starts With Numeric' AS ISSUE 
FROM animal
INNER JOIN animalvaccination ON animalvaccination.animalid = animal.id
WHERE substring(animalvaccination.Manufacturer,1,1) in ('0','1','2','3','4','5','6','7','8','9')

--Checks to see if Rabies Tag is missing.  Added 8/12/2021
UNION SELECT
  animal.animalname as name,
  animal.sheltercode as code,
  animalvaccination.DateOfVaccination AS issuedate,
  'Vaccination Issue.  Missing Rabies Tag Number in Vaccination Record.'  AS ISSUE 
FROM animal
INNER JOIN animalvaccination ON animalvaccination.animalid = animal.id
WHERE animalvaccination.vaccinationid IN (4) -- REVIEW Rabies ID needed
  AND animalvaccination.DateofVaccination IS NOT NULL
  AND animalvaccination.RabiesTag = ''
  --AND date_trunc('day', animalvaccination.LastChangedDate) = current_date -1
  AND date_trunc('day', animalvaccination.LastChangedDate) > '2021-01-01'
  AND animal.nonshelteranimal = 0


-----------------------------OWNER SECTION---------------------------------------------------------
--This alerts when banned people also do not have the Exclude from bulk mailings flag.
--You want to make sure that you do not email or mail users that have been banned.
UNION SELECT
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
 'Banned Person without Exclude from bulk mailings Flag' AS issue  
FROM owner
WHERE isbanned = 1
  AND excludefrombulkemail = 0

--Checks to see if first name is missing on person records tagged as "Individuals".
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
  'First Name is Blank.  Possible Organization.' AS issue
FROM owner
WHERE ownerforenames = '' and ownertype = 1

--Checks to see if there is a firstname on an Organization Record. 
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
  'First Name should be blank.  Change to Individual, clear First Name field, change back to Organization, and then re-Save.' AS issue
FROM owner
WHERE ownerforenames <> '' AND ownertype = 2

--Checks for ownercodes that start with XX, which means last name field is missing.
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
  'Invalid Last Name or Organization Name.' AS issue
FROM owner
WHERE ownercode LIKE 'XX%'

--Checks for spaces in first character of name field.  Extra spaces causes missed matches.
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
  'Space in first character of name field.' AS issue
FROM owner
WHERE (ownerforenames LIKE ' %' OR ownersurname LIKE ' %')
AND NOT (owner.AdditionalFlags LIKE 'Ignore Issues|%' OR owner.AdditionalFlags  LIKE '%|Ignore Issues|%') 

--Checks for extra spaces in address field.  Extra spaces causes missed matches.
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
  'Extra spaces in address field.' AS issue
FROM owner
WHERE owneraddress like '%  %'
AND NOT (owner.AdditionalFlags LIKE 'Ignore Issues|%' OR owner.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Checks for cities entered with a comma.  Added 11/5/2021
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  current_date -1 AS issuedate,
  '<font color = "Red">Possible address issue.  Comma in City field. Alerts Only Once.</font>' AS issue
FROM owner
WHERE ownertown LIKE '%,%'
AND date_trunc('day', LastChangedDate) = current_date -1

--This alert shows if North, South, East, West, etc.
--It is important to stardardized entry of addresses so that this script can detect possible address duplications.    Added 11/18/2021
UNION SELECT
o.ownername as name,
  o.ownercode as code,
  current_date -1 AS issuedate,
  '<font color = "Red">Possible address standardization issue (' || o.owneraddress || ').  North, South, First, etc.  Change to N., S., 1st, if needed. Alerts Only Once.</font>' AS issue
FROM owner o
where date_trunc('day', LastChangedDate) = current_date -1
AND (upper(owneraddress) like '% NORTH %'
     OR upper(owneraddress) like '% SOUTH %'
     OR upper(owneraddress) like '% EAST %'
     OR upper(owneraddress) like '% WEST %'
     OR upper(owneraddress) like '% HIGHWAY %'
     OR upper(owneraddress) like '% FIRST %'
     OR upper(owneraddress) like '% SECOND %'
     OR upper(owneraddress) like '% THIRD %'
     OR upper(owneraddress) like '% FOURTH %'
     OR upper(owneraddress) like '% FIFTH %'
     OR upper(owneraddress) like '% SIXTH %') 

--Checks for cities entered in ALL upper or lower case.  And common misspellings of city 
--names.
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
  'Invalid City or Capitalization.' AS issue
FROM owner
WHERE ownertown <> ''
 AND (upper(ownertown) = ownertown
 OR lower(ownertown) = ownertown
 OR ownertown IN ('Prairie grove','Prairiegrove')
 OR (ownertown LIKE 'Fay%' AND ownertown <> 'Fayetteville'))
AND NOT (owner.AdditionalFlags LIKE 'Ignore Issues|%' OR owner.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Checks for invalid state abbreviations.  Ignores State check if there is data in the Country
--field.
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
  'Invalid State abbreviation.' AS issue
FROM owner
WHERE owner.OWNERTOWN <> ''
  AND (owner.OWNERCOUNTRY LIKE 'US%' OR owner.OWNERCOUNTRY LIKE 'United States%' OR owner.OWNERCOUNTRY = '')  -- skip check if foreign county
  AND owner.OWNERCOUNTY NOT IN ('AK', 'AL', 'AR', 'AS', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'GU', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MP', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UM', 'UT', 'VA', 'VI', 'VT', 'WA', 'WI', 'WV', 'WY')
  AND NOT (owner.AdditionalFlags LIKE 'Ignore Issues|%' OR owner.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Notifies missing zipcode when the address, city, and state have been entered.
UNION SELECT
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
 'Missing Zipcode.' AS issue
FROM owner
WHERE owner.LASTCHANGEDDATE > '2019-01-01'
  AND NOT owner.OWNERADDRESS = '' 
  AND NOT owner.OWNERTOWN = '' 
  AND NOT owner.OWNERCOUNTY = '' 
  AND (owner.OWNERCOUNTRY LIKE 'US%' OR owner.OWNERCOUNTRY LIKE 'United States%' OR owner.OWNERCOUNTRY = '')  -- skip check if foreign country
  AND owner.ownerpostcode = ''
  AND NOT (owner.AdditionalFlags LIKE 'Ignore Issues|%' OR owner.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Alerts when zipcode doesn’t match standard pattern.  For example, all Arkansas
--zipcodes start with 7.
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
  'Invalid Zipcode.' AS issue
FROM owner
WHERE owner.OWNERCOUNTY = 'AR' 
  AND ownerpostcode <>  '' 
  AND (ownerpostcode NOT LIKE '7%' OR (ownerpostcode NOT LIKE '722%' AND ownertown = 'Little Rock'))
--AND OWNER.LASTCHANGEDDATE > '2020-01-01'
--AND NOT (ownerpostcode like '46%' or ownerpostcode like '47%')

--Alerts when zipcode length doesn't match 5 or 10.  Added 7/16/2021
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
  'Invalid Zipcode Length.' AS issue
FROM owner
WHERE ownerpostcode <>  '' 
  AND LENGTH(ownerpostcode) not in (5,10)
  AND ownerpostcode < 'a' -- Only look at numbers.
--AND OWNER.LASTCHANGEDDATE > '2020-01-01'
  AND NOT (owner.AdditionalFlags LIKE 'Ignore Issues|%' OR owner.AdditionalFlags  LIKE '%|Ignore Issues|%')

--Checks for Countries entered in lower case.  And common misspellings of Country names. Added 5/14/2022
UNION SELECT 
  owner.ownername as name,
  owner.ownercode as code,
  date(owner.LastChangedDate) as issuedate,
  'Invalid Country or Capitalization.' AS issue
FROM owner
WHERE ownercountry <> ''
 --AND (upper(ownertown) = ownertown
 AND (lower(ownercountry) = ownercountry
 OR ownercountry in ('Grand Cayman','The Cayman Islands')) -- Checks for common country misspellings or errors

--This strips out all characters and then alerts if phone number is not equal to 10 or 11 (in case someone enters a 1 in front of area code)
--characters.  It will ignore this if two phone numbers are in same field but separated
--by a slash (/)
UNION SELECT
owner.ownername as name,
  owner.ownercode as code,
  date(owner.LastChangedDate) AS issuedate,
 'Invalid Phone Number Length. If combining two, separate with /.' AS issue 
FROM owner
WHERE (LENGTH(NULLIF(regexp_replace(hometelephone, '\D','','g'), '')) NOT IN (10,11) 
OR LENGTH(NULLIF(regexp_replace(mobiletelephone, '\D','','g'), '')) NOT IN (10,11))
AND (hometelephone NOT LIKE '%/%' AND mobiletelephone NOT LIKE '%/%')
AND OWNER.LASTCHANGEDDATE > '2020-01-01'
AND NOT (owner.AdditionalFlags LIKE 'Ignore Issues|%' OR owner.AdditionalFlags  LIKE '%|Ignore Issues|%')

--This strips out all characters and then alerts if phone number is 11 characters and the first character 
--is not a 1 (in case someone enters a 1 in front of area code). Added 11/10/2021
UNION SELECT
owner.ownername as name,
  owner.ownercode as code,
  date(owner.LastChangedDate) AS issuedate,
 'Invalid Phone Number.  If 11 digits, should begin with <i>1</i>.' AS issue 
FROM owner
WHERE (LENGTH(NULLIF(regexp_replace(hometelephone, '\D','','g'), '')) = 11
   AND SUBSTRING(regexp_replace(hometelephone, '\D','','g'),1,1) <> '1'
OR
LENGTH(NULLIF(regexp_replace(mobiletelephone, '\D','','g'), '')) = 11
   AND SUBSTRING(regexp_replace(mobiletelephone, '\D','','g'),1,1) <> '1')
   AND OWNER.LASTCHANGEDDATE > '2000-01-01'
   AND NOT (owner.AdditionalFlags LIKE 'Ignore Issues|%' OR owner.AdditionalFlags  LIKE '%|Ignore Issues|%')

--This alert strips out all characters and compares the last 10 digits of mobile and home phone numbers
--for records that were modified the day before. 
UNION SELECT
  o.ownername AS name,
  o.ownercode AS code,
  current_date -1 AS issuedate,
  '<font color = "Red">Duplicate Phone Number - (' || ow.ownercode || ').   Alerts Only Once.</font>' AS issue
FROM owner o, owner ow
WHERE date_trunc('day', o.LASTCHANGEDDATE)  = current_date -1
  AND o.id <> ow.id
AND ((regexp_replace(o.hometelephone, '\D','','g') <> '' AND RIGHT(regexp_replace(o.hometelephone, '\D','','g'),10) LIKE RIGHT(regexp_replace(ow.hometelephone, '\D','','g'),10) AND ow.hometelephone <> '')
   OR (regexp_replace(o.hometelephone, '\D','','g') <> '' AND RIGHT(regexp_replace(o.hometelephone, '\D','','g'),10) LIKE RIGHT(regexp_replace(ow.mobiletelephone, '\D','','g'),10) AND ow.mobiletelephone <> '')
   OR (regexp_replace(o.mobiletelephone, '\D','','g') <> '' AND RIGHT(regexp_replace(o.mobiletelephone, '\D','','g'),10) LIKE RIGHT(regexp_replace(ow.mobiletelephone, '\D','','g'),10) AND ow.mobiletelephone <> '')
   OR (regexp_replace(o.mobiletelephone, '\D','','g') <> '' AND RIGHT(regexp_replace(o.mobiletelephone, '\D','','g'),10) LIKE RIGHT(regexp_replace(ow.hometelephone, '\D','','g'),10) AND ow.hometelephone <> ''))

-- Looks for invalid email addresses missing @ or . and looks for emails with space (emails can have a comma and space separating emails IF listing two or more addresses).  Added 10/28/2021
UNION SELECT 
  owner.ownername as name,
  owner.ownercode as code,
  date(owner.LastChangedDate) as issuedate,
  'Invalid Email.' AS issue
FROM owner
WHERE (owner.EmailAddress NOT LIKE '%@%' OR owner.EmailAddress NOT LIKE '%.%' OR (owner.EmailAddress like '% %' AND owner.EmailAddress NOT LIKE '%, %'))
  AND owner.EmailAddress <> ''

--This alert compares the email of records that were modified the day before with emails
--in the database.
UNION SELECT
  o.ownername AS name,
  o.ownercode AS code,
   current_date -1 AS issuedate,
 '<font color = "Red">Duplicate Email address (' || o.emailaddress || '). Please search on Email.  Alerts Only Once.</font>' AS issue
FROM owner o
WHERE date_trunc('day', o.LASTCHANGEDDATE) = current_date -1
AND o.emailaddress <> '' 
AND lower(o.emailaddress) IN (SELECT lower(ow.emailaddress) FROM owner ow WHERE o.id <> ow.id AND ow.emailaddress <> '')

--This alert if the @ sign appears in the phone number fields.
UNION SELECT
  o.ownername AS name,
  o.ownercode AS code,
  date(o.LastChangedDate) as issuedate,
 '<font color = "Red">Possible Email Address in Wrong Field.  Alerts Only Once.</font>' AS issue
FROM owner o
WHERE date_trunc('day', o.LASTCHANGEDDATE) = current_date -1
AND (o.hometelephone LIKE '%@%' 
OR o.mobiletelephone LIKE '%@%' 
OR o.mobiletelephone LIKE '%@%')

--Looks for special characters that will affect searches.  Added 7/16/2021
UNION SELECT
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
 'Invalid Character (such as ‘ or -).  Type over and re-Save.' AS issue  
FROM owner
WHERE ownerforenames like '%&#%' OR ownersurname like '%&#%'
      OR owneraddress like '%&#%' OR ownertown like '%&#%'
      OR ownercounty like '%&#%'

--Alerts when the license expiration date compared to the issue date is less than 335 days
--or expiration date is less than issue date.
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  date(ol.LastChangedDate) AS issuedate,
  'Invalid License Expiration Date.' AS issue
FROM ownerlicence ol
  INNER JOIN owner ON owner.ID = ol.OwnerID
WHERE extract(days from ol.ExpiryDate - ol.ISSUEDATE) < 335
OR ol.ExpiryDate < ol.ISSUEDATE

--This looks at the comments field of citation to see if the different ordinance numbers have
--been entered.  This allows for reporting of individual ordinance violations if needed.
UNION SELECT
o.OwnerName AS name,
o.ownercode AS code,
 oc.CreatedDate AS issuedate,
'Missing citation number(s) in Comments' AS issue
FROM ownercitation oc
INNER JOIN citationtype ct ON ct.ID = oc.CitationTypeID
INNER JOIN owner o ON o.ID = oc.OwnerID 
WHERE oc.comments = ''

 --If person designated as Member, checks for membership expiration date.
UNION SELECT 
  owner.ownername AS name,
  owner.ownercode AS code,
  date(owner.LastChangedDate) AS issuedate,
    'Missing Membership Flag or Date.' AS issue
FROM owner
WHERE (ismember = 1 AND owner.MEMBERSHIPEXPIRYDATE IS NULL) OR
(ismember = 0 AND owner.MEMBERSHIPEXPIRYDATE > current_date)

--Notifies when an online form is attached to a person who is already in the system.
UNION SELECT DISTINCT
o.ownername AS name,
  o.ownercode AS code,
 current_date -1 AS issuedate, 
 '<font color = "Red">Online Form Attached to existing Person Record. Compare the data in the First and Last Name fields with the data on the NEW online form.  When ASM finds a cell phone or email match, it ONLY updates the address, phone, and email info. Alerts Only Once.</font>' AS issue
FROM owner o
INNER JOIN media m ON m.linkid = o.ID
WHERE  m.medianotes IN ('Cat Adoption Application', 'Dog Adoption Application','Getting Help - Cat', 'Getting Help - Dog','SNIP Application','Foster Application','Volunteer Application')
  AND m.linktypeid = 3
  AND date_trunc('day', m.date) = current_date -1
  AND cast(o.CREATEDDATE AS DATE) < cast(m.date AS DATE)  

--Reports if person added day before is not linked to any records and has no flags.
--Suspect that when modifying a person link, ASM does not warn if leaving before saving.
UNION SELECT DISTINCT
  o.ownername AS name,
  o.ownercode AS code,
  date(o.LastChangedDate) as issuedate,
  '<font color = "Red">Person Record added but NOT LINKED to any records and has no Flags.  Alerts Only Once.</font>' AS issue
FROM owner o
WHERE date_trunc('day', o.createddate) = current_date - 1
AND (o.additionalflags = '|' OR o.additionalflags = '')
AND NOT EXISTS(SELECT ID FROM adoption WHERE OwnerID = o.ID OR ReturnedByOwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM animal WHERE OriginalOwnerID = o.ID OR BroughtInByOwnerID = o.ID OR OwnerID = o.ID OR CurrentVetID = o.ID OR OwnersVetID = o.ID 
    OR AdoptionCoordinatorID = o.ID OR NeuteredByVetID = o.ID)
AND NOT EXISTS(SELECT ID FROM animalcontrol WHERE VictimID = o.ID OR CallerID = o.ID OR OwnerID = o.ID OR Owner2ID = o.ID OR Owner3ID = o.ID)
AND NOT EXISTS(SELECT ID FROM animalfound WHERE OwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM animallost WHERE OwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM animalwaitinglist WHERE OwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM animaltransport WHERE DriverOwnerID = o.ID OR PickupOwnerID = o.ID OR DropoffOwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM animalmedicaltreatment WHERE AdministeringVetID = o.ID)
AND NOT EXISTS(SELECT ID FROM animaltest WHERE AdministeringVetID = o.ID)
AND NOT EXISTS(SELECT ID FROM animalvaccination WHERE AdministeringVetID = o.ID)
AND NOT EXISTS(SELECT ID FROM clinicappointment WHERE OwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM log WHERE LinkID = o.ID AND LinkType = 1)
AND NOT EXISTS(SELECT ID FROM media WHERE media.LinkID = o.ID AND media.LinkTypeID = 3) 
AND NOT EXISTS(SELECT ID FROM ownercitation WHERE OwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM ownerdonation WHERE OwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM ownerinvestigation WHERE OwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM ownerlicence WHERE OwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM ownerrota WHERE OwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM ownertraploan WHERE OwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM ownervoucher WHERE OwnerID = o.ID)
AND NOT EXISTS(SELECT ID FROM users WHERE OwnerID = o.ID)

--This searches for partial address and last name match.
UNION SELECT
  o.ownername AS name,
  o.ownercode AS code,
  date(o.LastChangedDate) AS issuedate,
  '<font color = "Red">Possible Duplicate Person Record - (' || ow.ownercode || ').  Partial address and last or first name match. Alerts Only Once.</font>' AS issue
FROM owner o, owner ow
WHERE date_trunc('day', o.LASTCHANGEDDATE) = current_date -1
  AND LOWER(REGEXP_REPLACE(ow.owneraddress, '[^0-9A-Za-z]', '','g')) LIKE SUBSTR(LOWER(REGEXP_REPLACE(o.owneraddress, '[^0-9A-Za-z]', '','g')),1,8) || '%'
AND o.owneraddress <> ''
AND (LOWER(o.ownersurname) = LOWER(ow.ownersurname) OR (LOWER(o.ownerforenames) = LOWER(ow.ownerforenames) AND ow.ownerforenames <> ''))
AND o.id <> ow.id

) dummy
ORDER BY 4,3
###
$$HEADER
<table border=“1”>
<tr>
<th>ALERT</th>
<th>NAME</th>
<th>CODE</th>
<th>DATE</th>
</tr>
HEADER$$

$$BODY
<tr>
<td>$issue</td>
<td>$name</td>
<td>$code</td>
<td>$issuedate</td>
</tr>
BODY$$

$$FOOTER
</table>
FOOTER$$
