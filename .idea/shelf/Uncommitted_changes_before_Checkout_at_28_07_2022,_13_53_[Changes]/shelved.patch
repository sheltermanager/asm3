Index: src/code.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\n\nimport os, sys\n\n# The path to the folder containing the ASM3 modules\nPATH = os.path.dirname(os.path.abspath(__file__)) + os.sep\n\n# Prepend our modules to the path to make sure they're added first\nsys.path.insert(0, PATH)\n\nimport web062 as web\n\nimport asm3.al\nimport asm3.additional\nimport asm3.animal\nimport asm3.animalcontrol\nimport asm3.asynctask\nimport asm3.audit\nimport asm3.cachedisk\nimport asm3.cachemem\nimport asm3.clinic\nimport asm3.configuration\nimport asm3.csvimport\nimport asm3.db\nimport asm3.dbfs\nimport asm3.dbupdate\nimport asm3.diary\nimport asm3.financial\nimport asm3.html\nimport asm3.log\nimport asm3.lookups\nimport asm3.lostfound\nimport asm3.media\nimport asm3.medical\nimport asm3.mobile\nimport asm3.movement\nimport asm3.onlineform\nimport asm3.paymentprocessor.base\nimport asm3.paymentprocessor.paypal\nimport asm3.paymentprocessor.stripeh\nimport asm3.paymentprocessor.cardcom\nimport asm3.person\nimport asm3.publish\nimport asm3.publishers.base\nimport asm3.publishers.html\nimport asm3.publishers.vetenvoy\nimport asm3.reports\nimport asm3.search\nimport asm3.service\nimport asm3.smcom\nimport asm3.stock\nimport asm3.template\nimport asm3.users\nimport asm3.utils\nimport asm3.waitinglist\nimport asm3.wordprocessor\n\nfrom asm3.i18n import _, BUILD, translate, get_version, get_display_date_format, \\\n    get_currency_prefix, get_currency_symbol, get_currency_dp, get_currency_radix, \\\n    get_currency_digit_grouping, get_dst, get_locales, parse_date, python2display, \\\n    add_minutes, add_days, subtract_days, subtract_months, first_of_month, last_of_month, \\\n    monday_of_week, sunday_of_week, first_of_year, last_of_year, now, format_currency\n\nfrom asm3.sitedefs import AUTORELOAD, BASE_URL, CONTENT_SECURITY_POLICY, DEPLOYMENT_TYPE, \\\n    ELECTRONIC_SIGNATURES, EMERGENCY_NOTICE, \\\n    AKC_REUNITE_BASE_URL, HOMEAGAIN_BASE_URL, LARGE_FILES_CHUNKED, LOCALE, JQUERY_UI_CSS, \\\n    LEAFLET_CSS, LEAFLET_JS, MULTIPLE_DATABASES, \\\n    ADMIN_EMAIL, EMAIL_ERRORS, MADDIES_FUND_TOKEN_URL, HTMLFTP_PUBLISHER_ENABLED, \\\n    MANUAL_HTML_URL, MANUAL_PDF_URL, MANUAL_FAQ_URL, MANUAL_VIDEO_URL, MAP_LINK, MAP_PROVIDER, \\\n    MAP_PROVIDER_KEY, OSM_MAP_TILES, FOUNDANIMALS_FTP_USER, PETCADEMY_FTP_HOST, \\\n    PETLINK_BASE_URL, PETRESCUE_URL, PETSLOCATED_FTP_USER, QR_IMG_SRC, \\\n    RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, \\\n    SAVOURLIFE_URL,SERVICE_URL, SESSION_SECURE_COOKIE, SESSION_DEBUG, SHARE_BUTTON, SMARTTAG_FTP_USER, \\\n    SMCOM_LOGIN_URL, SMCOM_PAYMENT_LINK, PAYPAL_VALIDATE_IPN_URL\n\nCACHE_ONE_HOUR = 3600\nCACHE_ONE_DAY = 86400\nCACHE_ONE_WEEK = 604800\nCACHE_ONE_MONTH = 2592000\nCACHE_ONE_YEAR = 31536000 \n\ndef session_manager():\n    \"\"\"\n    Sort out our session manager. We use a global in the utils module\n    to hold the session to make sure if the app/code.py is reloaded it\n    always gets the same session manager.\n    \"\"\"\n    class MemCacheStore(web.session.Store):\n        \"\"\" \n        A session manager that uses either an in-memory dictionary or memcache\n        (if available).\n        \"\"\"\n        def __contains__(self, key):\n            rv = asm3.cachemem.get(key) is not None\n            if SESSION_DEBUG: asm3.al.debug(\"contains(%s)=%s\" % (key, rv), \"MemCacheStore.__contains__\")\n            return rv\n        def __getitem__(self, key):\n            rv = asm3.cachemem.get(key)\n            if SESSION_DEBUG: asm3.al.debug(\"getitem(%s)=%s\" % (key, rv), \"MemCacheStore.__getitem__\")\n            return rv\n        def __setitem__(self, key, value):\n            rv = asm3.cachemem.put(key, value, web.config.session_parameters[\"timeout\"])\n            if SESSION_DEBUG: asm3.al.debug(\"setitem(%s, %s)=%s\" % (key, value, rv), \"MemCacheStore.__setitem__\")\n            return rv\n        def __delitem__(self, key):\n            rv = asm3.cachemem.delete(key)\n            if SESSION_DEBUG: asm3.al.debug(\"delitem(%s)=%s\" % (key, rv), \"MemCacheStore.__delitem__\")\n            return rv\n        def cleanup(self, timeout):\n            pass # Not needed, we assign values to memcache with timeout\n    # Set session parameters, 24 hour timeout\n    web.config.session_parameters[\"cookie_name\"] = \"asm_session_id\"\n    web.config.session_parameters[\"cookie_path\"] = \"/\"\n    web.config.session_parameters[\"timeout\"] = 86400\n    web.config.session_parameters[\"ignore_change_ip\"] = True\n    web.config.session_parameters[\"ignore_expiry\"] = True # session disappears on timeout set above \n    web.config.session_parameters[\"secure\"] = SESSION_SECURE_COOKIE\n    sess = None\n    if asm3.utils.websession is None:\n        sess = web.session.Session(app, MemCacheStore(), initializer={\"user\" : None, \"dbo\" : None, \"locale\" : None, \n            \"searches\" : [], \"siteid\": None, \"locationfilter\": None, \"staffid\": None, \"visibleanimalids\": \"\" })\n        asm3.utils.websession = sess\n    else:\n        sess = asm3.utils.websession\n    return sess\n\ndef asm_404():\n    \"\"\"\n    Custom 404 page\n    \"\"\"\n    s = \"\"\"<!DOCTYPE html>\n        <html>\n        <head>\n        <title>404</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n        <link rel=\"shortcut icon\" href=\"static/images/logo/icon-16.png\">\n        <link rel=\"icon\" href=\"static/images/logo/icon-32.png\" sizes=\"32x32\">\n        <link rel=\"icon\" href=\"static/images/logo/icon-48.png\" sizes=\"48x48\">\n        <link rel=\"icon\" href=\"static/images/logo/icon-128.png\" sizes=\"128x128\">\n        </head>\n        <body style=\"background-color: #999\">\n        <div style=\"position: absolute; left: 20%; width: 60%; padding: 20px; background-color: white\">\n\n        <img src=\"static/images/logo/icon-64.png\" align=\"right\" />\n        <h2>Error 404</h2>\n\n        <p>Sorry, but the record or resource you tried to access was not found.</p>\n\n        <p><a href=\"javascript:history.back()\">Go Back</a></p>\n\n        </div>\n        </body>\n        </html>\n    \"\"\"\n    web.header(\"Content-Type\", \"text/html\")\n    web.header(\"Cache-Control\", \"public, max-age=3600, s-maxage=3600\") # Cache 404s for an hour at any proxy/CDN as they can be a DoS vector\n    session.no_cookie = True\n    return web.notfound(s)\n\ndef asm_500_email():\n    \"\"\"\n    Custom 500 error page that sends emails to the site admin\n    \"\"\"\n    asm3.utils.send_error_email()\n    s = \"\"\"\n        <html>\n        <head>\n        <title>500</title>\n        <meta http-equiv=\"refresh\" content=\"5;url=main\">\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n        <link rel=\"shortcut icon\" href=\"static/images/logo/icon-16.png\">\n        <link rel=\"icon\" href=\"static/images/logo/icon-32.png\" sizes=\"32x32\">\n        <link rel=\"icon\" href=\"static/images/logo/icon-48.png\" sizes=\"48x48\">\n        <link rel=\"icon\" href=\"static/images/logo/icon-128.png\" sizes=\"128x128\">\n        </head>\n        <body style=\"background-color: #999\">\n        <div style=\"position: absolute; left: 20%; width: 60%; padding: 20px; background-color: white\">\n\n        <img src=\"static/images/logo/icon-64.png\" align=\"right\" />\n        <h2>Error 500</h2>\n\n        <p>An error occurred trying to process your request.</p>\n\n        <p>The system administrator has been notified to fix the problem.</p>\n\n        <p>Sometimes, a database update needs to have been run, or you \n        need to update your browser's local version of the application. \n        Please return to the <a href=\"main\">home page</a> to run and\n        receive any updates.</p>\n\n        </div>\n        </body>\n        </html>\n    \"\"\"\n    web.header(\"Content-Type\", \"text/html\")\n    web.header(\"Cache-Control\", \"no-cache, no-store, must-revalidate, max-age=0\") # Never cache 500 errors\n    return web.internalerror(s)\n\ndef emergency_notice():\n    \"\"\"\n    Returns emergency notice text if any is set.\n    \"\"\"\n    if EMERGENCY_NOTICE != \"\":\n        if os.path.exists(EMERGENCY_NOTICE):\n            s = asm3.utils.read_text_file(EMERGENCY_NOTICE)\n            return s\n    return \"\"\n\ndef generate_routes():\n    \"\"\" Extract the url property from all classes and construct the route list \"\"\"\n    g = globals().copy()\n    for name, obj in g.items():\n        try:\n            url = getattr(obj, \"url\")\n            if url != \"\" and name != \"web\":\n                if not url.startswith(\"/\"): url = \"/%s\" % url\n                routes.append(url)\n                routes.append(name)\n        except:\n            pass # Ignore objects that don't have url attributes\n    return routes\n\nclass ASMEndpoint(object):\n    \"\"\" Base class for ASM endpoints \"\"\"\n    url = \"\"               # The route/url to this target\n    get_permissions = ( )  # List of permissions needed to GET\n    post_permissions = ( ) # List of permissions needed to POST\n    check_logged_in = True # Check whether we have a valid login\n    session_cookie = True  # Whether to send a session cookie\n    user_activity = True   # Hitting this endpoint qualifies as user activity\n    use_web_input = True   # Unpack values with webpy's web.input()\n    login_url = \"login\"    # The url to go to if not logged in\n    data = None            # Request data posted to this endpoint as bytes or str if data_encoding is set\n    data_encoding = None   # codec to use for decoding of posted data to str (None to not decode)\n\n    def _params(self):\n        l = session.locale\n        if l is None:\n            l = LOCALE\n        post = asm3.utils.PostedData({}, l)\n        try:\n            if self.use_web_input: post = asm3.utils.PostedData(web.input(filechooser = {}), l)\n            self.data = web.data()\n            if self.data_encoding: self.data = asm3.utils.bytes2str(self.data, encoding=self.data_encoding)\n        except Exception as err:\n            asm3.al.error(\"Failed unpacking params: %s\" % str(err), \"ASMEndpoint._params\", session.dbo, sys.exc_info())\n        return web.utils.storage( data=self.data, post=post, dbo=session.dbo, locale=l, user=session.user, session=session, \\\n            siteid = session.siteid, locationfilter = session.locationfilter, staffid = session.staffid,\n            visibleanimalids = session.visibleanimalids )\n\n    def check(self, permissions):\n        \"\"\" Check logged in and permissions (which can be a single permission string or a list/tuple) \"\"\"\n        if not self.session_cookie:\n            session.no_cookie = True # Stop the session object calling setcookie\n        if self.check_logged_in:\n            self.check_loggedin(session, web, self.login_url)\n        if isinstance(permissions, str):\n            asm3.users.check_permission(session, permissions)\n        else:\n            for p in permissions:\n                asm3.users.check_permission(session, p)\n\n    def checkb(self, permissions):\n        \"\"\" Check logged in and a single permission, returning a boolean \"\"\"\n        if self.check_logged_in:\n            self.check_loggedin(session, web, self.login_url)\n        return asm3.users.check_permission_bool(session, permissions)\n\n    def check_animal(self, a):\n        \"\"\" Checks whether the animal we're about to look at is viewable by the user \"\"\"\n        if not asm3.animal.is_animal_in_location_filter(a, session.locationfilter, session.siteid, session.visibleanimalids):\n            raise asm3.utils.ASMPermissionError(\"animal not in location filter/site\")\n\n    def check_locked_db(self):\n        if session.dbo and session.dbo.locked: \n            l = session.locale\n            raise asm3.utils.ASMPermissionError(_(\"This database is locked.\", l))\n\n    def check_loggedin(self, session, web, loginpage = \"login\"):\n        \"\"\"\n        Checks if we have a logged in user and if not, redirects to\n        the login page\n        \"\"\"\n        if not self.is_loggedin(session):\n            path = web.ctx.path\n            if path.startswith(\"/\"): path = path[1:]\n            query = str(web.ctx.query)\n            raise web.seeother(\"%s/%s?target=%s%s\" % (BASE_URL, loginpage, path, query))\n        elif self.user_activity:\n            # update the last user activity if logged in\n            asm3.users.update_user_activity(session.dbo, session.user)\n\n    def content(self, o):\n        \"\"\" Virtual function: override to get the content \"\"\"\n        return \"\"\n\n    def cache_control(self, client_ttl = 0, cache_ttl = 0):\n        \"\"\" Sends a cache control header.\n        client_ttl: The max-age to send for the client\n        cache_ttl:  The s-maxage to send for an edge cache\n        \"\"\"\n        if client_ttl == 0 and cache_ttl == 0:\n            self.header(\"Cache-Control\", \"no-cache, no-store, must-revalidate, max-age=0\")\n        elif client_ttl > 0 and cache_ttl == 0:\n            self.header(\"Cache-Control\", \"public, max-age=%s\" % client_ttl)\n        else:\n            self.header(\"Cache-Control\", \"public, max-age=%s, s-maxage=%s\" % (client_ttl, cache_ttl))\n\n    def content_type(self, ct):\n        \"\"\" Sends a content-type header \"\"\"\n        self.header(\"Content-Type\", ct)\n\n    def data_param(self, p):\n        \"\"\" Returns a URL encoded parameter from the data stream.\n            This is useful for some services where they send data in\n            odd encodings (eg: PayPal use cp1252) and we can't use \n            web.input, which assumes utf-8 \"\"\"\n        for b in self.data.split(\"&\"):\n            if b.startswith(p):\n                return b.split(\"=\")[1]\n        return \"\"\n\n    def get_cookie(self, s):\n        \"\"\" Returns the value of cookie s. Returns None if it does not exist. \"\"\"\n        try:\n            return web.cookies().get(s)\n        except:\n            return None\n\n    def set_cookie(self, name, value, ttl):\n        \"\"\" Sets a cookie value \"\"\"\n        web.setcookie(name, value, expires=ttl, secure=SESSION_SECURE_COOKIE, httponly=True)\n\n    def header(self, key, value):\n        \"\"\" Set the response header key to value \"\"\"\n        web.header(key, value)\n\n    def is_loggedin(self, session):\n        \"\"\"\n        Returns true if the user is logged in\n        \"\"\"\n        return \"user\" in session and session.user is not None\n\n    def notfound(self):\n        \"\"\" Returns a 404 \"\"\"\n        raise web.notfound()\n\n    def post_all(self, o):\n        \"\"\" Virtual function: override to handle postback \"\"\"\n        return \"\"\n\n    def query(self):\n        \"\"\" Returns the request query string \"\"\"\n        return web.ctx.query\n\n    def redirect(self, route):\n        \"\"\" Redirect to another route \n            Uses BASE_URL if a relative route is given to help CDNs. \"\"\"\n        if not route.startswith(\"http\"): route = \"%s/%s\" % (BASE_URL, route)\n        raise web.seeother(route)\n\n    def referer(self):\n        \"\"\" Returns the referer request header \"\"\"\n        return web.ctx.env.get(\"HTTP_REFERER\", \"\")\n\n    def reload_config(self):\n        \"\"\" Reloads items in the session based on database values, invalidates config.js so client reloads it \"\"\"\n        asm3.users.update_session(session)\n\n    def remote_ip(self):\n        \"\"\" Gets the IP address of the requester, taking account of reverse proxies \"\"\"\n        remoteip = web.ctx['ip']\n        if \"HTTP_X_FORWARDED_FOR\" in web.ctx.env:\n            xf = web.ctx.env[\"HTTP_X_FORWARDED_FOR\"]\n            if xf is not None and str(xf).strip() != \"\":\n                remoteip = xf\n        return remoteip\n\n    def user_agent(self):\n        \"\"\" Returns the user agent request header \"\"\"\n        return web.ctx.env.get(\"HTTP_USER_AGENT\", \"\")\n\n    def GET(self):\n        self.check(self.get_permissions)\n        return self.content(self._params())\n\n    def POST(self):\n        \"\"\" Handle a POST, deal with permissions and locked databases \"\"\"\n        if self.check_logged_in:\n            self.check_locked_db()\n        self.check(self.post_permissions)\n        o = self._params()\n        mode = o.post[\"mode\"]\n        if mode == \"\": \n            return self.post_all(o)\n        else:\n            # Mode has been supplied, call post_mode\n            return getattr(self.__class__, \"post_%s\" % mode)(self, o)\n\nclass GeneratorEndpoint(ASMEndpoint):\n    \"\"\"Base class for endpoints that use generators for their content \"\"\"\n    def GET(self):\n        self.check(self.get_permissions)\n        if LARGE_FILES_CHUNKED: \n            self.header(\"Transfer-Encoding\", \"chunked\")\n        for x in self.content(self._params()):\n            yield x\n\nclass JSONEndpoint(ASMEndpoint):\n    \"\"\" Base class for ASM endpoints that return JSON \"\"\"\n    js_module = \"\"         # The javascript module to start (can be omitted if same as url)\n    url = \"\"               # The route/url to this target\n\n    def controller(self, o):\n        \"\"\" Virtual function to be overridden - return controller as a dict \"\"\"\n        return {}\n\n    def GET(self):\n        \"\"\" Handle a GET, deal with permissions, session and JSON responses \"\"\"\n        self.check(self.get_permissions)\n        o = self._params()\n        c = self.controller(o)\n        self.cache_control(0)\n        if self.js_module == \"\":\n            self.js_module = self.url\n        if not o.post[\"json\"] == \"true\":\n            self.content_type(\"text/html\")\n            self.header(\"X-Frame-Options\", \"SAMEORIGIN\") \n            self.header(\"X-Content-Type-Options\", \"nosniff\") \n            self.header(\"X-XSS-Protection\", \"1; mode=block\") \n            self.header(\"Referrer-Policy\", \"same-origin\") \n            self.header(\"Strict-Transport-Security\", \"max-age=%s\" % CACHE_ONE_MONTH) \n            nonce = asm3.utils.uuid_str()\n            # CSP is not applied to users of the mobile app as we still have users with\n            # older iPads on iOS/Safari 9 that only supports CSP1\n            if CONTENT_SECURITY_POLICY != \"\" and not o.session.mobileapp:\n                self.header(\"Content-Security-Policy\", CONTENT_SECURITY_POLICY % { \"nonce\": nonce })\n            return \"%(header)s\\n\" \\\n                \"<script nonce='%(nonce)s'>\\n\" \\\n                \"controller=%(controller)s;\\n\" \\\n                \"$(document).ready(function() { \" \\\n                \"common.route_listen(); \" \\\n                \"common.module_start(\\\"%(js_module)s\\\"); \" \\\n                \"%(js_injection)s \" \\\n                \"});\\n</script>\\n</body>\\n</html>\" % { \n                    \"controller\": asm3.utils.json(c),\n                    \"header\": asm3.html.header(\"\", session),\n                    \"js_injection\": asm3.configuration.js_injection(o.dbo),\n                    \"js_module\": self.js_module, \n                    \"nonce\": nonce }\n        else:\n            self.content_type(\"application/json\")\n            return asm3.utils.json(c)\n\nclass index(ASMEndpoint):\n    url = \"/\"\n    check_logged_in = False\n\n    def content(self, o):\n        # If there's no database structure, create it before \n        # redirecting to the login page.\n        if not MULTIPLE_DATABASES:\n            dbo = asm3.db.get_database()\n            if not dbo.has_structure():\n                self.redirect(\"database\")\n        self.redirect(\"main\")\n\nclass database(ASMEndpoint):\n    url = \"database\"\n    check_logged_in = False\n\n    def content(self, o):\n        if MULTIPLE_DATABASES:\n            if asm3.smcom.active():\n                raise asm3.utils.ASMPermissionError(\"N/A for sm.com\")\n            else:\n                # We can't create the database as we have multiple, so\n                # output the SQL creation script with default data\n                # for whatever our dbtype is instead\n                dbo = asm3.db.get_dbo()\n                s = \"-- Creation script for %s\\n\\n\" % dbo.dbtype\n                s += asm3.dbupdate.sql_structure(dbo)\n                s += asm3.dbupdate.sql_default_data(dbo).replace(\"|=\", \";\")\n                self.content_type(\"text/plain\")\n                self.header(\"Content-Disposition\", \"attachment; filename=\\\"setup.sql\\\"\")\n                return s\n\n        dbo = asm3.db.get_database()\n        if dbo.has_structure():\n            raise asm3.utils.ASMPermissionError(\"Database already created\")\n\n        s = asm3.html.bare_header(\"Create your database\")\n        s += \"\"\"\n            <h2>Create your new ASM database</h2>\n            <form id=\"cdbf\" method=\"post\" action=\"database\">\n            <p>Please select your locale: \n            <select name=\"locale\" class=\"asm-selectbox\">\n            %s\n            </select>\n            </p>\n            <button id=\"createdb\">Create Database</button>\n            <div id=\"info\" class=\"ui-state-highlight ui-corner-all\" style=\"margin-top: 20px; padding: 0 .7em; display: none\">\n            <p><span class=\"ui-icon ui-icon-info\" style=\"float: left; margin-right: .3em;\"></span>\n            Please be patient, this can take upto a few minutes.\n            </p>\n            </div>\n            </form>\n            <script type=\"text/javascript\">\n            $(\"select\").val(\"%s\");\n            $(\"#createdb\").button().click(function() {\n                $(\"#createdb\").button(\"disable\");\n                $(\"#info\").fadeIn();\n                $(\"#cdbf\").submit();\n            });\n            </script>\n            \"\"\" % (asm3.html.options_locales(), LOCALE)\n        s += asm3.html.footer()\n        self.content_type(\"text/html\")\n        return s\n\n    def post_all(self, o):\n        dbo = asm3.db.get_database()\n        dbo.locale = o.post[\"locale\"]\n        dbo.installpath = PATH\n        asm3.dbupdate.install(dbo)\n        self.redirect(\"login\")\n\nclass faviconico(ASMEndpoint):\n    url = \"favicon.ico\"\n    session_cookie = False\n    check_logged_in = False\n\n    def content(self, o):\n        self.cache_control(CACHE_ONE_HOUR, CACHE_ONE_HOUR)\n        self.redirect(\"static/images/logo/icon-16.png\")\n\nclass image(ASMEndpoint):\n    url = \"image\"\n    user_activity = False\n    session_cookie = False # Disable sending the cookie with the response to assist with caching\n\n    def content(self, o):\n        try:\n            # Use a read through disk cache for thumbnails.\n            # This saves on database calls and thumbnail scaling for busier sites.\n            # We only cache if a date parameter is specified so that changing the date can invalidate the cache.\n            cache_indicator = \"\"\n            if o.post[\"date\"] != \"\" and o.post[\"mode\"].endswith(\"thumb\"):\n                cache_key = \"%s:id=%s:seq=%s:date=%s\" % ( o.post[\"mode\"], o.post[\"id\"], o.post.integer(\"seq\"), o.post[\"date\"])\n                cache_path = o.dbo.database\n                imagedata = asm3.cachedisk.get(cache_key, cache_path)\n                cache_indicator = asm3.utils.iif(imagedata is None, \"\", \" from cache\")\n                if imagedata is None:\n                    lastmod, imagedata = asm3.media.get_image_file_data(o.dbo, o.post[\"mode\"], o.post[\"id\"], o.post.integer(\"seq\"), False)\n                    if len(imagedata) > 50: # Never cache empty/broken thumbnails\n                        asm3.cachedisk.put(cache_key, cache_path, imagedata, CACHE_ONE_WEEK)\n            else:\n                lastmod, imagedata = asm3.media.get_image_file_data(o.dbo, o.post[\"mode\"], o.post[\"id\"], o.post.integer(\"seq\"), False)\n        except Exception as err:\n            # The call to get_image_file_data can produce a lot of errors when people try to access \n            # images via unsubstituted tokens in documents, etc. \n            # Log them instead of throwing an error that will end up in our error box\n            asm3.al.error(str(err), \"code.image\", o.dbo, sys.exc_info())\n            raise asm3.utils.ASMError(\"failure retrieving image\")\n\n        if imagedata != b\"NOPIC\":\n            self.content_type(\"image/jpeg\")\n            if o.post[\"date\"] != \"\":\n                # if we have a date parameter, it can be used to invalidate any cache, so cache on the client for a long time\n                self.cache_control(CACHE_ONE_YEAR)\n            else:\n                # otherwise cache for an hour in CDNs and just for the day locally\n                self.cache_control(CACHE_ONE_DAY, CACHE_ONE_HOUR)\n            asm3.al.debug(\"mode=%s id=%s seq=%s (%s bytes%s)\" % (o.post[\"mode\"], o.post[\"id\"], o.post[\"seq\"], len(imagedata), cache_indicator), \"image.content\", o.dbo)\n            return imagedata\n        else:\n            # If a parameter of nopic=404 is passed, we return a 404 instead of redirecting to nopic\n            if o.post[\"nopic\"] == \"404\": self.notfound()\n            self.redirect(\"image?db=%s&mode=nopic\" % o.dbo.database)\n\nclass configjs(ASMEndpoint):\n    url = \"config.js\"\n    check_logged_in = False\n    user_activity = False\n\n    def content(self, o):\n        # db is the database name and ts is the date/time the config was\n        # last read upto. The ts value (config_ts) is set during login and\n        # updated whenever the user posts to publish_options or options.\n        # Both values are used purely to cache the config in the browser, but\n        # aren't actually used by the controller here.\n        # post = asm3.utils.PostedData(web.input(db = \"\", ts = \"\"), o.locale)\n        if o.user is None:\n            # We aren't logged in and can't do anything, don't cache an empty page\n            self.content_type(\"text/javascript\")\n            self.cache_control(0)\n            return \"\"\n        dbo = o.dbo\n        self.content_type(\"text/javascript\")\n        self.cache_control(CACHE_ONE_YEAR)\n        realname = \"\"\n        emailaddress = \"\"\n        expirydate = \"\"\n        expirydatedisplay = \"\"\n        if asm3.smcom.active():\n            expirydate = asm3.smcom.get_expiry_date(dbo)\n            if expirydate is not None: \n                expirydatedisplay = python2display(o.locale, expirydate)\n                expirydate = expirydate.isoformat()\n        us = asm3.users.get_users(dbo, o.user)\n        if len(us) > 0:\n            emailaddress = asm3.utils.nulltostr(us[0][\"EMAILADDRESS\"])\n            realname = asm3.utils.nulltostr(us[0][\"REALNAME\"])\n        mapprovider = MAP_PROVIDER\n        mapprovidero = asm3.configuration.map_provider_override(dbo)\n        mapproviderkey = MAP_PROVIDER_KEY\n        mapproviderkeyo = asm3.configuration.map_provider_key_override(dbo)\n        if mapprovidero != \"\": mapprovider = mapprovidero\n        if mapproviderkeyo != \"\": mapproviderkey = mapproviderkeyo\n        maplink = MAP_LINK\n        maplinko = asm3.configuration.map_link_override(dbo)\n        if maplinko != \"\": maplinko = maplink\n        osmmaptiles = OSM_MAP_TILES\n        osmmaptileso = asm3.configuration.osm_map_tiles_override(dbo)\n        if osmmaptileso != \"\": osmmaptiles = osmmaptileso\n        c = { \"baseurl\": BASE_URL,\n            \"serviceurl\": SERVICE_URL,\n            \"build\": BUILD,\n            \"locale\": o.locale,\n            \"theme\": o.session.theme,\n            \"user\": o.session.user,\n            \"useremail\": emailaddress,\n            \"userreal\": realname,\n            \"useraccount\": dbo.database,\n            \"useraccountalias\": dbo.alias,\n            \"dateformat\": get_display_date_format(o.locale),\n            \"currencysymbol\": get_currency_symbol(o.locale),\n            \"currencydp\": get_currency_dp(o.locale),\n            \"currencyprefix\": get_currency_prefix(o.locale),\n            \"currencyradix\": get_currency_radix(o.locale),\n            \"currencydigitgrouping\": get_currency_digit_grouping(o.locale),\n            \"securitymap\": o.session.securitymap,\n            \"superuser\": o.session.superuser,\n            \"locationfilter\": o.locationfilter,\n            \"siteid\": o.siteid,\n            \"roles\": o.session.roles,\n            \"roleids\": o.session.roleids,\n            \"manualhtml\": MANUAL_HTML_URL,\n            \"manualpdf\": MANUAL_PDF_URL,\n            \"manualfaq\": MANUAL_FAQ_URL,\n            \"manualvideo\": MANUAL_VIDEO_URL,\n            \"microchipmanufacturers\": asm3.lookups.MICROCHIP_MANUFACTURERS,\n            \"smcom\": asm3.smcom.active(),\n            \"smcomexpiry\": expirydate,\n            \"smcomexpirydisplay\": expirydatedisplay,\n            \"smcompaymentlink\": SMCOM_PAYMENT_LINK.replace(\"{alias}\", dbo.alias).replace(\"{database}\", dbo.database),\n            \"jqueryuicss\": JQUERY_UI_CSS,\n            \"leafletcss\": LEAFLET_CSS,\n            \"leafletjs\": LEAFLET_JS,\n            \"maplink\": maplink,\n            \"mapprovider\": mapprovider,\n            \"mapproviderkey\": mapproviderkey,\n            \"osmmaptiles\": osmmaptiles,\n            \"hascustomlogo\": asm3.dbfs.file_exists(dbo, \"logo.jpg\"),\n            \"mobileapp\": o.session.mobileapp,\n            \"config\": asm3.configuration.get_map(dbo),\n            \"menustructure\": asm3.html.menu_structure(o.locale, \n                asm3.publish.PUBLISHER_LIST,\n                asm3.reports.get_reports_menu(dbo, o.session.roleids, o.session.superuser), \n                asm3.reports.get_mailmerges_menu(dbo, o.session.roleids, o.session.superuser)),\n            \"publishers\": asm3.publish.PUBLISHER_LIST\n        }\n        return \"const asm = %s;\" % asm3.utils.json(c)\n\nclass csperror(ASMEndpoint):\n    \"\"\"\n    Target for logging content security policy errors from the frontend\n    via the CSP directive: report-uri /csperror\n    Nothing is returned as the UI does not expect a response.\n    Errors are logged and emailed to the admin if EMAIL_ERRORS is set.\n    \"\"\"\n    url = \"csperror\"\n    user_activity = False\n\n    def post_all(self, o):\n        asm3.al.error(str(self.data), \"code.csperror\", o.dbo)\n        if EMAIL_ERRORS:\n            asm3.utils.send_email(o.dbo, ADMIN_EMAIL, ADMIN_EMAIL, \"\", \"\", \"CSP violation\", str(self.data), \"plain\", exceptions=False)\n\nclass jserror(ASMEndpoint):\n    \"\"\"\n    Target for logging javascript errors from the frontend.\n    Nothing is returned as the UI does not expect a response.\n    Errors are logged and emailed to the admin if EMAIL_ERRORS is set.\n    \"\"\"\n    url = \"jserror\"\n    user_activity = False\n\n    def post_all(self, o):\n        dbo = o.dbo\n        post = o.post\n        emailsubject = \"%s @ %s\" % (post[\"user\"], post[\"account\"])\n        emailbody = \"%s:\\n\\n%s\\n\\nUA: %s\\nIP: %s\" % (post[\"msg\"], post[\"stack\"], self.user_agent(), self.remote_ip())\n        logmess = \"%s@%s: %s %s\" % (post[\"user\"], post[\"account\"], post[\"msg\"], post[\"stack\"])\n        asm3.al.error(logmess, \"code.jserror\", dbo)\n        if EMAIL_ERRORS:\n            asm3.utils.send_email(dbo, ADMIN_EMAIL, ADMIN_EMAIL, \"\", \"\", emailsubject, emailbody, \"plain\", exceptions=False)\n\nclass media(ASMEndpoint):\n    url = \"media\"\n\n    def content(self, o):\n        lastmod, medianame, mimetype, filedata = asm3.media.get_media_file_data(o.dbo, o.post.integer(\"id\"))\n        self.content_type(mimetype)\n        self.header(\"Content-Disposition\", \"inline; filename=\\\"%s\\\"\" % medianame)\n        self.cache_control(CACHE_ONE_DAY)\n        asm3.al.debug(\"%s %s (%s bytes)\" % (medianame, mimetype, len(filedata)), \"media.content\", o.dbo)\n        return filedata\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_MEDIA)\n        linkid = o.post.integer(\"linkid\")\n        linktypeid = o.post.integer(\"linktypeid\")\n        asm3.media.attach_file_from_form(o.dbo, o.user, linktypeid, linkid, o.post)\n        self.redirect(\"%s?id=%d\" % (o.post[\"controller\"], linkid))\n\n    def post_createdoc(self, o):\n        self.check(asm3.users.ADD_MEDIA)\n        linkid = o.post.integer(\"linkid\")\n        linktypeid = o.post.integer(\"linktypeid\")\n        mediaid = asm3.media.create_blank_document_media(o.dbo, o.user, linktypeid, linkid)\n        self.redirect(\"document_media_edit?id=%d&redirecturl=%s?id=%d\" % (mediaid, o.post[\"controller\"], linkid))\n\n    def post_createlink(self, o):\n        self.check(asm3.users.ADD_MEDIA)\n        linkid = o.post.integer(\"linkid\")\n        linktypeid = o.post.integer(\"linktypeid\")\n        asm3.media.attach_link_from_form(o.dbo, o.user, linktypeid, linkid, o.post)\n        self.redirect(\"%s?id=%d\" % (o.post[\"controller\"], linkid))\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        asm3.media.update_media_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_MEDIA)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.media.delete_media(o.dbo, o.user, mid)\n\n    def post_email(self, o):\n        self.check(asm3.users.EMAIL_PERSON)\n        dbo = o.dbo\n        post = o.post\n        emailadd = post[\"to\"]\n        attachments = []\n        subject = [ post[\"subject\"] ]\n        linktypeid = 0\n        linkid = 0\n        for mid in post.integer_list(\"ids\"):\n            m = asm3.media.get_media_by_id(dbo, mid)\n            filename = asm3.media._get_media_filename(m)\n            if m is None: self.notfound()\n            linktypeid = m.LINKTYPEID\n            linkid = m.LINKID\n            content = asm3.dbfs.get_string(dbo, m.MEDIANAME)\n            if m.MEDIAMIMETYPE == \"text/html\":\n                content = asm3.utils.bytes2str(content)\n                content = asm3.utils.fix_relative_document_uris(dbo, content)\n                content = asm3.utils.str2bytes(content)\n            attachments.append(( filename, m.MEDIAMIMETYPE, content ))\n            subject.append(filename)\n        asm3.utils.send_email(dbo, post[\"from\"], emailadd, post[\"cc\"], post[\"bcc\"], post[\"subject\"], post[\"body\"], \"html\", attachments)\n        if asm3.configuration.audit_on_send_email(dbo): \n            asm3.audit.email(dbo, o.user, post[\"from\"], emailadd, post[\"cc\"], post[\"bcc\"], post[\"subject\"], post[\"body\"])\n        if post.boolean(\"addtolog\"):\n            asm3.log.add_log_email(dbo, o.user, asm3.media.get_log_from_media_type(linktypeid), linkid, post.integer(\"logtype\"), \n                emailadd, \", \".join(subject), post[\"body\"])\n        return emailadd\n\n    def post_emailpdf(self, o):\n        self.check(asm3.users.EMAIL_PERSON)\n        dbo = o.dbo\n        post = o.post\n        emailadd = post[\"to\"]\n        attachments = []\n        subject = [ post[\"subject\"] ]\n        linktypeid = 0\n        linkid = 0\n        for mid in post.integer_list(\"ids\"):\n            m = asm3.media.get_media_by_id(dbo, mid)\n            if m is None: self.notfound()\n            if m.MEDIAMIMETYPE != \"text/html\": continue\n            linktypeid = m.LINKTYPEID\n            linkid = m.LINKID\n            content = asm3.utils.bytes2str(asm3.dbfs.get_string(dbo, m.MEDIANAME))\n            contentpdf = asm3.utils.html_to_pdf(dbo, content)\n            filename = asm3.media._get_media_filename(m).replace(\".html\", \".pdf\")\n            attachments.append(( filename, \"application/pdf\", contentpdf ))\n            subject.append(filename)\n        asm3.utils.send_email(dbo, post[\"from\"], emailadd, post[\"cc\"], post[\"bcc\"], post[\"subject\"], post[\"body\"], \"html\", attachments)\n        if asm3.configuration.audit_on_send_email(dbo): \n            asm3.audit.email(dbo, o.user, post[\"from\"], emailadd, post[\"cc\"], post[\"bcc\"], post[\"subject\"], post[\"body\"])\n        if post.boolean(\"addtolog\"):\n            asm3.log.add_log_email(dbo, o.user, asm3.media.get_log_from_media_type(linktypeid), linkid, post.integer(\"logtype\"), \n                emailadd, \", \".join(subject), post[\"body\"])\n        return emailadd\n\n    def post_emailsign(self, o):\n        self.check(asm3.users.EMAIL_PERSON)\n        dbo = o.dbo\n        post = o.post\n        l = o.locale\n        emailadd = post[\"to\"]\n        body = post[\"body\"]\n        for mid in post.integer_list(\"ids\"):\n            m = asm3.media.get_media_by_id(dbo, mid)\n            if m is None: raise web.notfound()\n            if m.MEDIAMIMETYPE != \"text/html\": continue\n            token = asm3.utils.md5_hash_hex(\"%s%s\" % (m.ID, m.LINKID))\n            url = \"%s?account=%s&method=sign_document&email=%s&formid=%d&token=%s\" % (SERVICE_URL, dbo.database, asm3.utils.strip_email_address(emailadd).replace(\"@\", \"%40\"), mid, token)\n            body = asm3.utils.replace_url_token(body, url, m.MEDIANOTES)\n            if post.boolean(\"addtolog\"):\n                asm3.log.add_log_email(dbo, o.user, asm3.media.get_log_from_media_type(m.LINKTYPEID), m.LINKID, post.integer(\"logtype\"), \n                    emailadd, _(\"Document signing request\", l), body)\n            asm3.media.create_log(dbo, o.user, mid, \"ES01\", _(\"Document signing request\", l))\n            asm3.utils.send_email(dbo, post[\"from\"], emailadd, post[\"cc\"], post[\"bcc\"], post[\"subject\"], body, \"html\")\n            if asm3.configuration.audit_on_send_email(dbo): \n                asm3.audit.email(dbo, o.user, post[\"from\"], emailadd, post[\"cc\"], post[\"bcc\"], post[\"subject\"], body)\n        return emailadd\n\n    def post_jpg2pdf(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.media.convert_media_jpg2pdf(o.dbo, o.user, mid)\n\n    def post_moveanimal(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.media.update_media_link(o.dbo, o.user, mid, asm3.media.ANIMAL, o.post.integer(\"animalid\"))\n\n    def post_moveperson(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.media.update_media_link(o.dbo, o.user, mid, asm3.media.PERSON, o.post.integer(\"personid\"))\n\n    def post_sign(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.media.sign_document(o.dbo, o.user, mid, o.post[\"sig\"], o.post[\"signdate\"], \"signscreen\")\n\n    def post_signpad(self, o):\n        asm3.configuration.signpad_ids(o.dbo, o.user, o.post[\"ids\"])\n\n    def post_rotateclock(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.media.rotate_media(o.dbo, o.user, mid, True)\n\n    def post_rotateanti(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.media.rotate_media(o.dbo, o.user, mid, False)\n\n    def post_watermark(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.media.watermark_media(o.dbo, o.user, mid)\n\n    def post_web(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        mid = o.post.integer_list(\"ids\")[0]\n        asm3.media.set_web_preferred(o.dbo, o.user, mid)\n\n    def post_video(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        mid = o.post.integer_list(\"ids\")[0]\n        asm3.media.set_video_preferred(o.dbo, o.user, mid)\n\n    def post_doc(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        mid = o.post.integer_list(\"ids\")[0]\n        asm3.media.set_doc_preferred(o.dbo, o.user, mid)\n\n    def post_include(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.media.set_excluded(o.dbo, o.user, mid, 0)\n\n    def post_exclude(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.media.set_excluded(o.dbo, o.user, mid, 1)\n\nclass media_pdfjs(ASMEndpoint):\n    url = \"media_pdfjs\"\n\n    def content(self, o):\n        self.redirect(f'static/lib/pdfjs/2.12.313/web/viewer.html?file=/media%3Fid={o.post[\"id\"]}')\n\nclass mobile(ASMEndpoint):\n    url = \"mobile\"\n    login_url = \"mobile_login\"\n\n    def content(self, o):\n        self.content_type(\"text/html\")\n        return asm3.mobile.page(o.dbo, o.session, o.user)\n\nclass mobile2(ASMEndpoint):\n    url = \"mobile2\"\n    login_url = \"mobile_login\"\n\n    def content(self, o):\n        dbo = o.dbo\n        animals = asm3.animal.get_shelterview_animals(dbo, o.locationfilter, o.siteid, o.visibleanimalids)\n        asm3.al.debug(\"mobile2 for '%s' (%s animals)\" % (o.user, len(animals)), \"code.mobile2\", dbo)\n        c = {\n            \"animals\":      animals,\n            \"reports\":      asm3.reports.get_available_reports(dbo),\n            \"vaccinations\": asm3.medical.get_vaccinations_outstanding(dbo),\n            \"tests\":        asm3.medical.get_tests_outstanding(dbo),\n            \"medicals\":     asm3.medical.get_treatments_outstanding(dbo),\n            \"diaries\":      asm3.diary.get_uncompleted_upto_today(dbo, o.user),\n            \"rsvhomecheck\": asm3.person.get_reserves_without_homechecks(dbo),\n            \"messages\":     asm3.lookups.get_messages(dbo, session.user, session.roles, session.superuser),\n            \"testresults\":  asm3.lookups.get_test_results(dbo),\n            \"stocklocations\": asm3.stock.get_stock_locations_totals(dbo),\n            \"incidentsmy\":  asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { \"dispatchedaco\": session.user, \"filter\": \"incomplete\" }, o.user),\n            \"incidentsundispatched\": asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { \"dispatchedaco\": session.user, \"filter\": \"undispatched\" }, o.user),\n            \"incidentsincomplete\": asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { \"filter\": \"incomplete\" }, o.user),\n            \"incidentsfollowup\": asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { \"filter\": \"requirefollowup\" }, o.user),\n            \"animaltypes\":  asm3.lookups.get_animal_types(dbo),\n            \"breeds\":       asm3.lookups.get_breeds_by_species(dbo),\n            \"colours\":      asm3.lookups.get_basecolours(dbo),\n            \"internallocations\": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),\n            \"sexes\":        asm3.lookups.get_sexes(dbo),\n            \"sizes\":        asm3.lookups.get_sizes(dbo),\n            \"smdblocked\":   asm3.configuration.smdb_locked(dbo),\n            \"species\":      asm3.lookups.get_species(dbo),\n            \"user\":         o.user\n        }\n        self.content_type(\"text/html\")\n        return asm3.html.mobile_page(o.locale, \"\", [ \"common.js\", \"common_html.js\", \"mobile2.js\" ], c)\n\n    def post_addanimal(self, o):\n        self.check(asm3.users.ADD_ANIMAL)\n        pass # TODO\n\n    def post_medical(self, o):\n        self.check(asm3.users.CHANGE_MEDICAL)\n        #asm3.medical.update_treatment_today(o.dbo, o.user, o.post.integer(\"id\"))\n\n    def post_test(self, o):\n        self.check(asm3.users.CHANGE_TEST)\n        #asm3.medical.update_test_today(o.dbo, o.user, post.integer(\"id\"))\n\n    def post_vaccinate(self, o):\n        self.check(asm3.users.CHANGE_VACCINATION)\n        #asm3.medical.update_vaccination_today(o.dbo, o.user, o.post.integer(\"id\"))\n\n\nclass mobile_login(ASMEndpoint):\n    url = \"mobile_login\"\n    check_logged_in = False\n\n    def content(self, o):\n        l = o.locale\n        if not MULTIPLE_DATABASES:\n            dbo = asm3.db.get_database()\n            o.locale = asm3.configuration.locale(dbo)\n        # Do we have a remember me token?\n        rmtoken = self.get_cookie(\"asm_remember_me\")\n        if rmtoken:\n            cred = asm3.cachemem.get(rmtoken)\n            if cred and cred.find(\"|\") != -1:\n                database, username, password = cred.split(\"|\")\n                rpost = asm3.utils.PostedData({ \"database\": database, \"username\": username, \"password\": password }, LOCALE)\n                asm3.al.info(\"attempting auth with remember me token for %s/%s\" % (database, username), \"code.login\")\n                user = asm3.users.web_login(rpost, session, self.remote_ip(), self.user_agent(), PATH)\n                if user not in ( \"FAIL\", \"DISABLED\", \"WRONGSERVER\" ):\n                    self.redirect(\"mobile\")\n                    return\n        self.content_type(\"text/html\")\n        c = {\n            \"smcom\": asm3.smcom.active(),\n            \"smcomloginurl\": SMCOM_LOGIN_URL,\n            \"multipledatabases\": MULTIPLE_DATABASES,\n            \"target\": o.post[\"target\"],\n            \"smaccount\": o.post[\"smaccount\"],\n            \"username\": o.post[\"username\"],\n            \"password\": o.post[\"password\"]\n        }\n        return asm3.html.mobile_page(l, _(\"Login\"), [ \"mobile_login.js\" ], c)\n\nclass mobile_logout(ASMEndpoint):\n    url = \"mobile_logout\"\n    check_logged_in = False\n\n    def content(self, o):\n        url = \"mobile_login\"\n        if o.post[\"smaccount\"] != \"\":\n            url = \"mobile_login?smaccount=\" + o.post[\"smaccount\"]\n        elif MULTIPLE_DATABASES and o.dbo is not None and o.dbo.alias is not None:\n            url = \"mobile_login?smaccount=\" + o.dbo.alias\n        asm3.users.update_user_activity(o.dbo, o.user, False)\n        asm3.users.logout(o.session, self.remote_ip(), self.user_agent())\n        self.set_cookie(\"asm_remember_me\", \"\", 0) # user explicitly logged out, remove remember me\n        self.redirect(url)\n\nclass mobile_post(ASMEndpoint):\n    url = \"mobile_post\"\n    login_url = \"mobile_login\"\n\n    def handle(self, o):\n        s = asm3.mobile.handler(o.session, o.post)\n        if s is None:\n            raise asm3.utils.ASMValidationError(\"mobile handler failed.\")\n        elif s.startswith(\"GO \"):\n            self.redirect(s[3:])\n        else:\n            self.content_type(\"text/html\")\n            return s\n\n    def content(self, o):\n        return self.handle(o)\n\n    def post_all(self, o):\n        return self.handle(o)\n\nclass mobile_report(ASMEndpoint):\n    url = \"mobile_report\"\n    login_url = \"mobile_login\"\n    get_permissions = asm3.users.VIEW_REPORT\n\n    def content(self, o):\n        dbo = o.dbo\n        post = o.post\n        crid = post.integer(\"id\")\n        # Make sure this user has a role that can view the report\n        asm3.reports.check_view_permission(o.session, crid)\n        crit = asm3.reports.get_criteria(dbo, crid) \n        self.content_type(\"text/html\")\n        self.cache_control(0)\n        # If this report takes criteria and none were supplied, go to the criteria screen instead to get them\n        if len(crit) != 0 and post[\"hascriteria\"] == \"\": self.redirect(\"mobile_report_criteria?id=%s\" % post.integer(\"id\"))\n        title = asm3.reports.get_title(dbo, crid)\n        asm3.al.debug(\"got criteria (%s), executing report %d\" % (str(post.data), crid), \"code.report\", dbo)\n        p = asm3.reports.get_criteria_params(dbo, crid, post)\n        if asm3.configuration.audit_on_view_report(dbo):\n            asm3.audit.view_report(dbo, o.user, title, str(post.data))\n        s = asm3.reports.execute(dbo, crid, o.user, p)\n        return s\n\nclass mobile_report_criteria(ASMEndpoint):\n    url = \"mobile_report_criteria\"\n    get_permissions = asm3.users.VIEW_REPORT\n\n    def content(self, o):\n        dbo = o.dbo\n        crid = o.post.integer(\"id\")\n        crit = asm3.reports.get_criteria(dbo, crid) \n        title = asm3.reports.get_title(dbo, crid)\n        self.content_type(\"text/html\")\n        self.cache_control(0)\n        def has_criteria(c):\n            for name, rtype, question in crit:\n                if rtype == c: return True\n            return False\n        asm3.al.debug(\"building criteria form for report %d %s\" % (crid, title), \"code.mobile_report\", dbo)\n        c = {\n            \"crid\":         crid,\n            \"criteria\":     crit,\n            \"title\":        title,\n            \"user\":         o.user\n        }\n        # Only load lookup items for criteria that need them to save bandwidth\n        if has_criteria(\"ANIMAL\") or has_criteria(\"FSANIMAL\") or has_criteria(\"ALLANIMAL\") or has_criteria(\"ANIMALS\"):\n            c[\"animals\"] = asm3.animal.get_animals_on_shelter_namecode(dbo)\n        if has_criteria(\"ANIMALFLAG\"): c[\"animalflags\"] = asm3.lookups.get_animal_flags(dbo)\n        if has_criteria(\"DONATIONTYPE\") or has_criteria(\"PAYMENTTYPE\"): c[\"donationtypes\"] = asm3.lookups.get_donation_types(dbo)\n        if has_criteria(\"LITTER\"): c[\"litters\"] = asm3.animal.get_active_litters_brief(dbo)\n        if has_criteria(\"LOCATION\"): c[\"locations\"] = asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid)\n        if has_criteria(\"LOGTYPE\"): c[\"logtypes\"] = asm3.lookups.get_log_types(dbo)\n        if has_criteria(\"PAYMENTMETHOD\") or has_criteria(\"PAYMENTTYPE\"): c[\"paymentmethods\"] = asm3.lookups.get_payment_methods(dbo)\n        if has_criteria(\"PERSON\"): c[\"people\"] = asm3.person.get_person_name_addresses(dbo)\n        if has_criteria(\"PERSONFLAG\"): c[\"personflags\"] = asm3.lookups.get_person_flags(dbo)\n        if has_criteria(\"SITE\"): c[\"sites\"] = asm3.lookups.get_sites(dbo)\n        if has_criteria(\"SPECIES\"): c[\"species\"] = asm3.lookups.get_species(dbo)\n        if has_criteria(\"TYPE\"): c[\"types\"] = asm3.lookups.get_animal_types(dbo)\n        self.content_type(\"text/html\")\n        return asm3.html.mobile_page(o.locale, \"\", [ \"common.js\", \"common_html.js\", \"mobile_report.js\" ], c)\n\nclass mobile_sign(ASMEndpoint):\n    url = \"mobile_sign\"\n    login_url = \"/mobile_login\"\n\n    def content(self, o):\n        self.content_type(\"text/html\")\n        ids = asm3.configuration.signpad_ids(o.dbo, o.user)\n        names = []\n        preview = []\n        for mid in ids.strip().split(\",\"):\n            if mid.strip() != \"\": \n                names.append(asm3.media.get_notes_for_id(o.dbo, int(mid)))\n                dummy, dummy, dummy, contents = asm3.media.get_media_file_data(o.dbo, int(mid))\n                preview.append(asm3.utils.bytes2str(contents))\n        l = o.dbo.locale\n        c = {\n            \"ids\": ids,\n            \"count\": len(names),\n            \"names\": \", \".join(names),\n            \"preview\": \"\\n<hr/>\\n\".join(preview),\n            \"mobileapp\": o.session.mobileapp\n        }\n        return asm3.html.mobile_page(l, _(\"Signing Pad\", l), [ \"mobile_sign.js\" ], c)\n\n    def post_all(self, o):\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.media.sign_document(o.dbo, o.user, mid, o.post[\"sig\"], o.post[\"signdate\"], \"signmobile\")\n        asm3.configuration.signpad_ids(o.dbo, o.user, \"\")\n\nclass main(JSONEndpoint):\n    url = \"main\"\n\n    def controller(self, o):\n        l = o.locale\n        dbo = o.dbo\n        # If there's something wrong with the database, logout\n        if not dbo.has_structure():\n            self.redirect(\"logout\")\n        # If a b (build) parameter was passed to indicate the client wants to\n        # get the latest js files, invalidate the config so that the\n        # frontend doesn't keep receiving the same build number via configjs \n        # and get into an endless loop of reloads\n        if o.post[\"b\"] != \"\": self.reload_config()\n        # Database update checks\n        dbmessage = \"\"\n        if asm3.dbupdate.check_for_updates(dbo):\n            newversion = asm3.dbupdate.perform_updates(dbo)\n            if newversion != \"\":\n                dbmessage = _(\"Updated database to version {0}\", l).format(str(newversion))\n        if asm3.dbupdate.check_for_view_seq_changes(dbo):\n            asm3.dbupdate.install_db_views(dbo)\n            asm3.dbupdate.install_db_sequences(dbo)\n            asm3.dbupdate.install_db_stored_procedures(dbo)\n        # Install recommended reports if no reports are currently installed\n        if dbo.query_int(\"SELECT COUNT(ID) FROM customreport\") == 0: asm3.reports.install_recommended_smcom_reports(dbo, o.user)\n        # Update any reports that have newer versions available\n        asm3.reports.update_smcom_reports(dbo, o.user)\n        # News\n        news = asm3.cachedisk.get(\"news\", \"news\")\n        if news is None:\n            news = asm3.utils.get_asm_news(dbo)\n            asm3.cachedisk.put(\"news\", \"news\", news, CACHE_ONE_DAY)\n        # Welcome dialog\n        showwelcome = False\n        if asm3.configuration.show_first_time_screen(dbo) and o.session.superuser == 1:\n            showwelcome = True\n        # Animal links\n        linkmode = asm3.configuration.main_screen_animal_link_mode(dbo)\n        linkmax = asm3.configuration.main_screen_animal_link_max(dbo)\n        animallinks = []\n        linkname = \"\"\n        if linkmode == \"recentlychanged\":\n            linkname = _(\"Recently Changed\", l)\n            animallinks = asm3.animal.get_links_recently_changed(dbo, linkmax, o.locationfilter, o.siteid, o.visibleanimalids)\n        elif linkmode == \"recentlyentered\":\n            linkname = _(\"Recently Entered Shelter\", l)\n            animallinks = asm3.animal.get_links_recently_entered(dbo, linkmax, o.locationfilter, o.siteid, o.visibleanimalids)\n        elif linkmode == \"recentlyadopted\":\n            linkname = _(\"Recently Adopted\", l)\n            animallinks = asm3.animal.get_links_recently_adopted(dbo, linkmax, o.locationfilter, o.siteid, o.visibleanimalids)\n        elif linkmode == \"recentlyfostered\":\n            linkname = _(\"Recently Fostered\", l)\n            animallinks = asm3.animal.get_links_recently_fostered(dbo, linkmax, o.locationfilter, o.siteid, o.visibleanimalids)\n        elif linkmode == \"longestonshelter\":\n            linkname = _(\"Longest On Shelter\", l)\n            animallinks = asm3.animal.get_links_longest_on_shelter(dbo, linkmax, o.locationfilter, o.siteid, o.visibleanimalids)\n        elif linkmode == \"adoptable\":\n            linkname = _(\"Up for adoption\", l)\n            animallinks = asm3.publishers.base.get_animal_data(dbo, limit=linkmax)\n        # Users and roles, active users\n        usersandroles = asm3.users.get_users_and_roles(dbo)\n        activeusers = asm3.users.get_active_users(dbo)\n        # Messages\n        mess = asm3.lookups.get_messages(dbo, o.session.user, o.session.roles, o.session.superuser)\n        # Diary Notes\n        dm = None\n        if asm3.configuration.all_diary_home_page(dbo): \n            dm = asm3.diary.get_uncompleted_upto_today(dbo, \"\", includecreatedby=False, offset=-365)\n        else:\n            dm = asm3.diary.get_uncompleted_upto_today(dbo, o.user, includecreatedby=False, offset=-365)\n        # Use a 2 minute cache, with a longer cache time of 15 minutes for big databases\n        # on the following complex calls for stats, alerts and the timeline\n        age = 120\n        if dbo.is_large_db: age = 900\n        # Alerts\n        alerts = []\n        if asm3.configuration.show_alerts_home_page(dbo):\n            alerts = asm3.animal.get_alerts(dbo, o.locationfilter, o.siteid, o.visibleanimalids, age=age)\n            if len(alerts) > 0: \n                alerts[0][\"LOOKFOR\"] = asm3.cachedisk.get(\"lookingfor_lastmatchcount\", dbo.database)\n                alerts[0][\"LOSTFOUND\"] = asm3.cachedisk.get(\"lostfound_lastmatchcount\", dbo.database)\n        # Stats\n        stats = []\n        if asm3.configuration.show_stats_home_page(dbo) != \"none\":\n            stats = asm3.animal.get_stats(dbo, age=age)\n        # Timeline\n        timeline = []\n        if asm3.configuration.show_timeline_home_page(dbo):\n            timeline = asm3.animal.get_timeline(dbo, 10, age=age)\n        asm3.al.debug(\"main for '%s', %d diary notes, %d messages\" % (o.user, len(dm), len(mess)), \"code.main\", dbo)\n        return {\n            \"showwelcome\": showwelcome,\n            \"build\": BUILD,\n            \"noreload\": o.post[\"b\"] != \"\", \n            \"news\": news,\n            \"dbmessage\": dbmessage,\n            \"version\": get_version(),\n            \"emergencynotice\": emergency_notice(),\n            \"linkname\": linkname,\n            \"activeusers\": activeusers,\n            \"usersandroles\": usersandroles,\n            \"alerts\": alerts,\n            \"recent\": timeline,\n            \"stats\": stats,\n            \"animallinks\": asm3.animal.get_animals_brief(animallinks),\n            \"diary\": dm,\n            \"mess\": mess \n        }\n\n    def post_addmessage(self, o):\n        asm3.lookups.add_message(o.dbo, o.user, o.post.boolean(\"email\"), o.post[\"message\"], o.post[\"forname\"], o.post.integer(\"priority\"), o.post.date(\"expires\"))\n\n    def post_delmessage(self, o):\n        asm3.lookups.delete_message(o.dbo, o.post.integer(\"id\"))\n\n    def post_showfirsttimescreen(self, o):\n        asm3.configuration.show_first_time_screen(o.dbo, True, False)\n\nclass login(ASMEndpoint):\n    url = \"login\"\n    check_logged_in = False\n\n    def content(self, o):\n        l = LOCALE\n        post = o.post\n        has_animals = True\n        custom_splash = False\n\n        # Filter out Internet Explorer altogether.\n        ua = self.user_agent()\n        if ua.find(\"MSIE\") != -1 or ua.find(\"Trident\") != -1:\n            self.redirect(\"static/pages/unsupported_ie.html\")\n\n        # Figure out how to get the default locale and any overridden splash screen\n        # Single database\n        if not MULTIPLE_DATABASES:\n            dbo = asm3.db.get_database()\n            l = asm3.configuration.locale(dbo)\n            has_animals = asm3.animal.get_has_animals(dbo)\n            custom_splash = asm3.dbfs.file_exists(dbo, \"splash.jpg\")\n\n        # Multiple databases, account given\n        elif MULTIPLE_DATABASES and post[\"smaccount\"] != \"\":\n            dbo = asm3.db.get_database(post[\"smaccount\"])\n            if dbo.database == \"WRONGSERVER\":\n                self.redirect(SMCOM_LOGIN_URL)\n            elif dbo.database not in asm3.db.ERROR_VALUES:\n                custom_splash = asm3.dbfs.file_exists(dbo, \"splash.jpg\")\n                l = asm3.configuration.locale(dbo)\n\n        # Fall back to system locale\n        else:\n            l = LOCALE\n\n        # Do we have a remember me token?\n        rmtoken = self.get_cookie(\"asm_remember_me\")\n        if rmtoken:\n            cred = asm3.cachemem.get(rmtoken)\n            if cred and cred.find(\"|\") != -1:\n                database, username, password = cred.split(\"|\")\n                rpost = asm3.utils.PostedData({ \"database\": database, \"username\": username, \"password\": password }, LOCALE)\n                asm3.al.info(\"attempting auth with remember me token for %s/%s\" % (database, username), \"code.login\")\n                user = asm3.users.web_login(rpost, session, self.remote_ip(), self.user_agent(), PATH)\n                if user not in ( \"FAIL\", \"DISABLED\", \"WRONGSERVER\" ):\n                    self.redirect(\"main\")\n                    return\n\n        title = _(\"Animal Shelter Manager Login\", l)\n        s = asm3.html.bare_header(title, locale = l)\n        c = { \"smcom\": asm3.smcom.active(),\n             \"multipledatabases\": MULTIPLE_DATABASES,\n             \"locale\": l,\n             \"hasanimals\": has_animals,\n             \"customsplash\": custom_splash,\n             \"emergencynotice\": emergency_notice(),\n             \"smaccount\": post[\"smaccount\"],\n             \"husername\": post[\"username\"],\n             \"hpassword\": post[\"password\"],\n             \"baseurl\": BASE_URL,\n             \"smcomloginurl\": SMCOM_LOGIN_URL,\n             \"nologconnection\": post[\"nologconnection\"],\n             \"qrimg\": QR_IMG_SRC,\n             \"target\": post[\"target\"]\n        }\n        nonce = asm3.utils.uuid_str()\n        s += '<script nonce=\"%s\">\\ncontroller = %s;\\n' % (nonce, asm3.utils.json(c))\n        s += '$(document).ready(function() { $(\"body\").append(login.render()); login.bind(); });\\n</script>'\n        s += asm3.html.footer()\n        self.content_type(\"text/html\")\n        self.header(\"X-Frame-Options\", \"SAMEORIGIN\")\n        self.header(\"X-Content-Type-Options\", \"nosniff\") \n        self.header(\"X-XSS-Protection\", \"1; mode=block\") \n        self.header(\"Strict-Transport-Security\", \"max-age=%s\" % CACHE_ONE_MONTH) \n        if CONTENT_SECURITY_POLICY != \"\":\n            self.header(\"Content-Security-Policy\", CONTENT_SECURITY_POLICY % { \"nonce\": nonce })\n        return s\n\n    def post_all(self, o):\n        user = asm3.users.web_login(o.post, session, self.remote_ip(), self.user_agent(), PATH)\n        # If there's a pipe in the result, we have a remember me cookie/token to set\n        if user.find(\"|\") != -1:\n            user, token = user.split(\"|\")\n            self.set_cookie(\"asm_remember_me\", token, CACHE_ONE_MONTH)\n        return user\n\n    def post_reset(self, o):\n        dbo = asm3.db.get_database(o.post[\"database\"])\n        if dbo.database in asm3.db.ERROR_VALUES: return \"FAIL\"\n        asm3.al.info(\"password reset request from %s for %s:%s\" % (self.remote_ip(), o.post[\"database\"], o.post[\"username\"]), \"code.login\", dbo)\n        l = dbo.locale\n        # This cannot be used to reset the SM master password\n        if asm3.smcom.active() and o.post[\"username\"].lower() == dbo.database:\n            asm3.al.error(\"failed password reset: master user %s cannot be reset here\" % o.post[\"username\"], \"code.login\", dbo)\n            return \"MASTER\"\n        # Find the user id and email address for the username given\n        userid = dbo.query_int(\"SELECT ID FROM users WHERE LOWER(UserName) LIKE ?\", [o.post[\"username\"].lower()])\n        email = dbo.query_string(\"SELECT EmailAddress FROM users WHERE ID=?\", [userid])\n        if email == \"\": \n            asm3.al.error(\"failed password reset: user %s does not exist or have an email address\" % o.post[\"username\"], \"code.login\", dbo)\n            return \"NOEMAIL\"\n        # Generate a random cache key for this reset\n        cache_key = asm3.utils.uuid_str()\n        # Store info about this reset in the cache for 10 minutes\n        asm3.cachedisk.put(cache_key, \"\", { \"username\": o.post[\"username\"], \"userid\": userid,\n            \"database\": o.post[\"database\"], \"email\": email }, 600)\n        # Construct the reset link\n        resetlink = \"%s/reset_password?token=%s\" % (BASE_URL, cache_key)\n        # Send the email\n        asm3.utils.send_email(dbo, asm3.configuration.email(dbo), email, \"\", \"\",\n            _(\"Reset password request\", l),\n            _(\"To reset your ASM password, please follow this link:\", l) + \"\\n\\n\" + resetlink + \"\\n\\n\" +\n            _(\"This link will remain active for 10 minutes.\", l))\n        return \"OK\"\n\nclass login_jsonp(ASMEndpoint):\n    url = \"login_jsonp\"\n    check_logged_in = False\n\n    def content(self, o):\n        self.content_type(\"text/javascript\")\n        return \"%s({ response: '%s' })\" % (o.post[\"callback\"], asm3.users.web_login(o.post, o.session, self.remote_ip(), self.user_agent(), PATH))\n\nclass login_splash(ASMEndpoint):\n    url = \"login_splash\"\n    check_logged_in = False\n\n    def content(self, o):\n        try:\n            dbo = asm3.db.get_database(o.post[\"smaccount\"])\n            self.content_type(\"image/jpeg\")\n            self.cache_control(CACHE_ONE_DAY, 120)\n            return asm3.dbfs.get_string_filepath(dbo, \"/reports/splash.jpg\")\n        except Exception as err:\n            asm3.al.error(\"%s\" % str(err), \"code.login_splash\", dbo)\n            return \"\"\n\nclass logout(ASMEndpoint):\n    url = \"logout\"\n    check_logged_in = False\n\n    def content(self, o):\n        url = \"login\"\n        if o.post[\"smaccount\"] != \"\":\n            url = \"login?smaccount=\" + o.post[\"smaccount\"]\n        elif MULTIPLE_DATABASES and o.dbo is not None and o.dbo.alias is not None:\n            url = \"login?smaccount=\" + o.dbo.alias\n        asm3.users.update_user_activity(o.dbo, o.user, False)\n        asm3.users.logout(o.session, self.remote_ip(), self.user_agent())\n        self.set_cookie(\"asm_remember_me\", \"\", 0) # user explicitly logged out, remove remember me\n        self.redirect(url)\n\nclass reset_password(ASMEndpoint):\n    url = \"reset_password\"\n    check_logged_in = False\n\n    def content(self, o):\n        token = o.post[\"token\"]\n        rinfo = asm3.cachedisk.get(token, \"\")\n        if rinfo is None: raise asm3.utils.ASMValidationError(\"invalid token\")\n        dbo = asm3.db.get_database(rinfo[\"database\"])\n        if dbo.database in asm3.db.ERROR_VALUES: raise asm3.utils.ASMValidationError(\"bad database\")\n        # Reset their password to something random and send an email with the new password\n        l = dbo.locale\n        newpass = asm3.animalname.get_random_single_word_name()\n        asm3.users.reset_password(dbo, rinfo[\"userid\"], newpass)\n        asm3.al.info(\"reset password for %s to %s\" % (rinfo[\"username\"], newpass), \"code.reset_password\", dbo)\n        asm3.utils.send_email(dbo, asm3.configuration.email(dbo), rinfo[\"email\"], \"\", \"\", \n            _(\"Reset password request\", l),\n            _(\"The ASM password for {0} has been reset to:\", l).format(rinfo[\"username\"]) + \n            \"\\n\\n    \" + newpass)\n        self.redirect(\"static/pages/password_reset.html\")\n\nclass accounts(JSONEndpoint):\n    url = \"accounts\"\n    get_permissions = asm3.users.VIEW_ACCOUNT\n\n    def controller(self, o):\n        dbo = o.dbo\n        if o.post[\"offset\"] == \"all\":\n            accounts = asm3.financial.get_accounts(dbo)\n        else:\n            accounts = asm3.financial.get_accounts(dbo, onlyactive=True)\n        asm3.al.debug(\"got %d accounts\" % len(accounts), \"code.accounts\", dbo)\n        return {\n            \"accounttypes\": asm3.lookups.get_account_types(dbo),\n            \"costtypes\": asm3.lookups.get_costtypes(dbo),\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"roles\": asm3.users.get_roles(dbo),\n            \"rows\": accounts\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_ACCOUNT)\n        return asm3.financial.insert_account_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_ACCOUNT)\n        asm3.financial.update_account_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_ACCOUNT)\n        for aid in o.post.integer_list(\"ids\"):\n            asm3.financial.delete_account(o.dbo, o.user, aid)\n\nclass accounts_trx(JSONEndpoint):\n    url = \"accounts_trx\"\n    get_permissions = asm3.users.VIEW_ACCOUNT\n\n    def controller(self, o):\n        dbo = o.dbo\n        post = o.post\n        defview = asm3.configuration.default_account_view_period(dbo)\n        fromdate = post[\"fromdate\"]\n        todate = post[\"todate\"]\n        today = dbo.today()\n        if fromdate != \"\" and todate != \"\":\n            fromdate = post.date(\"fromdate\")\n            todate = post.date(\"todate\")\n        elif defview == asm3.financial.THIS_MONTH:\n            fromdate = first_of_month(today)\n            todate = last_of_month(today)\n        elif defview == asm3.financial.THIS_WEEK:\n            fromdate = monday_of_week(today)\n            todate = sunday_of_week(today)\n        elif defview == asm3.financial.THIS_YEAR:\n            fromdate = first_of_year(today)\n            todate = last_of_year(today)\n        elif defview == asm3.financial.LAST_MONTH:\n            fromdate = first_of_month(subtract_months(today, 1))\n            todate = last_of_month(subtract_months(today, 1))\n        elif defview == asm3.financial.LAST_WEEK:\n            fromdate = monday_of_week(subtract_days(today, 7))\n            todate = sunday_of_week(subtract_days(today, 7))\n        transactions = asm3.financial.get_transactions(dbo, post.integer(\"accountid\"), fromdate, todate, post.integer(\"recfilter\"))\n        accountcode = asm3.financial.get_account_code(dbo, post.integer(\"accountid\"))\n        accounteditroles = asm3.financial.get_account_edit_roles(dbo, post.integer(\"accountid\"))\n        asm3.al.debug(\"got %d trx for %s <-> %s\" % (len(transactions), str(fromdate), str(todate)), \"code.accounts_trx\", dbo)\n        return {\n            \"rows\": transactions,\n            \"codes\": \"|\".join(asm3.financial.get_account_codes(dbo, accountcode)),\n            \"accountid\": post.integer(\"accountid\"),\n            \"accountcode\": accountcode,\n            \"accounteditroles\": \"|\".join(accounteditroles),\n            \"fromdate\": python2display(o.locale, fromdate),\n            \"todate\": python2display(o.locale, todate)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.CHANGE_TRANSACTIONS)\n        asm3.financial.insert_trx_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_TRANSACTIONS)\n        asm3.financial.update_trx_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.CHANGE_TRANSACTIONS)\n        for tid in o.post.integer_list(\"ids\"):\n            asm3.financial.delete_trx(o.dbo, o.user, tid)\n\n    def post_reconcile(self, o):\n        self.check(asm3.users.CHANGE_TRANSACTIONS)\n        for tid in o.post.integer_list(\"ids\"):\n            asm3.financial.mark_reconciled(o.dbo, tid)\n\nclass additional(JSONEndpoint):\n    url = \"additional\"\n    get_permissions = asm3.users.MODIFY_ADDITIONAL_FIELDS\n\n    def controller(self, o):\n        dbo = o.dbo\n        fields = asm3.additional.get_fields(dbo)\n        asm3.al.debug(\"got %d additional field definitions\" % len(fields), \"code.additional\", dbo)\n        return {\n            \"rows\": fields,\n            \"fieldtypes\": asm3.lookups.get_additionalfield_types(dbo),\n            \"linktypes\": asm3.lookups.get_additionalfield_links(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.MODIFY_ADDITIONAL_FIELDS)\n        return asm3.additional.insert_field_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.MODIFY_ADDITIONAL_FIELDS)\n        asm3.additional.update_field_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.MODIFY_ADDITIONAL_FIELDS)\n        for fid in o.post.integer_list(\"ids\"):\n            asm3.additional.delete_field(o.dbo, o.user, fid)\n\nclass animal(JSONEndpoint):\n    url = \"animal\"\n    get_permissions = asm3.users.VIEW_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animal.get_animal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        # If a location filter is set, prevent the user opening this animal if it's\n        # not in their location.\n        self.check_animal(a)\n        recname = \"%s %s\" % (a.CODE, a.ANIMALNAME)\n        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, \"animal\", a[\"ID\"], recname)\n        asm3.al.debug(\"opened animal %s\" % recname, \"code.animal\", dbo)\n        return {\n            \"animal\": a,\n            \"activelitters\": asm3.animal.get_active_litters_brief(dbo),\n            \"additional\": asm3.additional.get_additional_fields(dbo, a[\"ID\"], \"animal\"),\n            \"animaltypes\": asm3.lookups.get_animal_types(dbo),\n            \"audit\": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, \"animal\", a[\"ID\"]) or [],\n            \"species\": asm3.lookups.get_species(dbo),\n            \"breeds\": asm3.lookups.get_breeds_by_species(dbo),\n            \"coattypes\": asm3.lookups.get_coattypes(dbo),\n            \"colours\": asm3.lookups.get_basecolours(dbo),\n            \"deathreasons\": asm3.lookups.get_deathreasons(dbo),\n            \"diarytasks\": asm3.diary.get_animal_tasks(dbo),\n            \"entryreasons\": asm3.lookups.get_entryreasons(dbo),\n            \"flags\": asm3.lookups.get_animal_flags(dbo),\n            \"incidents\": asm3.animalcontrol.get_animalcontrol_for_animal(dbo, o.post.integer(\"id\")),\n            \"internallocations\": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),\n            \"jurisdictions\": asm3.lookups.get_jurisdictions(dbo),\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"pickuplocations\": asm3.lookups.get_pickup_locations(dbo),\n            \"publishhistory\": asm3.animal.get_publish_history(dbo, a[\"ID\"]),\n            \"posneg\": asm3.lookups.get_posneg(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"sizes\": asm3.lookups.get_sizes(dbo),\n            \"sharebutton\": SHARE_BUTTON,\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, a[\"ID\"])[0],\n            \"templates\": asm3.template.get_document_templates(dbo, \"animal\"),\n            \"templatesemail\": asm3.template.get_document_templates(dbo, \"email\"),\n            \"ynun\": asm3.lookups.get_ynun(dbo),\n            \"ynunk\": asm3.lookups.get_ynunk(dbo)\n        }\n\n    def post_save(self, o):\n        self.check(asm3.users.CHANGE_ANIMAL)\n        asm3.animal.update_animal_from_form(o.dbo, o.post, o.user)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_ANIMAL)\n        asm3.animal.delete_animal(o.dbo, o.user, o.post.integer(\"animalid\"))\n\n    def post_email(self, o):\n        self.check(asm3.users.EMAIL_PERSON)\n        asm3.animal.send_email_from_form(o.dbo, o.user, o.post)\n\n    def post_gencode(self, o):\n        post = o.post\n        animaltypeid = post.integer(\"animaltypeid\")\n        entryreasonid = post.integer(\"entryreasonid\")\n        speciesid = post.integer(\"speciesid\")\n        datebroughtin = post.date(\"datebroughtin\")\n        sheltercode, shortcode, unique, year = asm3.animal.calc_shelter_code(o.dbo, animaltypeid, entryreasonid, speciesid, datebroughtin)\n        return sheltercode + \"||\" + shortcode + \"||\" + str(unique) + \"||\" + str(year)\n\n    def post_merge(self, o):\n        self.check(asm3.users.MERGE_ANIMAL)\n        asm3.animal.merge_animal(o.dbo, o.user, o.post.integer(\"animalid\"), o.post.integer(\"mergeanimalid\"))\n\n    def post_randomname(self, o):\n        return asm3.animal.get_random_name(o.dbo, o.post.integer(\"sex\"))\n\n    def post_shared(self, o):\n        asm3.animal.insert_publish_history(o.dbo, o.post.integer(\"id\"), o.post[\"service\"])\n\n    def post_clone(self, o):\n        self.check(asm3.users.CLONE_ANIMAL)\n        nid = asm3.animal.clone_animal(o.dbo, o.user, o.post.integer(\"animalid\"))\n        return str(nid)\n\n    def post_forgetpublish(self, o):\n        asm3.animal.delete_publish_history(o.dbo, o.post.integer(\"id\"), o.post[\"service\"])\n\n    def post_webnotes(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        asm3.animal.update_preferred_web_media_notes(o.dbo, o.user, o.post.integer(\"id\"), o.post[\"comments\"])\n\nclass animal_bulk(JSONEndpoint):\n    url = \"animal_bulk\"\n    get_permissions = asm3.users.CHANGE_ANIMAL\n    post_permissions = asm3.users.CHANGE_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        return {\n            \"ynun\": asm3.lookups.get_ynun(dbo),\n            \"ynunk\": asm3.lookups.get_ynunk(dbo),\n            \"animaltypes\": asm3.lookups.get_animal_types(dbo),\n            \"autolitters\": asm3.animal.get_active_litters_brief(dbo),\n            \"flags\": asm3.lookups.get_animal_flags(dbo),\n            \"entryreasons\": asm3.lookups.get_entryreasons(dbo),\n            \"internallocations\": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"movementtypes\": asm3.lookups.get_movement_types(dbo)\n        }\n\n    def post_update(self, o):\n        return asm3.animal.update_animals_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        return asm3.animal.delete_animals_from_form(o.dbo, o.user, o.post)\n\nclass animal_clinic(JSONEndpoint):\n    url = \"animal_clinic\"\n    js_module = \"clinic_appointment\"\n    get_permissions = asm3.users.VIEW_CLINIC\n\n    def controller(self, o):\n        dbo = o.dbo\n        animalid = o.post.integer(\"id\")\n        a = asm3.animal.get_animal(dbo, animalid)\n        if a is None: self.notfound()\n        self.check_animal(a)\n        rows = asm3.clinic.get_animal_appointments(dbo, animalid)\n        asm3.al.debug(\"got %d appointments for animal %s %s\" % (len(rows), a.CODE, a.ANIMALNAME), \"code.animal_clinic\", dbo)\n        return {\n            \"name\": self.url,\n            \"animal\": a,\n            \"clinicstatuses\": asm3.lookups.get_clinic_statuses(dbo),\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"forlist\": asm3.users.get_users(dbo),\n            \"rows\": rows,\n            \"templates\": asm3.template.get_document_templates(dbo, \"clinic\"),\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, animalid)[0]\n        }\n\nclass animal_costs(JSONEndpoint):\n    url = \"animal_costs\"\n    get_permissions = asm3.users.VIEW_COST\n\n    def controller(self, o):\n        dbo = o.dbo\n        animalid = o.post.integer(\"id\")\n        a = asm3.animal.get_animal(dbo, animalid)\n        if a is None: self.notfound()\n        self.check_animal(a)\n        cost = asm3.animal.get_costs(dbo, animalid)\n        asm3.al.debug(\"got %d costs for animal %s %s\" % (len(cost), a[\"CODE\"], a[\"ANIMALNAME\"]), \"code.animal_costs\", dbo)\n        return {\n            \"rows\": cost,\n            \"animal\": a,\n            \"costtypes\": asm3.lookups.get_costtypes(dbo),\n            \"costtotals\": asm3.animal.get_cost_totals(dbo, animalid),\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, animalid)[0]\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_COST)\n        return asm3.animal.insert_cost_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_COST)\n        asm3.animal.update_cost_from_form(o.dbo, o.user, o.post)\n\n    def post_dailyboardingcost(self, o):\n        self.check(asm3.users.CHANGE_ANIMAL)\n        animalid = o.post.integer(\"animalid\")\n        cost = o.post.integer(\"dailyboardingcost\")\n        asm3.animal.update_daily_boarding_cost(o.dbo, o.user, animalid, cost)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_COST)\n        for cid in o.post.integer_list(\"ids\"):\n            asm3.animal.delete_cost(o.dbo, o.user, cid)\n\nclass animal_diary(JSONEndpoint):\n    url = \"animal_diary\"\n    js_module = \"diary\"\n    get_permissions = asm3.users.VIEW_DIARY\n\n    def controller(self, o):\n        dbo = o.dbo\n        animalid = o.post.integer(\"id\")\n        a = asm3.animal.get_animal(dbo, animalid)\n        if a is None: self.notfound()\n        self.check_animal(a)\n        diaries = asm3.diary.get_diaries(dbo, asm3.diary.ANIMAL, animalid)\n        asm3.al.debug(\"got %d notes for animal %s %s\" % (len(diaries), a[\"CODE\"], a[\"ANIMALNAME\"]), \"code.animal_diary\", dbo)\n        return {\n            \"rows\": diaries,\n            \"animal\": a,\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, animalid)[0],\n            \"name\": \"animal_diary\",\n            \"linkid\": animalid,\n            \"linktypeid\": asm3.diary.ANIMAL,\n            \"forlist\": asm3.users.get_users_and_roles(dbo)\n        }\n\nclass animal_diet(JSONEndpoint):\n    url = \"animal_diet\"\n    get_permissions = asm3.users.VIEW_DIET\n\n    def controller(self, o):\n        dbo = o.dbo\n        animalid = o.post.integer(\"id\")\n        a = asm3.animal.get_animal(dbo, animalid)\n        if a is None: self.notfound()\n        self.check_animal(a)\n        diet = asm3.animal.get_diets(dbo, animalid)\n        asm3.al.debug(\"got %d diets for animal %s %s\" % (len(diet), a[\"CODE\"], a[\"ANIMALNAME\"]), \"code.animal_diet\", dbo)\n        return {\n            \"rows\": diet,\n            \"animal\": a,\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, animalid)[0],\n            \"diettypes\": asm3.lookups.get_diets(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_DIET)\n        return str(asm3.animal.insert_diet_from_form(o.dbo, o.user, o.post))\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_DIET)\n        asm3.animal.update_diet_from_form(o.dbo, o.user, o.post)\n        \n    def post_delete(self, o):\n        self.check( asm3.users.DELETE_DIET)\n        for did in o.post.integer_list(\"ids\"):\n            asm3.animal.delete_diet(o.dbo, o.user, did)\n\nclass animal_donations(JSONEndpoint):\n    url = \"animal_donations\"\n    js_module = \"donations\"\n    get_permissions = asm3.users.VIEW_DONATION\n\n    def controller(self, o):\n        dbo = o.dbo\n        animalid = o.post.integer(\"id\")\n        a = asm3.animal.get_animal(dbo, animalid)\n        if a is None: raise web.notfound()\n        self.check_animal(a)\n        donations = asm3.financial.get_animal_donations(dbo, animalid)\n        asm3.al.debug(\"got %d donations for animal %s %s\" % (len(donations), a[\"CODE\"], a[\"ANIMALNAME\"]), \"code.animal_donations\", dbo)\n        return {\n            \"rows\": donations,\n            \"animal\": a,\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, animalid)[0],\n            \"name\": \"animal_donations\",\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"accounts\": asm3.financial.get_accounts(dbo, onlybank=True),\n            \"logtypes\": asm3.lookups.get_log_types(dbo), \n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"frequencies\": asm3.lookups.get_donation_frequencies(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"payment\")\n        }\n\nclass animal_embed(ASMEndpoint):\n    url = \"animal_embed\"\n    check_logged_in = False\n    post_permissions = asm3.users.VIEW_ANIMAL\n\n    def post_find(self, o):\n        self.content_type(\"application/json\")\n        q = o.post[\"q\"]\n        rows = asm3.animal.get_animal_find_simple(o.dbo, q, o.post[\"filter\"], 100, o.locationfilter, o.siteid, o.visibleanimalids)\n        asm3.al.debug(\"got %d results for '%s'\" % (len(rows), self.query()), \"code.animal_embed\", o.dbo)\n        return asm3.utils.json(rows)\n\n    def post_multiselect(self, o):\n        self.content_type(\"application/json\")\n        dbo = o.dbo\n        rows = asm3.animal.get_animal_find_simple(dbo, \"\", \"all\", asm3.configuration.record_search_limit(dbo), o.locationfilter, o.siteid, o.visibleanimalids)\n        locations = asm3.lookups.get_internal_locations(dbo)\n        species = asm3.lookups.get_species(dbo)\n        litters = asm3.animal.get_litters(dbo)\n        flags = asm3.lookups.get_animal_flags(dbo)\n        rv = { \"rows\": rows, \"locations\": locations, \"species\": species, \"litters\": litters, \"flags\": flags }\n        return asm3.utils.json(rv)\n\n    def post_id(self, o):\n        self.content_type(\"application/json\")\n        dbo = o.dbo\n        animalid = o.post.integer(\"id\")\n        a = asm3.animal.get_animal(dbo, animalid)\n        if a is None:\n            asm3.al.error(\"get animal by id %d found no records.\" % animalid, \"code.animal_embed\", dbo)\n            self.notfound()\n        else:\n            asm3.al.debug(\"got animal %s %s by id\" % (a[\"CODE\"], a[\"ANIMALNAME\"]), \"code.animal_embed\", dbo)\n            return asm3.utils.json((a,))\n\nclass animal_find(JSONEndpoint):\n    url = \"animal_find\"\n    get_permissions = asm3.users.VIEW_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        c = {\n            \"agegroups\": asm3.configuration.age_groups(dbo),\n            \"animaltypes\": asm3.lookups.get_animal_types(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"breeds\": asm3.lookups.get_breeds_by_species(dbo),\n            \"flags\": asm3.lookups.get_animal_flags(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"entryreasons\": asm3.lookups.get_entryreasons(dbo),\n            \"internallocations\": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),\n            \"pickuplocations\": asm3.lookups.get_pickup_locations(dbo),\n            \"sizes\": asm3.lookups.get_sizes(dbo),\n            \"colours\": asm3.lookups.get_basecolours(dbo),\n            \"users\": asm3.users.get_users(dbo)\n        }\n        asm3.al.debug(\"loaded lookups for find animal\", \"code.animal_find\", dbo)\n        return c\n\nclass animal_find_results(JSONEndpoint):\n    url = \"animal_find_results\"\n    get_permissions = asm3.users.VIEW_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        q = o.post[\"q\"]\n        mode = o.post[\"mode\"]\n        if mode == \"SIMPLE\":\n            results = asm3.animal.get_animal_find_simple(dbo, q, \"all\", asm3.configuration.record_search_limit(dbo), o.locationfilter, o.siteid, o.visibleanimalids)\n        else:\n            results = asm3.animal.get_animal_find_advanced(dbo, o.post.data, asm3.configuration.record_search_limit(dbo), o.locationfilter, o.siteid, o.visibleanimalids)\n        add = None\n        if len(results) > 0: \n            add = asm3.additional.get_additional_fields_ids(dbo, results, \"animal\")\n        asm3.al.debug(\"found %d results for %s\" % (len(results), self.query()), \"code.animal_find_results\", dbo)\n        return {\n            \"rows\": results,\n            \"additional\": add,\n            \"wasonshelter\": q == \"\" and mode == \"SIMPLE\"\n        }\n\nclass animal_licence(JSONEndpoint):\n    url = \"animal_licence\"\n    js_module = \"licence\"\n    get_permissions = asm3.users.VIEW_LICENCE\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animal.get_animal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        self.check_animal(a)\n        licences = asm3.financial.get_animal_licences(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d licences\" % len(licences), \"code.animal_licence\", dbo)\n        return {\n            \"name\": \"animal_licence\",\n            \"rows\": licences,\n            \"animal\": a,\n            \"templates\": asm3.template.get_document_templates(dbo, \"licence\"),\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, a[\"ID\"])[0],\n            \"licencetypes\": asm3.lookups.get_licence_types(dbo)\n        }\n\nclass animal_log(JSONEndpoint):\n    url = \"animal_log\"\n    js_module = \"log\"\n    get_permissions = asm3.users.VIEW_LOG\n\n    def controller(self, o):\n        dbo = o.dbo\n        logfilter = o.post.integer(\"filter\")\n        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)\n        a = asm3.animal.get_animal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        self.check_animal(a)\n        logs = asm3.log.get_logs(dbo, asm3.log.ANIMAL, o.post.integer(\"id\"), logfilter)\n        asm3.al.debug(\"got %d logs for animal %s %s\" % (len(logs), a[\"CODE\"], a[\"ANIMALNAME\"]), \"code.animal_log\", dbo)\n        return {\n            \"name\": \"animal_log\",\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.log.ANIMAL,\n            \"filter\": logfilter,\n            \"rows\": logs,\n            \"animal\": a,\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, a[\"ID\"])[0],\n            \"logtypes\": asm3.lookups.get_log_types(dbo)\n        }\n\nclass animal_media(JSONEndpoint):\n    url = \"animal_media\"\n    js_module = \"media\"\n    get_permissions = asm3.users.VIEW_MEDIA\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animal.get_animal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        self.check_animal(a)\n        m = asm3.media.get_media(dbo, asm3.media.ANIMAL, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d media entries for animal %s %s\" % (len(m), a[\"CODE\"], a[\"ANIMALNAME\"]), \"code.animal_media\", dbo)\n        return {\n            \"media\": m,\n            \"animal\": a,\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, a[\"ID\"])[0],\n            \"canwatermark\": True and asm3.media.watermark_available(dbo),\n            \"showpreferred\": True,\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.media.ANIMAL,\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"newmedia\": o.post.integer(\"newmedia\") == 1,\n            \"name\": self.url,\n            \"resizeimagespec\": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, \"\"),\n            \"templates\": asm3.template.get_document_templates(dbo, \"email\"),\n            \"sigtype\": ELECTRONIC_SIGNATURES\n        }\n\nclass animal_medical(JSONEndpoint):\n    url = \"animal_medical\"\n    js_module = \"medical\"\n    get_permissions = asm3.users.VIEW_MEDICAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animal.get_animal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        self.check_animal(a)\n        limit = asm3.configuration.medical_item_display_limit(dbo)\n        med = asm3.medical.get_regimens_treatments(dbo, o.post.integer(\"id\"), limit=limit)\n        profiles = asm3.medical.get_profiles(dbo)\n        asm3.al.debug(\"got %d medical entries for animal %s %s\" % (len(med), a[\"CODE\"], a[\"ANIMALNAME\"]), \"code.animal_medical\", dbo)\n        return {\n            \"profiles\": profiles,\n            \"rows\": med,\n            \"overlimit\": len(med) == limit and limit or 0,\n            \"name\": \"animal_medical\",\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, a[\"ID\"])[0],\n            \"stockitems\": asm3.stock.get_stock_items(dbo),\n            \"stockusagetypes\": asm3.lookups.get_stock_usage_types(dbo),\n            \"users\": asm3.users.get_users(dbo),\n            \"animal\": a\n        }\n\nclass animal_movements(JSONEndpoint):\n    url = \"animal_movements\"\n    js_module = \"movements\"\n    get_permissions = asm3.users.VIEW_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animal.get_animal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        self.check_animal(a)\n        movements = asm3.movement.get_animal_movements(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d movements for animal %s %s\" % (len(movements), a[\"CODE\"], a[\"ANIMALNAME\"]), \"code.animal_movements\", dbo)\n        return {\n            \"rows\": movements,\n            \"animal\": a,\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, a[\"ID\"])[0],\n            \"logtypes\": asm3.lookups.get_log_types(dbo), \n            \"movementtypes\": asm3.lookups.get_movement_types(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"returncategories\": asm3.lookups.get_entryreasons(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\"),\n            \"name\": self.url\n        }\n\nclass animal_new(JSONEndpoint):\n    url = \"animal_new\"\n    get_permissions = asm3.users.ADD_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        c = {\n            \"autolitters\": asm3.animal.get_active_litters_brief(dbo),\n            \"additional\": asm3.additional.get_additional_fields(dbo, 0, \"animal\"),\n            \"animaltypes\": asm3.lookups.get_animal_types(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"breeds\": asm3.lookups.get_breeds_by_species(dbo),\n            \"coattypes\": asm3.lookups.get_coattypes(dbo),\n            \"colours\": asm3.lookups.get_basecolours(dbo),\n            \"flags\": asm3.lookups.get_animal_flags(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"entryreasons\": asm3.lookups.get_entryreasons(dbo),\n            \"jurisdictions\": asm3.lookups.get_jurisdictions(dbo),\n            \"internallocations\": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),\n            \"pickuplocations\": asm3.lookups.get_pickup_locations(dbo),\n            \"sizes\": asm3.lookups.get_sizes(dbo)\n        }\n        asm3.al.debug(\"loaded lookups for new animal\", \"code.animal_new\", dbo)\n        return c\n\n    def post_save(self, o):\n        self.check(asm3.users.ADD_ANIMAL)\n        animalid, code = asm3.animal.insert_animal_from_form(o.dbo, o.post, o.user)\n        return \"%s %s\" % (animalid, code)\n\n    def post_recentnamecheck(self, o):\n        rows = asm3.animal.get_recent_with_name(o.dbo, o.post[\"animalname\"])\n        asm3.al.debug(\"recent names found %d rows for '%s'\" % (len(rows), o.post[\"animalname\"]), \"code.animal_new.recentnamecheck\", o.dbo)\n        if len(rows) > 0:\n            return \"|\".join((str(rows[0][\"ANIMALID\"]), rows[0][\"SHELTERCODE\"], rows[0][\"ANIMALNAME\"]))\n\n    def post_units(self, o):\n        return \"&&\".join(asm3.animal.get_units_with_availability(o.dbo, o.post.integer(\"locationid\")))\n\nclass animal_test(JSONEndpoint):\n    url = \"animal_test\"\n    js_module = \"test\"\n    get_permissions = asm3.users.VIEW_TEST\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animal.get_animal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        self.check_animal(a)\n        test = asm3.medical.get_tests(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d tests\" % len(test), \"code.animal_test\", dbo)\n        return {\n            \"name\": \"animal_test\",\n            \"animal\": a,\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, a[\"ID\"])[0],\n            \"rows\": test,\n            \"stockitems\": asm3.stock.get_stock_items(dbo),\n            \"stockusagetypes\": asm3.lookups.get_stock_usage_types(dbo),\n            \"testtypes\": asm3.lookups.get_test_types(dbo),\n            \"testresults\": asm3.lookups.get_test_results(dbo)\n        }\n\nclass animal_transport(JSONEndpoint):\n    url = \"animal_transport\"\n    js_module = \"transport\"\n    get_permissions = asm3.users.VIEW_TRANSPORT\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animal.get_animal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        self.check_animal(a)\n        transports = asm3.movement.get_animal_transports(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d transports\" % len(transports), \"code.animal_transport\", dbo)\n        return {\n            \"name\": \"animal_transport\",\n            \"animal\": a,\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, a[\"ID\"])[0],\n            \"statuses\": asm3.lookups.get_transport_statuses(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"transport\"),\n            \"transporttypes\": asm3.lookups.get_transport_types(dbo),\n            \"rows\": transports\n        }\n\nclass animal_vaccination(JSONEndpoint):\n    url = \"animal_vaccination\"\n    js_module = \"vaccination\"\n    get_permissions = asm3.users.VIEW_VACCINATION\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animal.get_animal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        self.check_animal(a)\n        vacc = asm3.medical.get_vaccinations(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d vaccinations\" % len(vacc), \"code.vaccination\", dbo)\n        return {\n            \"name\": \"animal_vaccination\",\n            \"animal\": a,\n            \"tabcounts\": asm3.animal.get_satellite_counts(dbo, a[\"ID\"])[0],\n            \"rows\": vacc,\n            \"batches\": asm3.medical.get_batch_for_vaccination_types(dbo),\n            \"manufacturers\": \"|\".join(asm3.medical.get_vacc_manufacturers(dbo)),\n            \"stockitems\": asm3.stock.get_stock_items(dbo),\n            \"stockusagetypes\": asm3.lookups.get_stock_usage_types(dbo),\n            \"users\": asm3.users.get_users(dbo),\n            \"vaccinationtypes\": asm3.lookups.get_vaccination_types(dbo)\n        }\n\nclass batch(JSONEndpoint):\n    url = \"batch\"\n    get_permissions = asm3.users.TRIGGER_BATCH\n    post_permissions = asm3.users.TRIGGER_BATCH\n\n    def controller(self, o):\n        return {}\n\n    def post_genfigyear(self, o):\n        l = o.locale\n        if o.post.date(\"taskdate\") is None: raise asm3.utils.ASMValidationError(\"no date parameter\")\n        asm3.asynctask.function_task(o.dbo, _(\"Regenerate annual animal figures for\", l), asm3.animal.update_animal_figures_annual, o.dbo, o.post.date(\"taskdate\").year)\n\n    def post_genfigmonth(self, o):\n        l = o.locale\n        if o.post.date(\"taskdate\") is None: raise asm3.utils.ASMValidationError(\"no date parameter\")\n        asm3.asynctask.function_task(o.dbo, _(\"Regenerate monthly animal figures for\", l), asm3.animal.update_animal_figures, o.dbo, o.post.date(\"taskdate\").month, o.post.date(\"taskdate\").year)\n\n    def post_genshelterpos(self, o):\n        l = o.locale\n        asm3.asynctask.function_task(o.dbo, _(\"Recalculate on-shelter animal locations\", l), asm3.animal.update_on_shelter_animal_statuses, o.dbo)\n\n    def post_genallpos(self, o):\n        l = o.locale\n        asm3.asynctask.function_task(o.dbo, _(\"Recalculate ALL animal locations\", l), asm3.animal.update_all_animal_statuses, o.dbo)\n\n    def post_genallvariable(self, o):\n        l = o.locale\n        asm3.asynctask.function_task(o.dbo, _(\"Recalculate ALL animal ages/times\", l), asm3.animal.update_all_variable_animal_data, o.dbo)\n\n    def post_gendiarylinkinfo(self, o):\n        l = o.locale\n        asm3.asynctask.function_task(o.dbo, _(\"Regenerate diary link info for incomplete notes\", l), asm3.diary.update_link_info_incomplete, o.dbo)\n\n    def post_genlookingfor(self, o):\n        l = o.locale\n        asm3.asynctask.function_task(o.dbo, _(\"Regenerate 'Person looking for' report\", l), asm3.person.update_lookingfor_report, o.dbo)\n\n    def post_genownername(self, o):\n        l = o.locale\n        asm3.asynctask.function_task(o.dbo, _(\"Regenerate person names in selected format\", l), asm3.person.update_owner_names, o.dbo)\n\n    def post_genownerflags(self, o):\n        l = o.locale\n        asm3.asynctask.function_task(o.dbo, _(\"Regenerate person flags column\", l), asm3.person.update_check_flags, o.dbo)\n\n    def post_genlostfound(self, o):\n        l = o.locale\n        asm3.asynctask.function_task(o.dbo, _(\"Regenerate 'Match lost and found animals' report\", l), asm3.lostfound.update_match_report, o.dbo)\n\n    def post_resetnnncodes(self, o):\n        l = o.locale\n        asm3.asynctask.function_task(o.dbo, _(\"Reset NNN animal code counts for this year\", l), asm3.animal.maintenance_reset_nnn_codes, o.dbo)\n\nclass calendarview(JSONEndpoint):\n    url = \"calendarview\"\n    get_permissions = asm3.users.VIEW_ANIMAL\n\n    def controller(self, o):\n        return {}\n\nclass calendar_events(ASMEndpoint):\n    url = \"calendar_events\"\n\n    def content(self, o):\n        start = parse_date(\"%Y-%m-%d\", o.post[\"start\"])\n        end = parse_date(\"%Y-%m-%d\", o.post[\"end\"])\n        if not start or not end:\n            return \"[]\"\n        events = []\n        ev = o.post[\"ev\"]\n        user = o.user\n        dbo = o.dbo\n        l = o.locale\n        if \"d\" in ev and self.checkb(asm3.users.VIEW_DIARY):\n            # Show all diary notes on the calendar if the user chose to see all\n            # on the home page, or they have permission to view all notes\n            if asm3.configuration.all_diary_home_page(dbo) or self.checkb(asm3.users.EDIT_ALL_DIARY_NOTES):\n                user = \"\"\n            for d in asm3.diary.get_between_two_dates(dbo, user, start, end):\n                allday = False\n                # If the diary time is midnight, assume all day instead\n                if d[\"DIARYDATETIME\"].hour == 0 and d[\"DIARYDATETIME\"].minute == 0:\n                    allday = True\n                events.append({ \n                    \"title\": d[\"SUBJECT\"], \n                    \"allDay\": allday, \n                    \"start\": d[\"DIARYDATETIME\"], \n                    \"tooltip\": \"%s %s %s\" % (d[\"SUBJECT\"], d[\"LINKINFO\"], d[\"NOTE\"]), \n                    \"icon\": \"diary\",\n                    \"link\": \"diary_edit_my\" })\n        if \"v\" in ev and self.checkb(asm3.users.VIEW_VACCINATION):\n            for v in asm3.medical.get_vaccinations_two_dates(dbo, start, end, o.locationfilter, o.siteid, o.visibleanimalids):\n                sub = \"%s - %s\" % (v[\"VACCINATIONTYPE\"], v[\"ANIMALNAME\"])\n                tit = \"%s - %s %s (%s) %s\" % (v[\"VACCINATIONTYPE\"], v[\"SHELTERCODE\"], v[\"ANIMALNAME\"], v[\"DISPLAYLOCATIONNAME\"], v[\"COMMENTS\"])\n                events.append({ \n                    \"title\": sub, \n                    \"allDay\": True, \n                    \"start\": v[\"DATEREQUIRED\"], \n                    \"tooltip\": tit, \n                    \"icon\": \"vaccination\",\n                    \"link\": \"animal_vaccination?id=%s\" % v[\"ANIMALID\"] })\n            for v in asm3.medical.get_vaccinations_expiring_two_dates(dbo, start, end, o.locationfilter, o.siteid, o.visibleanimalids):\n                sub = \"%s - %s\" % (v[\"VACCINATIONTYPE\"], v[\"ANIMALNAME\"])\n                tit = \"%s - %s %s (%s) %s\" % (v[\"VACCINATIONTYPE\"], v[\"SHELTERCODE\"], v[\"ANIMALNAME\"], v[\"DISPLAYLOCATIONNAME\"], v[\"COMMENTS\"])\n                events.append({ \n                    \"title\": sub, \n                    \"allDay\": True, \n                    \"start\": v[\"DATEEXPIRES\"], \n                    \"tooltip\": tit, \n                    \"icon\": \"vaccination\",\n                    \"link\": \"animal_vaccination?id=%s\" % v[\"ANIMALID\"] })\n        if \"m\" in ev and self.checkb(asm3.users.VIEW_MEDICAL):\n            for m in asm3.medical.get_treatments_two_dates(dbo, start, end, o.locationfilter, o.siteid, o.visibleanimalids):\n                sub = \"%s - %s\" % (m[\"TREATMENTNAME\"], m[\"ANIMALNAME\"])\n                tit = \"%s - %s %s (%s) %s %s\" % (m[\"TREATMENTNAME\"], m[\"SHELTERCODE\"], m[\"ANIMALNAME\"], m[\"DISPLAYLOCATIONNAME\"], m[\"DOSAGE\"], m[\"COMMENTS\"])\n                events.append({ \n                    \"title\": sub, \n                    \"allDay\": True, \n                    \"start\": m[\"DATEREQUIRED\"], \n                    \"tooltip\": tit, \n                    \"icon\": \"medical\",\n                    \"link\": \"animal_medical?id=%s\" % m[\"ANIMALID\"] })\n        if \"t\" in ev and self.checkb(asm3.users.VIEW_TEST):\n            for t in asm3.medical.get_tests_two_dates(dbo, start, end, o.locationfilter, o.siteid, o.visibleanimalids):\n                sub = \"%s - %s\" % (t[\"TESTNAME\"], t[\"ANIMALNAME\"])\n                tit = \"%s - %s %s (%s) %s\" % (t[\"TESTNAME\"], t[\"SHELTERCODE\"], t[\"ANIMALNAME\"], t[\"DISPLAYLOCATIONNAME\"], t[\"COMMENTS\"])\n                events.append({ \n                    \"title\": sub, \n                    \"allDay\": True, \n                    \"start\": t[\"DATEREQUIRED\"], \n                    \"tooltip\": tit, \n                    \"icon\": \"test\",\n                    \"link\": \"animal_test?id=%s\" % t[\"ANIMALID\"] })\n        if \"c\" in ev and self.checkb(asm3.users.VIEW_CLINIC):\n            for c in asm3.clinic.get_appointments_two_dates(dbo, start, end, o.post[\"apptfor\"], o.siteid):\n                if c.OWNERNAME is not None:\n                    sub = \"%s - %s\" % (c.OWNERNAME, c.ANIMALNAME)\n                    tit = \"%s - %s (%s) %s\" % (c.OWNERNAME, c.ANIMALNAME, c.APPTFOR, c.REASONFORAPPOINTMENT)\n                    link = \"person_clinic?id=%s\" % c.OWNERID\n                else:\n                    sub = \"%s\" % c.ANIMALNAME\n                    tit = \"%s (%s) %s\" % (c.ANIMALNAME, c.APPTFOR, c.REASONFORAPPOINTMENT)\n                    link = \"animal_clinic?id=%s\" % c.ANIMALID\n                events.append({ \n                    \"title\": sub, \n                    \"allDay\": False, \n                    \"start\": c.DATETIME,\n                    \"end\": add_minutes(c.DATETIME, 20),\n                    \"tooltip\": tit, \n                    \"icon\": \"health\",\n                    \"link\": link })\n        if \"p\" in ev and self.checkb(asm3.users.VIEW_DONATION):\n            for p in asm3.financial.get_donations_due_two_dates(dbo, start, end):\n                sub = \"%s - %s\" % (p[\"DONATIONNAME\"], p[\"OWNERNAME\"])\n                tit = \"%s - %s %s %s\" % (p[\"DONATIONNAME\"], p[\"OWNERNAME\"], asm3.html.format_currency(l, p[\"DONATION\"]), p[\"COMMENTS\"])\n                events.append({ \n                    \"title\": sub, \n                    \"allDay\": True, \n                    \"start\": p[\"DATEDUE\"], \n                    \"tooltip\": tit, \n                    \"icon\": \"donation\",\n                    \"link\": \"person_donations?id=%s\" % p[\"OWNERID\"] })\n        if \"o\" in ev and self.checkb(asm3.users.VIEW_INCIDENT):\n            for o in asm3.animalcontrol.get_followup_two_dates(dbo, start, end):\n                sub = \"%s - %s\" % (o[\"INCIDENTNAME\"], o[\"OWNERNAME\"])\n                tit = \"%s - %s %s, %s\" % (o[\"INCIDENTNAME\"], o[\"OWNERNAME\"], o[\"DISPATCHADDRESS\"], o[\"CALLNOTES\"])\n                events.append({ \n                    \"title\": sub, \n                    \"allDay\": False, \n                    \"start\": o[\"FOLLOWUPDATETIME\"], \n                    \"tooltip\": tit, \n                    \"icon\": \"call\",\n                    \"link\": \"incident?id=%s\" % o[\"ACID\"] })\n        if \"r\" in ev and self.checkb(asm3.users.VIEW_TRANSPORT):\n            for r in asm3.movement.get_transport_two_dates(dbo, start, end):\n                sub = \"%s - %s\" % (r[\"ANIMALNAME\"], r[\"SHELTERCODE\"])\n                tit = \"%s %s, %s - %s :: %s, %s\" % (r[\"ANIMALNAME\"], r[\"SHELTERCODE\"], r[\"DRIVEROWNERNAME\"], r[\"PICKUPOWNERADDRESS\"], r[\"DROPOFFOWNERADDRESS\"], r[\"COMMENTS\"])\n                allday = False\n                if r[\"PICKUPDATETIME\"].hour == 0 and r[\"PICKUPDATETIME\"].minute == 0:\n                    allday = True\n                events.append({ \n                    \"title\": sub, \n                    \"allDay\": allday, \n                    \"start\": r[\"PICKUPDATETIME\"], \n                    \"end\": r[\"DROPOFFDATETIME\"],\n                    \"tooltip\": tit, \n                    \"icon\": \"transport\",\n                    \"link\": \"animal_transport?id=%s\" % r[\"ANIMALID\"]})\n        if \"l\" in ev and self.checkb(asm3.users.VIEW_TRAPLOAN):\n            for l in asm3.animalcontrol.get_traploan_two_dates(dbo, start, end):\n                sub = \"%s - %s\" % (l[\"TRAPTYPENAME\"], l[\"OWNERNAME\"])\n                tit = \"%s - %s %s, %s\" % (l[\"TRAPTYPENAME\"], l[\"OWNERNAME\"], l[\"TRAPNUMBER\"], l[\"COMMENTS\"])\n                events.append({ \n                    \"title\": sub, \n                    \"allDay\": True, \n                    \"start\": l[\"RETURNDUEDATE\"], \n                    \"tooltip\": tit, \n                    \"icon\": \"traploan\",\n                    \"link\": \"person_traploan?id=%s\" % l[\"OWNERID\"]})\n        asm3.al.debug(\"calendarview found %d events (%s->%s)\" % (len(events), start, end), \"code.calendarview\", dbo)\n        self.content_type(\"application/json\")\n        return asm3.utils.json(events)\n\nclass change_password(JSONEndpoint):\n    url = \"change_password\"\n\n    def controller(self, o):\n        asm3.al.debug(\"%s change password screen\" % o.user, \"code.change_password\", o.dbo)\n        return {\n            \"ismaster\": asm3.smcom.active() and o.dbo.database == o.user,\n            \"username\": o.user\n        }\n\n    def post_all(self, o):\n        oldpass = o.post[\"oldpassword\"]\n        newpass = o.post[\"newpassword\"]\n        asm3.al.debug(\"%s changed password\" % (o.user), \"code.change_password\", o.dbo)\n        asm3.users.change_password(o.dbo, o.user, oldpass, newpass)\n\nclass change_user_settings(JSONEndpoint):\n    url = \"change_user_settings\"\n\n    def controller(self, o):\n        asm3.al.debug(\"%s change user settings screen\" % o.user, \"code.change_user_settings\", o.dbo)\n        return {\n            \"user\": asm3.users.get_users(o.dbo, o.user),\n            \"locales\": get_locales(),\n            \"sigtype\": ELECTRONIC_SIGNATURES,\n            \"themes\": asm3.lookups.VISUAL_THEMES\n        }\n\n    def post_all(self, o):\n        post = o.post\n        theme = post[\"theme\"]\n        locale = post[\"locale\"]\n        realname = post[\"realname\"]\n        email = post[\"email\"]\n        signature = post[\"signature\"]\n        asm3.al.debug(\"%s changed settings: theme=%s, locale=%s, realname=%s, email=%s\" % (o.user, theme, locale, realname, email), \"code.change_password\", o.dbo)\n        asm3.users.update_user_settings(o.dbo, o.user, email, realname, locale, theme, signature)\n        self.reload_config()\n\nclass citations(JSONEndpoint):\n    url = \"citations\"\n    get_permissions = asm3.users.VIEW_CITATION\n\n    def controller(self, o):\n        # this screen only supports one mode at present - unpaid fines\n        # if o.post[\"filter\"] == \"unpaid\" or o.post[\"filter\"] == \"\":\n        citations = asm3.financial.get_unpaid_fines(o.dbo)\n        asm3.al.debug(\"got %d citations\" % len(citations), \"code.citations\", o.dbo)\n        return {\n            \"name\": \"citations\",\n            \"rows\": citations,\n            \"citationtypes\": asm3.lookups.get_citation_types(o.dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_CITATION)\n        return asm3.financial.insert_citation_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_CITATION)\n        asm3.financial.update_citation_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_CITATION)\n        for lid in o.post.integer_list(\"ids\"):\n            asm3.financial.delete_citation(o.dbo, o.user, lid)\n\nclass clinic_appointment(ASMEndpoint):\n    url = \"clinic_appointment\"\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_CLINIC)\n        return asm3.clinic.insert_appointment_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_CLINIC)\n        asm3.clinic.update_appointment_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_CLINIC)\n        for cid in o.post.integer_list(\"ids\"):\n            asm3.clinic.delete_appointment(o.dbo, o.user, cid)\n\n    def post_payment(self, o):\n        self.check(asm3.users.ADD_DONATION)\n        for cid in o.post.integer_list(\"ids\"):\n            asm3.clinic.insert_payment_from_appointment(o.dbo, o.user, cid, o.post)\n\n    def post_personanimals(self, o):\n        self.check(asm3.users.VIEW_ANIMAL)\n        return asm3.utils.json(asm3.animal.get_animals_owned_by(o.dbo, o.post.integer(\"personid\")))\n\n    def post_towaiting(self, o):\n        self.check(asm3.users.CHANGE_CLINIC)\n        for cid in o.post.integer_list(\"ids\"):\n            asm3.clinic.update_appointment_to_waiting(o.dbo, o.user, cid, o.post.datetime(\"date\", \"time\"))\n\n    def post_towithvet(self, o):\n        self.check(asm3.users.CHANGE_CLINIC)\n        for cid in o.post.integer_list(\"ids\"):\n            asm3.clinic.update_appointment_to_with_vet(o.dbo, o.user, cid, o.post.datetime(\"date\", \"time\"))\n\n    def post_tocomplete(self, o):\n        self.check(asm3.users.CHANGE_CLINIC)\n        for cid in o.post.integer_list(\"ids\"):\n            asm3.clinic.update_appointment_to_complete(o.dbo, o.user, cid, o.post.datetime(\"date\", \"time\"))\n\nclass clinic_calendar(JSONEndpoint):\n    url = \"clinic_calendar\"\n    get_permissions = asm3.users.VIEW_CLINIC\n\n    def controller(self, o):\n        return {\n            \"forlist\": asm3.users.get_users(o.dbo)\n        }\n\nclass clinic_invoice(JSONEndpoint):\n    url = \"clinic_invoice\"\n    get_permissions = asm3.users.VIEW_CLINIC\n\n    def controller(self, o):\n        dbo = o.dbo\n        appointmentid = o.post.integer(\"appointmentid\")\n        appointment = asm3.clinic.get_appointment(dbo, appointmentid)\n        if appointment is None: self.notfound()\n        rows = asm3.clinic.get_invoice_items(dbo, appointmentid)\n        asm3.al.debug(\"got %d invoice items for appointment %d\" % (len(rows), appointmentid), \"code.clinic_invoice\", dbo)\n        return {\n            \"appointment\": appointment,\n            \"appointmentid\": appointmentid,\n            \"rows\": rows\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_CLINIC)\n        return asm3.clinic.insert_invoice_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_CLINIC)\n        asm3.clinic.update_invoice_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_CLINIC)\n        for iid in o.post.integer_list(\"ids\"):\n            asm3.clinic.delete_invoice(o.dbo, o.user, iid)\n\nclass clinic_consultingroom(JSONEndpoint):\n    url = \"clinic_consultingroom\"\n    js_module = \"clinic_appointment\"\n    get_permissions = asm3.users.VIEW_CLINIC\n\n    def controller(self, o):\n        dbo = o.dbo\n        sf = o.post.integer(\"filter\")\n        if o.post[\"filter\"] == \"\": sf = -1\n        rows = asm3.clinic.get_appointments_today(dbo, statusfilter = sf, userfilter = o.user, siteid = o.siteid)\n        asm3.al.debug(\"got %d appointments\" % (len(rows)), \"code.clinic_consultingroom\", dbo)\n        return {\n            \"name\": self.url,\n            \"filter\": sf,\n            \"clinicstatuses\": asm3.lookups.get_clinic_statuses(dbo),\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"forlist\": asm3.users.get_users(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"clinic\"),\n            \"rows\": rows\n        }\n\nclass clinic_waitingroom(JSONEndpoint):\n    url = \"clinic_waitingroom\"\n    js_module = \"clinic_appointment\"\n    get_permissions = asm3.users.VIEW_CLINIC\n\n    def controller(self, o):\n        dbo = o.dbo\n        sf = o.post.integer(\"filter\")\n        if o.post[\"filter\"] == \"\": sf = -1\n        rows = asm3.clinic.get_appointments_today(dbo, statusfilter = sf, siteid = o.siteid)\n        asm3.al.debug(\"got %d appointments\" % (len(rows)), \"code.clinic_waitingroom\", dbo)\n        return {\n            \"name\": self.url,\n            \"filter\": sf,\n            \"clinicstatuses\": asm3.lookups.get_clinic_statuses(dbo),\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"forlist\": asm3.users.get_users(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"clinic\"),\n            \"rows\": rows\n        }\n\nclass csvexport(JSONEndpoint):\n    url = \"csvexport\"\n    get_permissions = asm3.users.EXPORT_REPORT\n\nclass csvexport_animals(ASMEndpoint):\n    url = \"csvexport_animals\"\n    get_permissions = asm3.users.EXPORT_REPORT\n\n    def content(self, o):\n        # If we're retrieving an already saved export, serve it.\n        if o.post[\"get\"] != \"\":\n            self.content_type(\"text/csv\")\n            self.header(\"Content-Disposition\", \"attachment; filename=export.csv\")\n            v = asm3.cachedisk.get(o.post[\"get\"], o.dbo.database)\n            if v is None: self.notfound()\n            return v\n        else:\n            l = o.locale\n            asm3.asynctask.function_task(o.dbo, _(\"Export Animals as CSV\", l), asm3.csvimport.csvexport_animals, \n                o.dbo, o.post[\"filter\"], o.post[\"animals\"], o.post.boolean(\"includeimage\") == 1)\n            self.redirect(\"task\")\n\nclass csvimport(JSONEndpoint):\n    url = \"csvimport\"\n    get_permissions = asm3.users.IMPORT_CSV_FILE\n    post_permissions = asm3.users.IMPORT_CSV_FILE\n\n    def controller(self, o):\n        return {}\n\n    def post_all(self, o):\n        l = o.locale\n        asm3.asynctask.function_task(o.dbo, _(\"Import a CSV file\", l), asm3.csvimport.csvimport, \n            o.dbo, o.post.filedata(), o.post[\"encoding\"], o.user, \n            o.post.boolean(\"createmissinglookups\") == 1, o.post.boolean(\"cleartables\") == 1, \n            o.post.boolean(\"checkduplicates\") == 1, o.post.boolean(\"prefixanimalcodes\") == 1)\n        self.redirect(\"task\")\n\nclass csvimport_paypal(JSONEndpoint):\n    url = \"csvimport_paypal\"\n    get_permissions = asm3.users.IMPORT_CSV_FILE\n    post_permissions = asm3.users.IMPORT_CSV_FILE\n\n    def controller(self, o):\n        return { \n            \"donationtypes\": asm3.lookups.get_donation_types(o.dbo),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(o.dbo),\n            \"flags\": asm3.lookups.get_person_flags(o.dbo)\n        }\n\n    def post_all(self, o):\n        l = o.locale\n        asm3.asynctask.function_task(o.dbo, _(\"Import a PayPal CSV file\", l), asm3.csvimport.csvimport_paypal, o.dbo, \\\n            o.post.filedata(), o.post.integer(\"type\"), o.post.integer(\"payment\"), o.post[\"flags\"], o.user, o.post[\"encoding\"])\n        self.redirect(\"task\")\n\nclass diary(ASMEndpoint):\n    url = \"diary\"\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_DIARY)\n        return asm3.diary.insert_diary_from_form(o.dbo, o.user, o.post.integer(\"linktypeid\"), o.post.integer(\"linkid\"), o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.EDIT_MY_DIARY_NOTES)\n        asm3.diary.update_diary_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_DIARY)\n        for did in o.post.integer_list(\"ids\"):\n            asm3.diary.delete_diary(o.dbo, o.user, did)\n\n    def post_complete(self, o):\n        self.check(asm3.users.BULK_COMPLETE_NOTES)\n        for did in o.post.integer_list(\"ids\"):\n            asm3.diary.complete_diary_note(o.dbo, o.user, did)\n\nclass diary_edit(JSONEndpoint):\n    url = \"diary_edit\"\n    js_module = \"diary\"\n    get_permissions = asm3.users.EDIT_ALL_DIARY_NOTES\n\n    def controller(self, o):\n        dbo = o.dbo\n        dfilter = o.post[\"filter\"]\n        if dfilter == \"uncompleted\" or dfilter == \"\":\n            diaries = asm3.diary.get_uncompleted_upto_today(dbo)\n        elif dfilter == \"completed\":\n            diaries = asm3.diary.get_completed_upto_today(dbo)\n        elif dfilter == \"future\":\n            diaries = asm3.diary.get_future(dbo)\n        elif dfilter == \"all\":\n            diaries = asm3.diary.get_all_upto_today(dbo)\n        asm3.al.debug(\"got %d diaries, filter was %s\" % (len(diaries), dfilter), \"code.diary_edit\", dbo)\n        return {\n            \"rows\": diaries,\n            \"newnote\": o.post.integer(\"newnote\") == 1,\n            \"name\": \"diary_edit\",\n            \"linkid\": 0,\n            \"linktypeid\": asm3.diary.NO_LINK,\n            \"forlist\": asm3.users.get_users_and_roles(dbo)\n        }\n\nclass diary_edit_my(JSONEndpoint):\n    url = \"diary_edit_my\"\n    js_module = \"diary\"\n    get_permissions = asm3.users.EDIT_MY_DIARY_NOTES\n\n    def controller(self, o):\n        dbo = o.dbo\n        userfilter = o.user\n        dfilter = o.post[\"filter\"]\n        if dfilter == \"uncompleted\" or dfilter == \"\":\n            diaries = asm3.diary.get_uncompleted_upto_today(dbo, userfilter)\n        elif dfilter == \"completed\":\n            diaries = asm3.diary.get_completed_upto_today(dbo, userfilter)\n        elif dfilter == \"future\":\n            diaries = asm3.diary.get_future(dbo, userfilter)\n        elif dfilter == \"all\":\n            diaries = asm3.diary.get_all_upto_today(dbo, userfilter)\n        asm3.al.debug(\"got %d diaries (%s), filter was %s\" % (len(diaries), userfilter, dfilter), \"code.diary_edit_my\", dbo)\n        return {\n            \"rows\": diaries,\n            \"newnote\": o.post.integer(\"newnote\") == 1,\n            \"name\": \"diary_edit_my\",\n            \"linkid\": 0,\n            \"linktypeid\": asm3.diary.NO_LINK,\n            \"forlist\": asm3.users.get_users_and_roles(dbo)\n        }\n\nclass diarytask(JSONEndpoint):\n    url = \"diarytask\"\n    get_permissions = asm3.users.EDIT_DIARY_TASKS\n    post_permissions = asm3.users.EDIT_DIARY_TASKS\n\n    def controller(self, o):\n        dbo = o.dbo\n        taskid = o.post.integer(\"taskid\")\n        taskname = asm3.diary.get_diarytask_name(dbo, taskid)\n        diarytaskdetail = asm3.diary.get_diarytask_details(dbo, taskid)\n        asm3.al.debug(\"got %d diary task details\" % len(diarytaskdetail), \"code.diarytask\", dbo)\n        return {\n            \"rows\": diarytaskdetail,\n            \"taskid\": taskid,\n            \"taskname\": taskname,\n            \"forlist\": asm3.users.get_users_and_roles(dbo)\n        }\n\n    def post_create(self, o):\n        return asm3.diary.insert_diarytaskdetail_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        asm3.diary.update_diarytaskdetail_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        for did in o.post.integer_list(\"ids\"):\n            asm3.diary.delete_diarytaskdetail(o.dbo, o.user, did)\n    \n    def post_exec(self, o):\n        self.check(asm3.users.ADD_DIARY)\n        asm3.diary.execute_diary_task(o.dbo, o.user, o.post[\"tasktype\"], o.post.integer(\"taskid\"), o.post.integer(\"id\"), o.post.date(\"seldate\"))\n\nclass diarytasks(JSONEndpoint):\n    url = \"diarytasks\"\n    get_permissions = asm3.users.EDIT_DIARY_TASKS\n    post_permissions = asm3.users.EDIT_DIARY_TASKS\n\n    def controller(self, o):\n        dbo = o.dbo\n        diarytaskhead = asm3.diary.get_diarytasks(dbo)\n        asm3.al.debug(\"got %d diary tasks\" % len(diarytaskhead), \"code.diarytasks\", dbo)\n        return {\n            \"rows\": diarytaskhead\n        }\n\n    def post_create(self, o):\n        return asm3.diary.insert_diarytaskhead_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        asm3.diary.update_diarytaskhead_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        for did in o.post.integer_list(\"ids\"):\n            asm3.diary.delete_diarytask(o.dbo, o.user, did)\n\nclass document_gen(ASMEndpoint):\n    url = \"document_gen\"\n    get_permissions = asm3.users.GENERATE_DOCUMENTS\n\n    def content(self, o):\n        dbo = o.dbo\n        post = o.post\n        linktype = post[\"linktype\"]\n        if post[\"id\"] == \"\" or post[\"id\"] == \"0\": raise asm3.utils.ASMValidationError(\"no id parameter\")\n        dtid = post.integer(\"dtid\")\n        templatename = asm3.template.get_document_template_name(dbo, dtid)\n        title = templatename\n        loglinktype = asm3.log.ANIMAL\n        asm3.al.debug(\"generating %s document for %d, template '%s'\" % (linktype, post.integer(\"id\"), templatename), \"code.document_gen\", dbo)\n        logid = post.integer(\"id\")\n        if linktype == \"ANIMAL\" or linktype == \"\":\n            loglinktype = asm3.log.ANIMAL\n            content = asm3.wordprocessor.generate_animal_doc(dbo, dtid, post.integer(\"id\"), o.user)\n        elif linktype == \"ANIMALCONTROL\":\n            loglinktype = asm3.log.ANIMALCONTROL\n            content = asm3.wordprocessor.generate_animalcontrol_doc(dbo, dtid, post.integer(\"id\"), o.user)\n        elif linktype == \"CLINIC\":\n            loglinktype = asm3.log.PERSON\n            content = asm3.wordprocessor.generate_clinic_doc(dbo, dtid, post.integer(\"id\"), o.user)\n        elif linktype == \"PERSON\":\n            loglinktype = asm3.log.PERSON\n            content = asm3.wordprocessor.generate_person_doc(dbo, dtid, post.integer(\"id\"), o.user)\n        elif linktype == \"DONATION\":\n            loglinktype = asm3.log.PERSON\n            logid = asm3.financial.get_donation(dbo, post.integer_list(\"id\")[0])[\"OWNERID\"]\n            content = asm3.wordprocessor.generate_donation_doc(dbo, dtid, post.integer_list(\"id\"), o.user)\n        elif linktype == \"FOUNDANIMAL\":\n            loglinktype = asm3.log.FOUNDANIMAL\n            logid = asm3.lostfound.get_foundanimal(dbo, post.integer(\"id\"))[\"OWNERID\"]\n            content = asm3.wordprocessor.generate_foundanimal_doc(dbo, dtid, post.integer(\"id\"), o.user)\n        elif linktype == \"LOSTANIMAL\":\n            loglinktype = asm3.log.LOSTANIMAL\n            logid = asm3.lostfound.get_lostanimal(dbo, post.integer(\"id\"))[\"OWNERID\"]\n            content = asm3.wordprocessor.generate_lostanimal_doc(dbo, dtid, post.integer(\"id\"), o.user)\n        elif linktype == \"LICENCE\":\n            loglinktype = asm3.log.PERSON\n            logid = asm3.financial.get_licence(dbo, post.integer(\"id\"))[\"OWNERID\"]\n            content = asm3.wordprocessor.generate_licence_doc(dbo, dtid, post.integer(\"id\"), o.user)\n        elif linktype == \"MOVEMENT\":\n            loglinktype = asm3.log.PERSON\n            logid = asm3.movement.get_movement(dbo, post.integer(\"id\"))[\"OWNERID\"]\n            content = asm3.wordprocessor.generate_movement_doc(dbo, dtid, post.integer(\"id\"), o.user)\n        elif linktype == \"TRANSPORT\":\n            loglinktype = asm3.log.ANIMAL\n            logid = asm3.movement.get_transport(dbo, post.integer_list(\"id\")[0])[\"ANIMALID\"]\n            content = asm3.wordprocessor.generate_transport_doc(dbo, dtid, post.integer_list(\"id\"), o.user)\n        elif linktype == \"VOUCHER\":\n            loglinktype = asm3.log.PERSON\n            logid = asm3.financial.get_voucher(dbo, post.integer(\"id\"))[\"OWNERID\"]\n            content = asm3.wordprocessor.generate_voucher_doc(dbo, dtid, post.integer(\"id\"), o.user)\n        elif linktype == \"WAITINGLIST\":\n            loglinktype = asm3.log.WAITINGLIST\n            logid = asm3.waitinglist.get_waitinglist_by_id(dbo, post.integer(\"id\"))[\"OWNERID\"]\n            content = asm3.wordprocessor.generate_waitinglist_doc(dbo, dtid, post.integer(\"id\"), o.user)\n        if asm3.configuration.generate_document_log(dbo) and asm3.configuration.generate_document_log_type(dbo) > 0:\n            asm3.log.add_log(dbo, o.user, loglinktype, logid, asm3.configuration.generate_document_log_type(dbo), _(\"Generated document '{0}'\").format(templatename))\n        if templatename.endswith(\".html\"):\n            self.content_type(\"text/html\")\n            self.cache_control(0)\n            return asm3.html.tinymce_header(title, \"document_edit.js\", visualaids=False, jswindowprint=asm3.configuration.js_window_print(dbo)) + \\\n                asm3.html.tinymce_main(dbo.locale, \"document_gen\", recid=post[\"id\"], linktype=post[\"linktype\"], \\\n                    dtid=dtid, content=asm3.utils.escape_tinymce(content))\n        elif templatename.endswith(\".odt\"):\n            self.content_type(\"application/vnd.oasis.opendocument.text\")\n            self.header(\"Content-Disposition\", \"attach; filename=\\\"%s\\\"\" % templatename)\n            self.cache_control(0)\n            return content\n\n    def post_save(self, o):\n        self.check(asm3.users.ADD_MEDIA)\n        dbo = o.dbo\n        post = o.post\n        linktype = post[\"linktype\"]\n        dtid = post.integer(\"dtid\")\n        tempname = asm3.template.get_document_template_name(dbo, dtid)\n        recid = post.integer(\"recid\")\n        if linktype == \"ANIMAL\":\n            tempname += \" - \" + asm3.animal.get_animal_namecode(dbo, recid)\n            asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMAL, recid, tempname, post[\"document\"])\n            self.redirect(\"animal_media?id=%d\" % recid)\n        elif linktype == \"ANIMALCONTROL\":\n            tempname += \" - \" + asm3.utils.padleft(recid, 6)\n            asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMALCONTROL, recid, tempname, post[\"document\"])\n            self.redirect(\"incident_media?id=%d\" % recid)\n        elif linktype == \"CLINIC\":\n            c = asm3.clinic.get_appointment(dbo, recid)\n            if c is None:\n                raise asm3.utils.ASMValidationError(\"%d is not a valid clinic id\" % recid)\n            animalid = c[\"ANIMALID\"]\n            ownerid = c[\"OWNERID\"]\n            if ownerid: \n                tempname = \"%s - %s\" % (tempname, asm3.person.get_person_name(dbo, ownerid))\n                asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, ownerid, tempname, post[\"document\"])\n                self.redirect(\"person_media?id=%d\" % ownerid)\n            else:\n                tempname = \"%s - %s\" % (tempname, asm3.animal.get_animal_namecode(dbo, animalid))\n                asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMAL, animalid, tempname, post[\"document\"])\n                self.redirect(\"animal_media?id=%d\" % animalid)\n        elif linktype == \"FOUNDANIMAL\":\n            tempname += \" - \" + asm3.utils.padleft(recid, 6)\n            asm3.media.create_document_media(dbo, o.user, asm3.media.FOUNDANIMAL, recid, tempname, post[\"document\"])\n            self.redirect(\"foundanimal_media?id=%d\" % recid)\n        elif linktype == \"LOSTANIMAL\":\n            tempname += \" - \" + asm3.utils.padleft(recid, 6)\n            asm3.media.create_document_media(dbo, o.user, asm3.media.LOSTANIMAL, recid, tempname, post[\"document\"])\n            self.redirect(\"lostanimal_media?id=%d\" % recid)\n        elif linktype == \"PERSON\":\n            tempname += \" - \" + asm3.person.get_person_name(dbo, recid)\n            asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, recid, tempname, post[\"document\"])\n            self.redirect(\"person_media?id=%d\" % recid)\n        elif linktype == \"WAITINGLIST\":\n            tempname += \" - \" + asm3.utils.padleft(recid, 6)\n            asm3.media.create_document_media(dbo, o.user, asm3.media.WAITINGLIST, recid, tempname, post[\"document\"])\n            self.redirect(\"waitinglist_media?id=%d\" % recid)\n        elif linktype == \"DONATION\":\n            d = asm3.financial.get_donations_by_ids(dbo, post.integer_list(\"recid\"))\n            if len(d) == 0:\n                raise asm3.utils.ASMValidationError(\"list '%s' does not contain valid ids\" % recid)\n            ownerid = d[0][\"OWNERID\"]\n            tempname += \" - \" + asm3.person.get_person_name(dbo, ownerid)\n            asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, ownerid, tempname, post[\"document\"])\n            self.redirect(\"person_media?id=%d\" % ownerid)\n        elif linktype == \"TRANSPORT\":\n            t = asm3.movement.get_transports_by_ids(dbo, post.integer_list(\"recid\"))\n            if len(t) == 0:\n                raise asm3.utils.ASMValidationError(\"list '%s' does not contain valid ids\" % recid)\n            animalid = t[0][\"ANIMALID\"]\n            tempname += \" - \" + asm3.animal.get_animal_namecode(dbo, animalid)\n            asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMAL, animalid, tempname, post[\"document\"])\n            self.redirect(\"animal_media?id=%d\" % animalid)\n        elif linktype == \"VOUCHER\":\n            v = asm3.financial.get_voucher(dbo, recid)\n            if v is None:\n                raise asm3.utils.ASMValidationError(\"%d is not a valid voucher id\" % recid)\n            ownerid = v[\"OWNERID\"]\n            tempname += \" - \" + asm3.person.get_person_name(dbo, ownerid)\n            asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, ownerid, tempname, post[\"document\"])\n            self.redirect(\"person_media?id=%d\" % ownerid)\n        elif linktype == \"LICENCE\":\n            l = asm3.financial.get_licence(dbo, recid)\n            if l is None:\n                raise asm3.utils.ASMValidationError(\"%d is not a valid licence id\" % recid)\n            animalid = l[\"ANIMALID\"]\n            ownerid = l[\"OWNERID\"]\n            tempname += \" - \" + asm3.person.get_person_name(dbo, ownerid)\n            if animalid: asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMAL, animalid, tempname, post[\"document\"])\n            if ownerid: asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, ownerid, tempname, post[\"document\"])\n            self.redirect(\"person_media?id=%d\" % ownerid)\n        elif linktype == \"MOVEMENT\":\n            m = asm3.movement.get_movement(dbo, recid)\n            if m is None:\n                raise asm3.utils.ASMValidationError(\"%d is not a valid movement id\" % recid)\n            animalid = m[\"ANIMALID\"]\n            ownerid = m[\"OWNERID\"]\n            tempname = \"%s - %s::%s\" % (tempname, asm3.animal.get_animal_namecode(dbo, animalid), asm3.person.get_person_name(dbo, ownerid))\n            if ownerid: asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, ownerid, tempname, post[\"document\"])\n            if animalid: asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMAL, animalid, tempname, post[\"document\"])\n            self.redirect(\"person_media?id=%d\" % ownerid)\n        else:\n            raise asm3.utils.ASMValidationError(\"Linktype '%s' is invalid, cannot save\" % linktype)\n\n    def post_emailtemplate(self, o):\n        self.content_type(\"text/html\")\n        if o.post[\"donationids\"] != \"\":\n            return asm3.wordprocessor.generate_donation_doc(o.dbo, o.post.integer(\"dtid\"), o.post.integer_list(\"donationids\"), o.user)\n        elif o.post.integer(\"personid\") != 0:\n            return asm3.wordprocessor.generate_person_doc(o.dbo, o.post.integer(\"dtid\"), o.post.integer(\"personid\"), o.user)\n        elif o.post.integer(\"animalid\") != 0:\n            return asm3.wordprocessor.generate_animal_doc(o.dbo, o.post.integer(\"dtid\"), o.post.integer(\"animalid\"), o.user)\n        else:\n            return asm3.template.get_document_template_content(o.dbo, o.post.integer(\"dtid\"))\n\n    def post_pdf(self, o):\n        self.check(asm3.users.VIEW_MEDIA)\n        dbo = o.dbo\n        post = o.post\n        disposition = asm3.configuration.pdf_inline(dbo) and \"inline; filename=\\\"doc.pdf\\\"\" or \"attachment; filename=\\\"doc.pdf\\\"\"\n        self.content_type(\"application/pdf\")\n        self.header(\"Content-Disposition\", disposition)\n        return asm3.utils.html_to_pdf(dbo, post[\"document\"])\n\n    def post_print(self, o):\n        self.check(asm3.users.VIEW_MEDIA)\n        l = o.locale\n        post = o.post\n        self.content_type(\"text/html\")\n        return \"%s%s%s\" % (asm3.html.tinymce_print_header(_(\"Print Preview\", l)), post[\"document\"], \"</body></html>\")\n\nclass document_template_edit(ASMEndpoint):\n    url = \"document_template_edit\"\n    get_permissions = asm3.users.MODIFY_DOCUMENT_TEMPLATES\n    post_permissions = asm3.users.MODIFY_DOCUMENT_TEMPLATES\n\n    def content(self, o):\n        dbo = o.dbo\n        post = o.post\n        dtid = post.integer(\"dtid\")\n        templatename = asm3.template.get_document_template_name(dbo, dtid)\n        if templatename == \"\": self.notfound()\n        title = templatename\n        asm3.al.debug(\"editing %s\" % templatename, \"code.document_template_edit\", dbo)\n        if templatename.endswith(\".html\"):\n            content = asm3.utils.escape_tinymce(asm3.template.get_document_template_content(dbo, dtid))\n            self.content_type(\"text/html\")\n            self.cache_control(0)\n            return asm3.html.tinymce_header(title, \"document_edit.js\", jswindowprint=asm3.configuration.js_window_print(dbo)) + \\\n                asm3.html.tinymce_main(dbo.locale, \"document_template_edit\", dtid=dtid, content=content)\n        elif templatename.endswith(\".odt\"):\n            content = asm3.template.get_document_template_content(dbo, dtid)\n            self.content_type(\"application/vnd.oasis.opendocument.text\")\n            self.cache_control(0)\n            return content\n\n    def post_save(self, o):\n        dbo = o.dbo\n        post = o.post\n        dtid = post.integer(\"dtid\")\n        asm3.template.update_document_template_content(dbo, dtid, post[\"document\"])\n        self.redirect(\"document_templates\")\n\n    def post_pdf(self, o):\n        dbo = o.dbo\n        post = o.post\n        disposition = asm3.configuration.pdf_inline(dbo) and \"inline; filename=\\\"doc.pdf\\\"\" or \"attachment; filename=\\\"doc.pdf\\\"\"\n        self.content_type(\"application/pdf\")\n        self.header(\"Content-Disposition\", disposition)\n        return asm3.utils.html_to_pdf(dbo, post[\"document\"])\n\n    def post_print(self, o):\n        post = o.post\n        l = o.locale\n        self.content_type(\"text/html\")\n        return \"%s%s%s\" % (asm3.html.tinymce_print_header(_(\"Print Preview\", l)), post[\"document\"], \"</body></html>\")\n\nclass document_media_edit(ASMEndpoint):\n    url = \"document_media_edit\"\n    get_permissions = asm3.users.VIEW_MEDIA\n\n    def content(self, o):\n        dbo = o.dbo\n        post = o.post\n        lastmod, medianame, mimetype, filedata = asm3.media.get_media_file_data(dbo, post.integer(\"id\"))\n        asm3.al.debug(\"editing media %d\" % post.integer(\"id\"), \"code.document_media_edit\", dbo)\n        title = medianame\n        self.content_type(\"text/html\")\n        return asm3.html.tinymce_header(title, \"document_edit.js\", jswindowprint=asm3.configuration.js_window_print(dbo), \\\n            onlysavewhendirty=False, readonly=asm3.media.has_signature(dbo, post.integer(\"id\"))) + \\\n            asm3.html.tinymce_main(dbo.locale, \"document_media_edit\", mediaid=post.integer(\"id\"), redirecturl=post[\"redirecturl\"], \\\n                content=asm3.utils.escape_tinymce(filedata))\n\n    def post_save(self, o):\n        self.check(asm3.users.CHANGE_MEDIA)\n        post = o.post\n        asm3.media.update_file_content(o.dbo, o.user, post.integer(\"mediaid\"), post[\"document\"])\n        raise self.redirect(post[\"redirecturl\"])\n\n    def post_pdf(self, o):\n        self.check(asm3.users.VIEW_MEDIA)\n        dbo = o.dbo\n        disposition = asm3.configuration.pdf_inline(dbo) and \"inline; filename=\\\"doc.pdf\\\"\" or \"attachment; filename=\\\"doc.pdf\\\"\"\n        self.content_type(\"application/pdf\")\n        self.header(\"Content-Disposition\", disposition)\n        return asm3.utils.html_to_pdf(dbo, o.post[\"document\"])\n\n    def post_print(self, o):\n        self.check(asm3.users.VIEW_MEDIA)\n        l = o.locale\n        self.content_type(\"text/html\")\n        return \"%s%s%s\" % (asm3.html.tinymce_print_header(_(\"Print Preview\", l)), o.post[\"document\"], \"</body></html>\")\n\nclass document_repository(JSONEndpoint):\n    url = \"document_repository\"\n    get_permissions = asm3.users.VIEW_REPO_DOCUMENT\n\n    def controller(self, o):\n        documents = asm3.dbfs.get_document_repository(o.dbo)\n        asm3.al.debug(\"got %d documents in repository\" % len(documents), \"code.document_repository\", o.dbo)\n        return { \n            \"rows\": documents,\n            \"templates\": asm3.template.get_document_templates(o.dbo, \"email\")\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_REPO_DOCUMENT)\n        if o.post[\"filename\"] != \"\":\n            # If filename is supplied it's an HTML5 upload\n            filename = o.post[\"filename\"]\n            filedata = o.post[\"filedata\"]\n            # Strip the data URL and decode\n            if filedata.startswith(\"data:\"):\n                filedata = filedata[filedata.find(\",\")+1:]\n                filedata = filedata.replace(\" \", \"+\") # Unescape turns pluses back into spaces, which breaks base64\n            filedata = asm3.utils.base64decode(filedata)\n        else:\n            # Otherwise it's an old style file input\n            filename = asm3.utils.filename_only(o.post.data.filechooser.filename)\n            filedata = o.post.data.filechooser.value\n        asm3.dbfs.upload_document_repository(o.dbo, o.post[\"path\"], filename, filedata)\n        self.redirect(\"document_repository\")\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_REPO_DOCUMENT)\n        for i in o.post.integer_list(\"ids\"):\n            asm3.dbfs.delete_id(o.dbo, i)\n\n    def post_email(self, o):\n        self.check(asm3.users.EMAIL_PERSON)\n        dbo = o.dbo\n        post = o.post\n        attachments = []\n        for dbfsid in post.integer_list(\"ids\"):\n            name = asm3.dbfs.get_name_for_id(dbo, dbfsid)\n            content = asm3.dbfs.get_string_id(dbo, dbfsid)\n            attachments.append(( name, asm3.media.mime_type(name), content ))\n        asm3.utils.send_email(dbo, post[\"from\"], post[\"to\"], post[\"cc\"], post[\"bcc\"], post[\"subject\"], post[\"body\"], \"html\", attachments)\n        if asm3.configuration.audit_on_send_email(dbo): \n            asm3.audit.email(dbo, o.user, post[\"from\"], post[\"to\"], post[\"cc\"], post[\"bcc\"], post[\"subject\"], post[\"body\"])\n        return post[\"to\"]\n\nclass document_repository_file(ASMEndpoint):\n    url = \"document_repository_file\"\n    get_permissions = asm3.users.VIEW_REPO_DOCUMENT\n\n    def content(self, o):\n        if o.post.integer(\"dbfsid\") != 0:\n            name = asm3.dbfs.get_name_for_id(o.dbo, o.post.integer(\"dbfsid\"))\n            mimetype = asm3.media.mime_type(name)\n            disp = \"attachment\"\n            if mimetype == \"application/pdf\": disp = \"inline\" # Try to show PDFs in place\n            self.content_type(mimetype)\n            self.header(\"Content-Disposition\", \"%s; filename=\\\"%s\\\"\" % (disp, name))\n            return asm3.dbfs.get_string_id(o.dbo, o.post.integer(\"dbfsid\"))\n\nclass document_templates(JSONEndpoint):\n    url = \"document_templates\"\n    get_permissions = asm3.users.MODIFY_DOCUMENT_TEMPLATES\n    post_permissions = asm3.users.MODIFY_DOCUMENT_TEMPLATES\n\n    def controller(self, o):\n        templates = asm3.template.get_document_templates(o.dbo)\n        asm3.al.debug(\"got %d document templates\" % len(templates), \"code.document_templates\", o.dbo)\n        return {\n            \"rows\": templates\n        }\n\n    def post_create(self, o):\n        return asm3.template.create_document_template(o.dbo, o.user, o.post[\"template\"], show = o.post[\"show\"])\n\n    def post_createodt(self, o):\n        post = o.post\n        fn = post.filename()\n        if post[\"path\"] != \"\": fn = post[\"path\"] + \"/\" + fn\n        asm3.template.create_document_template(o.dbo, o.user, fn, \".odt\", post.filedata(), show = o.post[\"odtshow\"])\n        self.redirect(\"document_templates\")\n\n    def post_clone(self, o):\n        for t in o.post.integer_list(\"ids\"):\n            return asm3.template.clone_document_template(o.dbo, o.user, t, o.post[\"template\"])\n\n    def post_delete(self, o):\n        for t in o.post.integer_list(\"ids\"):\n            asm3.template.delete_document_template(o.dbo, o.user, t)\n\n    def post_rename(self, o):\n        asm3.template.rename_document_template(o.dbo, o.user, o.post.integer(\"dtid\"), o.post[\"newname\"])\n\n    def post_show(self, o):\n        for t in o.post.integer_list(\"ids\"):\n            asm3.template.update_document_template_show(o.dbo, o.user, t, o.post[\"newshow\"])\n\nclass donation(JSONEndpoint):\n    url = \"donation\"\n    js_module = \"donations\"\n    get_permissions = asm3.users.VIEW_DONATION\n\n    def controller(self, o):\n        dbo = o.dbo\n        offset = o.post[\"offset\"]\n        if offset == \"\": offset = \"m0\"\n        donations = asm3.financial.get_donations(dbo, offset)\n        asm3.al.debug(\"got %d donations\" % (len(donations)), \"code.donation\", dbo)\n        return {\n            \"name\": \"donation\",\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"accounts\": asm3.financial.get_accounts(dbo, onlybank=True),\n            \"logtypes\": asm3.lookups.get_log_types(dbo), \n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"frequencies\": asm3.lookups.get_donation_frequencies(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"payment\"),\n            \"rows\": donations\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_DONATION)\n        return \"%s|%s\" % (asm3.financial.insert_donation_from_form(o.dbo, o.user, o.post), o.post[\"receiptnumber\"])\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_DONATION)\n        asm3.financial.update_donation_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_DONATION)\n        for did in o.post.integer_list(\"ids\"):\n            asm3.financial.delete_donation(o.dbo, o.user, did)\n\n    def post_tokencharge(self, o):\n        self.check(asm3.users.CHANGE_DONATION)\n        dbo = o.dbo\n        post = o.post\n        title = post[\"title\"]\n        installments = post[\"installments\"] # number of payments to pass to cardcom\n        processor = asm3.financial.get_payment_processor(dbo, post[\"processor\"])\n        if not processor.validatePaymentReference(post[\"payref\"]):\n            return (asm3.utils.json({\"error\": \"Invalid payref\"}))\n        if processor.isPaymentReceived(post[\"payref\"]):\n            return (asm3.utils.json({\"error\": \"Expired payref\"}))\n        try:\n            processor.tokenCharge(post[\"payref\"], title, installments)\n            return (asm3.utils.json({\"message\": _(\"Successful token charge.\")}))\n        except Exception as e:\n            return (asm3.utils.json({\"error\": str(e)}))\n\n    def post_popuprequest(self, o):\n        self.check(asm3.users.CHANGE_DONATION)\n        dbo = o.dbo\n        post = o.post\n        title = post[\"title\"]\n        processor = asm3.financial.get_payment_processor(dbo, post[\"processor\"])\n        if not processor.validatePaymentReference(post[\"payref\"]):\n            return (asm3.utils.json({\"error\": \"Invalid payref\"}))\n        if processor.isPaymentReceived(post[\"payref\"]):\n            return (asm3.utils.json({\"error\": \"Expired payref\"}))\n        return_url = post[\"return\"] or asm3.configuration.payment_return_url(dbo)\n        try:\n            url = processor.checkoutUrl(post[\"payref\"], return_url, title)\n            return (asm3.utils.json({\"url\": url}))\n        except Exception as e:\n            return (asm3.utils.json({\"error\": str(e)}))\n\n    def post_emailrequest(self, o):\n        self.check(asm3.users.EMAIL_PERSON)\n        dbo = o.dbo\n        post = o.post\n        emailadd = post[\"to\"]\n        body = post[\"body\"]\n        params = { \n            \"account\": dbo.database, \n            \"method\": \"checkout\",\n            \"processor\": post[\"processor\"],\n            \"payref\": post[\"payref\"],\n            \"title\": post[\"subject\"] \n        }\n        url = \"%s?%s\" % (SERVICE_URL, asm3.utils.urlencode(params))\n        body = asm3.utils.replace_url_token(body, url, post[\"payref\"])\n        if post.boolean(\"addtolog\"):\n            asm3.log.add_log_email(dbo, o.user, asm3.log.PERSON, post.integer(\"person\"), post.integer(\"logtype\"), \n                emailadd, post[\"subject\"], body)\n        asm3.utils.send_email(dbo, post[\"from\"], emailadd, post[\"cc\"], post[\"bcc\"], post[\"subject\"], body, \"html\")\n        if asm3.configuration.audit_on_send_email(dbo): \n            asm3.audit.email(dbo, o.user, post[\"from\"], emailadd, post[\"cc\"], post[\"bcc\"], post[\"subject\"], body)\n        return emailadd\n\n    def post_nextreceipt(self, o):\n        return asm3.financial.get_next_receipt_number(o.dbo)\n\n    def post_receive(self, o):\n        self.check( asm3.users.CHANGE_DONATION)\n        for did in o.post.integer_list(\"ids\"):\n            asm3.financial.receive_donation(o.dbo, o.user, did)\n\n    def post_personmovements(self, o):\n        self.check(asm3.users.VIEW_MOVEMENT)\n        self.content_type(\"application/json\")\n        return asm3.utils.json(asm3.movement.get_person_movements(o.dbo, o.post.integer(\"personid\")))\n\nclass donation_receive(JSONEndpoint):\n    url = \"donation_receive\"\n    get_permissions = asm3.users.ADD_DONATION\n\n    def controller(self, o):\n        dbo = o.dbo\n        asm3.al.debug(\"receiving donation\", \"code.donation_receive\", dbo)\n        return {\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"accounts\": asm3.financial.get_accounts(dbo, onlybank=True)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_DONATION)\n        return asm3.financial.insert_donations_from_form(o.dbo, o.user, o.post, o.post[\"received\"], True, o.post[\"person\"], o.post[\"animal\"], o.post[\"movement\"], False)\n\nclass foundanimal(JSONEndpoint):\n    url = \"foundanimal\"\n    js_module = \"lostfound\"\n    get_permissions = asm3.users.VIEW_FOUND_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.lostfound.get_foundanimal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        recname = \"%s %s %s\" % (a.AGEGROUP, a.SPECIESNAME, a.OWNERNAME)\n        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, \"animalfound\", a[\"ID\"], recname)\n        asm3.al.debug(\"open found animal %s\" % recname, \"code.foundanimal\", dbo)\n        return {\n            \"animal\": a,\n            \"name\": \"foundanimal\",\n            \"additional\": asm3.additional.get_additional_fields(dbo, a[\"ID\"], \"foundanimal\"),\n            \"agegroups\": asm3.configuration.age_groups(dbo),\n            \"audit\": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, \"animalfound\", a[\"ID\"]) or [],\n            \"breeds\": asm3.lookups.get_breeds_by_species(dbo),\n            \"colours\": asm3.lookups.get_basecolours(dbo),\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"foundanimal\"),\n            \"templatesemail\": asm3.template.get_document_templates(dbo, \"email\"),\n            \"tabcounts\": asm3.lostfound.get_foundanimal_satellite_counts(dbo, a[\"LFID\"])[0]\n        }\n\n    def post_save(self, o):\n        self.check(asm3.users.CHANGE_FOUND_ANIMAL)\n        asm3.lostfound.update_foundanimal_from_form(o.dbo, o.post, o.user)\n\n    def post_email(self, o):\n        self.check(asm3.users.EMAIL_PERSON)\n        asm3.lostfound.send_email_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_FOUND_ANIMAL)\n        asm3.lostfound.delete_foundanimal(o.dbo, o.user, o.post.integer(\"id\"))\n\n    def post_toanimal(self, o):\n        self.check(asm3.users.ADD_ANIMAL)\n        return str(asm3.lostfound.create_animal_from_found(o.dbo, o.user, o.post.integer(\"id\")))\n\n    def post_towaitinglist(self, o):\n        self.check(asm3.users.ADD_WAITING_LIST)\n        return str(asm3.lostfound.create_waitinglist_from_found(o.dbo, o.user, o.post.integer(\"id\")))\n\nclass foundanimal_diary(JSONEndpoint):\n    url = \"foundanimal_diary\"\n    js_module = \"diary\"\n    get_permissions = asm3.users.VIEW_DIARY\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.lostfound.get_foundanimal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        diaries = asm3.diary.get_diaries(dbo, asm3.diary.FOUNDANIMAL, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d diaries for found animal %s %s %s\" % (len(diaries), a[\"AGEGROUP\"], a[\"SPECIESNAME\"], a[\"OWNERNAME\"]), \"code.foundanimal_diary\", dbo)\n        return {\n            \"rows\": diaries,\n            \"animal\": a,\n            \"tabcounts\": asm3.lostfound.get_foundanimal_satellite_counts(dbo, a[\"LFID\"])[0],\n            \"name\": \"foundanimal_diary\",\n            \"linkid\": a[\"LFID\"],\n            \"linktypeid\": asm3.diary.FOUNDANIMAL,\n            \"forlist\": asm3.users.get_users_and_roles(dbo)\n        }\n\nclass foundanimal_find(JSONEndpoint):\n    url = \"foundanimal_find\"\n    js_module = \"lostfound_find\"\n    get_permissions = asm3.users.VIEW_FOUND_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        return {\n            \"agegroups\": asm3.configuration.age_groups(dbo),\n            \"colours\": asm3.lookups.get_basecolours(dbo),\n            \"name\": \"foundanimal_find\",\n            \"species\": asm3.lookups.get_species(dbo),\n            \"breeds\": asm3.lookups.get_breeds_by_species(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"mode\": \"found\"\n        }\n\nclass foundanimal_find_results(JSONEndpoint):\n    url = \"foundanimal_find_results\"\n    js_module = \"lostfound_find_results\"\n    get_permissions = asm3.users.VIEW_FOUND_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        results = asm3.lostfound.get_foundanimal_find_advanced(dbo, o.post.data, asm3.configuration.record_search_limit(dbo))\n        add = None\n        if len(results) > 0: \n            add = asm3.additional.get_additional_fields_ids(dbo, results, \"foundanimal\")\n        asm3.al.debug(\"found %d results for %s\" % (len(results), self.query()), \"code.foundanimal_find_results\", dbo)\n        return {\n            \"additional\": add,\n            \"rows\": results,\n            \"name\": \"foundanimal_find_results\"\n        }\n\nclass foundanimal_log(JSONEndpoint):\n    url = \"foundanimal_log\"\n    js_module = \"log\"\n    get_permissions = asm3.users.VIEW_LOG\n\n    def controller(self, o):\n        dbo = o.dbo\n        logfilter = o.post.integer(\"filter\")\n        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)\n        a = asm3.lostfound.get_foundanimal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        logs = asm3.log.get_logs(dbo, asm3.log.FOUNDANIMAL, o.post.integer(\"id\"), logfilter)\n        return {\n            \"name\": \"foundanimal_log\",\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.log.FOUNDANIMAL,\n            \"filter\": logfilter,\n            \"rows\": logs,\n            \"animal\": a,\n            \"tabcounts\": asm3.lostfound.get_foundanimal_satellite_counts(dbo, a[\"LFID\"])[0],\n            \"logtypes\": asm3.lookups.get_log_types(dbo)\n        }\n\nclass foundanimal_media(JSONEndpoint):\n    url = \"foundanimal_media\"\n    js_module = \"media\"\n    get_permissions = asm3.users.VIEW_MEDIA\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.lostfound.get_foundanimal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        m = asm3.media.get_media(dbo, asm3.media.FOUNDANIMAL, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d media for found animal %s %s %s\" % (len(m), a[\"AGEGROUP\"], a[\"SPECIESNAME\"], a[\"OWNERNAME\"]), \"code.foundanimal_media\", dbo)\n        return {\n            \"media\": m,\n            \"animal\": a,\n            \"tabcounts\": asm3.lostfound.get_foundanimal_satellite_counts(dbo, a[\"LFID\"])[0],\n            \"showpreferred\": True,\n            \"canwatermark\": False,\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.media.FOUNDANIMAL,\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"name\": self.url,\n            \"resizeimagespec\": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, \"\"),\n            \"templates\": asm3.template.get_document_templates(dbo, \"email\"),\n            \"sigtype\": ELECTRONIC_SIGNATURES\n        }\n\nclass foundanimal_new(JSONEndpoint):\n    url = \"foundanimal_new\"\n    js_module = \"lostfound_new\"\n    get_permissions = asm3.users.ADD_FOUND_ANIMAL\n    post_permissions = asm3.users.ADD_FOUND_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        return {\n            \"agegroups\": asm3.configuration.age_groups(dbo),\n            \"additional\": asm3.additional.get_additional_fields(dbo, 0, \"foundanimal\"),\n            \"colours\": asm3.lookups.get_basecolours(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"breeds\": asm3.lookups.get_breeds_by_species(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"name\": \"foundanimal_new\"\n        }\n\n    def post_all(self, o):\n        return str(asm3.lostfound.insert_foundanimal_from_form(o.dbo, o.post, o.user))\n\nclass giftaid_hmrc_spreadsheet(JSONEndpoint):\n    url = \"giftaid_hmrc_spreadsheet\"\n    get_permissions = asm3.users.VIEW_DONATION\n\n    def controller(self, o):\n        return {}\n\n    def post_all(self, o):\n        fromdate = o.post[\"fromdate\"]\n        todate = o.post[\"todate\"]\n        asm3.al.debug(\"generating HMRC giftaid spreadsheet for %s -> %s\" % (fromdate, todate), \"code.giftaid_hmrc_spreadsheet\", o.dbo)\n        self.content_type(\"application/vnd.oasis.opendocument.spreadsheet\")\n        self.cache_control(0)\n        self.header(\"Content-Disposition\", \"attachment; filename=\\\"giftaid.ods\\\"\")\n        return asm3.financial.giftaid_spreadsheet(o.dbo, PATH, o.post.date(\"fromdate\"), o.post.date(\"todate\"))\n\nclass htmltemplates(JSONEndpoint):\n    url = \"htmltemplates\"\n    get_permissions = asm3.users.PUBLISH_OPTIONS\n    post_permissions = asm3.users.PUBLISH_OPTIONS\n\n    def controller(self, o):\n        templates = asm3.template.get_html_templates(o.dbo)\n        asm3.al.debug(\"editing %d html templates\" % len(templates), \"code.htmltemplates\", o.dbo)\n        return {\n            \"rows\": templates\n        }\n\n    def post_create(self, o):\n        if o.post[\"templatename\"] in ( \"onlineform\", \"report\" ):\n            raise asm3.utils.ASMValidationError(\"Illegal name '%s'\" % o.post[\"templatename\"])\n        asm3.template.update_html_template(o.dbo, o.user, o.post[\"templatename\"], o.post[\"header\"], o.post[\"body\"], o.post[\"footer\"])\n\n    def post_update(self, o):\n        if o.post[\"templatename\"] in ( \"onlineform\", \"report\" ):\n            raise asm3.utils.ASMValidationError(\"Illegal name '%s'\" % o.post[\"templatename\"])\n        asm3.template.update_html_template(o.dbo, o.user, o.post[\"templatename\"], o.post[\"header\"], o.post[\"body\"], o.post[\"footer\"])\n\n    def post_delete(self, o):\n        for name in o.post[\"names\"].split(\",\"):\n            if name != \"\": asm3.template.delete_html_template(o.dbo, o.user, name)\n\nclass htmltemplates_preview(ASMEndpoint):\n    url = \"htmltemplates_preview\"\n\n    def content(self, o):\n        template = o.post[\"template\"].replace(\",\", \"\")\n        rows = asm3.animal.get_animals_ids(o.dbo, \"DateBroughtIn\", \"SELECT ID FROM animal WHERE ID IN (%s)\" % o.post[\"animals\"], limit=10)\n        asm3.additional.append_to_results(o.dbo, rows, \"animal\")\n        self.content_type(\"text/html\")\n        self.cache_control(0)\n        return asm3.publishers.html.animals_to_page(o.dbo, rows, template)\n\nclass incident(JSONEndpoint):\n    url = \"incident\"\n    get_permissions = asm3.users.VIEW_INCIDENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animalcontrol.get_animalcontrol(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        asm3.animalcontrol.check_view_permission(dbo, o.user, o.session, o.post.integer(\"id\"))\n        if o.siteid != 0 and a.SITEID != 0 and o.siteid != a.SITEID:\n            raise asm3.utils.ASMPermissionError(\"incident not in user site\")\n        if (a.DISPATCHLATLONG is None or a.DISPATCHLATLONG == \"\") and a.DISPATCHADDRESS != \"\":\n            a.DISPATCHLATLONG = asm3.animalcontrol.update_dispatch_geocode(dbo, a.ID, \\\n                a.DISPATCHLATLONG, a.DISPATCHADDRESS, a.DISPATCHTOWN, a.DISPATCHCOUNTY, a.DISPATCHPOSTCODE)\n        recname = \"%s %s %s\" % (a.ACID, a.INCIDENTNAME, python2display(o.locale, a.INCIDENTDATETIME))\n        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, \"animalcontrol\", a[\"ID\"], recname)\n        asm3.al.debug(\"open incident %s\" % recname, \"code.incident\", dbo)\n        return {\n            \"agegroups\": asm3.configuration.age_groups(dbo),\n            \"additional\": asm3.additional.get_additional_fields(dbo, a[\"ACID\"], \"incident\"),\n            \"audit\": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, \"animalcontrol\", a[\"ACID\"]) or [],\n            \"incident\": a,\n            \"jurisdictions\": asm3.lookups.get_jurisdictions(dbo),\n            \"animallinks\": asm3.animalcontrol.get_animalcontrol_animals(dbo, o.post.integer(\"id\")),\n            \"incidenttypes\": asm3.lookups.get_incident_types(dbo),\n            \"completedtypes\": asm3.lookups.get_incident_completed_types(dbo),\n            \"pickuplocations\": asm3.lookups.get_pickup_locations(dbo),\n            \"roles\": asm3.users.get_roles(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"sites\": asm3.lookups.get_sites(dbo),\n            \"tabcounts\": asm3.animalcontrol.get_animalcontrol_satellite_counts(dbo, a[\"ACID\"])[0],\n            \"templates\": asm3.template.get_document_templates(dbo, \"incident\"),\n            \"users\": asm3.users.get_users(dbo)\n        }\n\n    def post_save(self, o):\n        self.check(asm3.users.CHANGE_INCIDENT)\n        asm3.animalcontrol.update_animalcontrol_from_form(o.dbo, o.post, o.user)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_INCIDENT)\n        asm3.animalcontrol.delete_animalcontrol(o.dbo, o.user, o.post.integer(\"id\"))\n\n    def post_latlong(self, o):\n        self.check(asm3.users.CHANGE_INCIDENT)\n        asm3.animalcontrol.update_dispatch_latlong(o.dbo, o.post.integer(\"incidentid\"), o.post[\"latlong\"])\n\n    def post_email(self, o):\n        self.check(asm3.users.EMAIL_PERSON)\n        asm3.person.send_email_from_form(o.dbo, o.user, o.post)\n\n    def post_linkanimaladd(self, o):\n        self.check(asm3.users.CHANGE_INCIDENT)\n        asm3.animalcontrol.update_animalcontrol_addlink(o.dbo, o.user, o.post.integer(\"id\"), o.post.integer(\"animalid\"))\n\n    def post_linkanimaldelete(self, o):\n        self.check(asm3.users.CHANGE_INCIDENT)\n        asm3.animalcontrol.update_animalcontrol_removelink(o.dbo, o.user, o.post.integer(\"id\"), o.post.integer(\"animalid\"))\n\nclass incident_citations(JSONEndpoint):\n    url = \"incident_citations\"\n    js_module = \"citations\"\n    get_permissions = asm3.users.VIEW_CITATION\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animalcontrol.get_animalcontrol(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        citations = asm3.financial.get_incident_citations(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d citations\" % len(citations), \"code.incident_citations\", dbo)\n        return {\n            \"name\": \"incident_citations\",\n            \"rows\": citations,\n            \"incident\": a,\n            \"tabcounts\": asm3.animalcontrol.get_animalcontrol_satellite_counts(dbo, a[\"ACID\"])[0],\n            \"citationtypes\": asm3.lookups.get_citation_types(dbo)\n        }\n\nclass incident_find(JSONEndpoint):\n    url = \"incident_find\"\n    get_permissions = asm3.users.VIEW_INCIDENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        return {\n            \"agegroups\": asm3.configuration.age_groups(dbo),\n            \"incidenttypes\": asm3.lookups.get_incident_types(dbo),\n            \"completedtypes\": asm3.lookups.get_incident_completed_types(dbo),\n            \"citationtypes\": asm3.lookups.get_citation_types(dbo),\n            \"jurisdictions\": asm3.lookups.get_jurisdictions(dbo),\n            \"pickuplocations\": asm3.lookups.get_pickup_locations(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"users\": asm3.users.get_users(dbo)\n        }\n\nclass incident_find_results(JSONEndpoint):\n    url = \"incident_find_results\"\n    get_permissions = asm3.users.VIEW_INCIDENT\n\n    def controller(self, o):\n        results = asm3.animalcontrol.get_animalcontrol_find_advanced(o.dbo, o.post.data, o.user, asm3.configuration.record_search_limit(o.dbo))\n        add = None\n        if len(results) > 0: \n            add = asm3.additional.get_additional_fields_ids(o.dbo, results, \"incident\")\n        asm3.al.debug(\"found %d results for %s\" % (len(results), self.query()), \"code.incident_find_results\", o.dbo)\n        return {\n            \"additional\": add,\n            \"rows\": results\n        }\n\nclass incident_diary(JSONEndpoint):\n    url = \"incident_diary\"\n    js_module = \"diary\"\n    get_permissions = asm3.users.VIEW_DIARY\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animalcontrol.get_animalcontrol(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        diaries = asm3.diary.get_diaries(dbo, asm3.diary.ANIMALCONTROL, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d diaries\" % len(diaries), \"code.incident_diary\", dbo)\n        return {\n            \"rows\": diaries,\n            \"incident\": a,\n            \"tabcounts\": asm3.animalcontrol.get_animalcontrol_satellite_counts(dbo, a[\"ACID\"])[0],\n            \"name\": \"incident_diary\",\n            \"linkid\": a[\"ACID\"],\n            \"linktypeid\": asm3.diary.ANIMALCONTROL,\n            \"forlist\": asm3.users.get_users_and_roles(dbo)\n        }\n\nclass incident_log(JSONEndpoint):\n    url = \"incident_log\"\n    js_module = \"log\"\n    get_permissions = asm3.users.VIEW_LOG\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animalcontrol.get_animalcontrol(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        logfilter = o.post.integer(\"filter\")\n        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)\n        logs = asm3.log.get_logs(dbo, asm3.log.ANIMALCONTROL, o.post.integer(\"id\"), logfilter)\n        asm3.al.debug(\"got %d logs\" % len(logs), \"code.incident_log\", dbo)\n        return {\n            \"name\": \"incident_log\",\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.log.ANIMALCONTROL,\n            \"filter\": logfilter,\n            \"rows\": logs,\n            \"incident\": a,\n            \"tabcounts\": asm3.animalcontrol.get_animalcontrol_satellite_counts(dbo, a[\"ACID\"])[0],\n            \"logtypes\": asm3.lookups.get_log_types(dbo)\n        }\n\nclass incident_map(JSONEndpoint):\n    url = \"incident_map\"\n    get_permissions = asm3.users.VIEW_INCIDENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        rows = asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { \"filter\": \"incomplete\" }, o.user)\n        asm3.al.debug(\"incident map, %d active\" % (len(rows)), \"code.incident_map\", dbo)\n        return {\n            \"rows\": rows\n        }\n\nclass incident_media(JSONEndpoint):\n    url = \"incident_media\"\n    js_module = \"media\"\n    get_permissions = asm3.users.VIEW_MEDIA\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.animalcontrol.get_animalcontrol(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        m = asm3.media.get_media(dbo, asm3.media.ANIMALCONTROL, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d media\" % len(m), \"code.incident_media\", dbo)\n        return {\n            \"media\": m,\n            \"incident\": a,\n            \"tabcounts\": asm3.animalcontrol.get_animalcontrol_satellite_counts(dbo, a[\"ACID\"])[0],\n            \"showpreferred\": True,\n            \"canwatermark\": False,\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.media.ANIMALCONTROL,\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"name\": self.url,\n            \"resizeimagespec\": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, \"\"),\n            \"templates\": asm3.template.get_document_templates(dbo, \"email\"),\n            \"sigtype\": ELECTRONIC_SIGNATURES\n        }\n\nclass incident_new(JSONEndpoint):\n    url = \"incident_new\"\n    get_permissions = asm3.users.ADD_INCIDENT\n    post_permissions = asm3.users.ADD_INCIDENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        asm3.al.debug(\"add incident\", \"code.incident_new\", dbo)\n        return {\n            \"incidenttypes\": asm3.lookups.get_incident_types(dbo),\n            \"jurisdictions\": asm3.lookups.get_jurisdictions(dbo),\n            \"additional\": asm3.additional.get_additional_fields(dbo, 0, \"incident\"),\n            \"pickuplocations\": asm3.lookups.get_pickup_locations(dbo),\n            \"towns\": asm3.person.get_towns(dbo),\n            \"counties\": asm3.person.get_counties(dbo),\n            \"towncounties\": asm3.person.get_town_to_county(dbo),\n            \"roles\": asm3.users.get_roles(dbo),\n            \"sites\": asm3.lookups.get_sites(dbo),\n            \"users\": asm3.users.get_users(dbo)\n        }\n\n    def post_all(self, o):\n        incidentid = asm3.animalcontrol.insert_animalcontrol_from_form(o.dbo, o.post, o.user)\n        return str(incidentid)\n\nclass licence(JSONEndpoint):\n    url = \"licence\"\n    get_permissions = asm3.users.VIEW_LICENCE\n\n    def controller(self, o):\n        dbo = o.dbo\n        offset = o.post[\"offset\"]\n        if offset == \"\": offset = \"i31\"\n        licences = asm3.financial.get_licences(dbo, offset)\n        asm3.al.debug(\"got %d licences\" % len(licences), \"code.licence\", dbo)\n        return {\n            \"name\": \"licence\",\n            \"rows\": licences,\n            \"templates\": asm3.template.get_document_templates(dbo, \"licence\"),\n            \"licencetypes\": asm3.lookups.get_licence_types(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_LICENCE)\n        return asm3.financial.insert_licence_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_LICENCE)\n        asm3.financial.update_licence_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_LICENCE)\n        for lid in o.post.integer_list(\"ids\"):\n            asm3.financial.delete_licence(o.dbo, o.user, lid)\n\nclass licence_renewal(JSONEndpoint):\n    url = \"licence_renewal\"\n    get_permissions = asm3.users.ADD_LICENCE\n    post_permissions = asm3.users.ADD_LICENCE\n\n    def controller(self, o):\n        dbo = o.dbo\n        asm3.al.debug(\"renewing licence\", \"code.licence_renewal\", dbo)\n        return {\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"licencetypes\": asm3.lookups.get_licence_types(dbo),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"accounts\": asm3.financial.get_accounts(dbo, onlybank=True)\n        }\n\n    def post_all(self, o):\n        asm3.financial.insert_donations_from_form(o.dbo, o.user, o.post, o.post[\"issuedate\"], False, o.post[\"person\"], o.post[\"animal\"]) \n        return asm3.financial.insert_licence_from_form(o.dbo, o.user, o.post)\n\nclass litters(JSONEndpoint):\n    url = \"litters\"\n    get_permissions = asm3.users.VIEW_LITTER\n\n    def controller(self, o):\n        dbo = o.dbo\n        offset = o.post[\"offset\"]\n        if offset == \"\": offset = \"m365\"\n        litters = asm3.animal.get_litters(dbo, offset)\n        asm3.al.debug(\"got %d litters\" % len(litters), \"code.litters\", dbo)\n        return {\n            \"rows\": litters,\n            \"species\": asm3.lookups.get_species(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_LITTER)\n        return asm3.animal.insert_litter_from_form(o.dbo, o.user, o.post)\n\n    def post_nextlitterid(self, o):\n        nextid = o.dbo.query_int(\"SELECT MAX(ID) FROM animallitter\") + 1\n        return asm3.utils.padleft(nextid, 6)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_LITTER)\n        asm3.animal.update_litter_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_LITTER) \n        for lid in o.post.integer_list(\"ids\"):\n            asm3.animal.delete_litter(o.dbo, o.user, lid)\n\nclass log(ASMEndpoint):\n    url = \"log\"\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_LOG)\n        return asm3.log.insert_log_from_form(o.dbo, o.user, o.post.integer(\"linktypeid\"), o.post.integer(\"linkid\"), o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_LOG)\n        asm3.log.update_log_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_LOG)\n        for lid in o.post.integer_list(\"ids\"):\n            asm3.log.delete_log(o.dbo, o.user, lid)\n\nclass log_new(JSONEndpoint):\n    url = \"log_new\"\n    get_permissions = asm3.users.ADD_LOG\n    post_permissions = asm3.users.ADD_LOG\n\n    def controller(self, o):\n        dbo = o.dbo\n        mode = o.post[\"mode\"]\n        if mode == \"\": mode = \"animal\"\n        return {\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"mode\": mode\n        }\n\n    def post_animal(self, o):\n        asm3.log.insert_log_from_form(o.dbo, o.user, asm3.log.ANIMAL, o.post.integer(\"animal\"), o.post)\n\n    def post_person(self, o):\n        asm3.log.insert_log_from_form(o.dbo, o.user, asm3.log.PERSON, o.post.integer(\"person\"), o.post)\n\nclass lookups(JSONEndpoint):\n    url = \"lookups\"\n    get_permissions = asm3.users.MODIFY_LOOKUPS\n    post_permissions = asm3.users.MODIFY_LOOKUPS\n\n    def controller(self, o):\n        dbo = o.dbo\n        l = o.locale\n        tablename = o.post[\"tablename\"]\n        if tablename == \"\": tablename = \"animaltype\"\n        table = list(asm3.lookups.LOOKUP_TABLES[tablename])\n        table[0] = translate(table[0], l)\n        table[2] = translate(table[2], l)\n        modifiers = table[4].split(\" \")\n        rows = asm3.lookups.get_lookup(dbo, tablename, table[1])\n        asm3.al.debug(\"edit lookups for %s, got %d rows\" % (tablename, len(rows)), \"code.lookups\", dbo)\n        return {\n            \"rows\": rows,\n            \"adoptapetcolours\": asm3.lookups.ADOPTAPET_COLOURS,\n            \"petfinderspecies\": asm3.lookups.PETFINDER_SPECIES,\n            \"petfinderbreeds\": asm3.lookups.PETFINDER_BREEDS,\n            \"sites\": asm3.lookups.get_sites(dbo),\n            \"tablename\": tablename,\n            \"tablelabel\": table[0],\n            \"namefield\": table[1].upper(),\n            \"namelabel\": table[2],\n            \"descfield\": table[3].upper(),\n            \"hasspecies\": \"species\" in modifiers,\n            \"haspfspecies\": \"pubspec\" in modifiers,\n            \"haspfbreed\": \"pubbreed\" in modifiers,\n            \"hasapcolour\": \"pubcol\" in modifiers,\n            \"hasrescheduledays\": \"sched\" in modifiers,\n            \"hasaccountid\": \"acc\" in modifiers,\n            \"hasdefaultcost\": \"cost\" in modifiers,\n            \"hasunits\": \"units\" in modifiers,\n            \"hassite\": \"site\" in modifiers,\n            \"hasvat\": \"vat\" in modifiers, \n            \"canadd\": \"add\" in modifiers,\n            \"candelete\": \"del\" in modifiers,\n            \"canretire\": \"ret\" in modifiers,\n            \"accounts\": asm3.financial.get_accounts(dbo, onlyactive=True),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"tables\": asm3.html.json_lookup_tables(l)\n        }\n\n    def post_create(self, o):\n        post = o.post\n        return asm3.lookups.insert_lookup(o.dbo, o.user, post[\"lookup\"], post[\"lookupname\"], post[\"lookupdesc\"], \\\n            post.integer(\"species\"), post[\"pfbreed\"], post[\"pfspecies\"], post[\"apcolour\"], post[\"units\"], post.integer(\"site\"), post.integer(\"rescheduledays\"), post.integer(\"account\"), post.integer(\"defaultcost\"), post.integer(\"vat\"), post.integer(\"retired\"))\n\n    def post_update(self, o):\n        post = o.post\n        asm3.lookups.update_lookup(o.dbo, o.user, post.integer(\"id\"), post[\"lookup\"], post[\"lookupname\"], post[\"lookupdesc\"], \\\n            post.integer(\"species\"), post[\"pfbreed\"], post[\"pfspecies\"], post[\"apcolour\"], post[\"units\"], post.integer(\"site\"), post.integer(\"rescheduledays\"), post.integer(\"account\"), post.integer(\"defaultcost\"), post.integer(\"vat\"), post.integer(\"retired\"))\n\n    def post_delete(self, o):\n        for lid in o.post.integer_list(\"ids\"):\n            asm3.lookups.delete_lookup(o.dbo, o.user, o.post[\"lookup\"], lid)\n\n    def post_active(self, o):\n        for lid in o.post.integer_list(\"ids\"):\n            asm3.lookups.update_lookup_retired(o.dbo, o.user, o.post[\"lookup\"], lid, 0)\n\n    def post_inactive(self, o):\n        for lid in o.post.integer_list(\"ids\"):\n            asm3.lookups.update_lookup_retired(o.dbo, o.user, o.post[\"lookup\"], lid, 1)\n\nclass lostanimal(JSONEndpoint):\n    url = \"lostanimal\"\n    js_module = \"lostfound\"\n    get_permissions = asm3.users.VIEW_LOST_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.lostfound.get_lostanimal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        recname = \"%s %s %s\" % (a.AGEGROUP, a.SPECIESNAME, a.OWNERNAME)\n        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, \"animallost\", a[\"ID\"], recname)\n        asm3.al.debug(\"open lost animal %s\" % recname, \"code.foundanimal\", dbo)\n        return {\n            \"animal\": a,\n            \"name\": \"lostanimal\",\n            \"additional\": asm3.additional.get_additional_fields(dbo, a[\"ID\"], \"lostanimal\"),\n            \"agegroups\": asm3.configuration.age_groups(dbo),\n            \"audit\": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, \"animallost\", a[\"ID\"]) or [],\n            \"breeds\": asm3.lookups.get_breeds_by_species(dbo),\n            \"colours\": asm3.lookups.get_basecolours(dbo),\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"lostanimal\"),\n            \"templatesemail\": asm3.template.get_document_templates(dbo, \"email\"),\n            \"tabcounts\": asm3.lostfound.get_lostanimal_satellite_counts(dbo, a[\"LFID\"])[0]\n        }\n\n    def post_save(self, o):\n        self.check(asm3.users.CHANGE_LOST_ANIMAL)\n        asm3.lostfound.update_lostanimal_from_form(o.dbo, o.post, o.user)\n\n    def post_email(self, o):\n        self.check(asm3.users.EMAIL_PERSON)\n        asm3.lostfound.send_email_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_LOST_ANIMAL)\n        asm3.lostfound.delete_lostanimal(o.dbo, o.user, o.post.integer(\"id\"))\n\nclass lostanimal_diary(JSONEndpoint):\n    url = \"lostanimal_diary\"\n    js_module = \"diary\"\n    get_permissions = asm3.users.VIEW_DIARY\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.lostfound.get_lostanimal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        diaries = asm3.diary.get_diaries(dbo, asm3.diary.LOSTANIMAL, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d diaries for lost animal %s %s %s\" % (len(diaries), a[\"AGEGROUP\"], a[\"SPECIESNAME\"], a[\"OWNERNAME\"]), \"code.foundanimal_diary\", dbo)\n        return {\n            \"rows\": diaries,\n            \"animal\": a,\n            \"tabcounts\": asm3.lostfound.get_lostanimal_satellite_counts(dbo, a[\"LFID\"])[0],\n            \"name\": \"lostanimal_diary\",\n            \"linkid\": a[\"LFID\"],\n            \"linktypeid\": asm3.diary.LOSTANIMAL,\n            \"forlist\": asm3.users.get_users_and_roles(dbo)\n        }\n\nclass lostanimal_find(JSONEndpoint):\n    url = \"lostanimal_find\"\n    js_module = \"lostfound_find\"\n    get_permissions = asm3.users.VIEW_LOST_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        return {\n            \"agegroups\": asm3.configuration.age_groups(dbo),\n            \"name\": \"lostanimal_find\",\n            \"colours\": asm3.lookups.get_basecolours(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"breeds\": asm3.lookups.get_breeds_by_species(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"mode\": \"lost\"\n        }\n\nclass lostanimal_find_results(JSONEndpoint):\n    url = \"lostanimal_find_results\"\n    js_module = \"lostfound_find_results\"\n    get_permissions = asm3.users.VIEW_LOST_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        results = asm3.lostfound.get_lostanimal_find_advanced(dbo, o.post.data, asm3.configuration.record_search_limit(dbo))\n        add = None\n        if len(results) > 0: \n            add = asm3.additional.get_additional_fields_ids(dbo, results, \"lostanimal\")\n        asm3.al.debug(\"found %d results for %s\" % (len(results), self.query()), \"code.lostanimal_find_results\", dbo)\n        return {\n            \"additional\": add,\n            \"rows\": results,\n            \"name\": \"lostanimal_find_results\"\n        }\n\nclass lostanimal_log(JSONEndpoint):\n    url = \"lostanimal_log\"\n    js_module = \"log\"\n    get_permissions = asm3.users.VIEW_LOG\n\n    def controller(self, o):\n        dbo = o.dbo\n        logfilter = o.post.integer(\"filter\")\n        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)\n        a = asm3.lostfound.get_lostanimal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        logs = asm3.log.get_logs(dbo, asm3.log.LOSTANIMAL, o.post.integer(\"id\"), logfilter)\n        return {\n            \"name\": \"lostanimal_log\",\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.log.LOSTANIMAL,\n            \"filter\": logfilter,\n            \"rows\": logs,\n            \"animal\": a,\n            \"tabcounts\": asm3.lostfound.get_lostanimal_satellite_counts(dbo, a[\"LFID\"])[0],\n            \"logtypes\": asm3.lookups.get_log_types(dbo)\n        }\n\nclass lostanimal_media(JSONEndpoint):\n    url = \"lostanimal_media\"\n    js_module = \"media\"\n    get_permissions = asm3.users.VIEW_MEDIA\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.lostfound.get_lostanimal(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        m = asm3.media.get_media(dbo, asm3.media.LOSTANIMAL, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d media for lost animal %s %s %s\" % (len(m), a[\"AGEGROUP\"], a[\"SPECIESNAME\"], a[\"OWNERNAME\"]), \"code.foundanimal_media\", dbo)\n        return {\n            \"media\": m,\n            \"animal\": a,\n            \"tabcounts\": asm3.lostfound.get_lostanimal_satellite_counts(dbo, a[\"LFID\"])[0],\n            \"showpreferred\": True,\n            \"canwatermark\": False,\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.media.LOSTANIMAL,\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"name\": self.url, \n            \"resizeimagespec\": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, \"\"),\n            \"templates\": asm3.template.get_document_templates(dbo, \"email\"),\n            \"sigtype\": ELECTRONIC_SIGNATURES\n        }\n\nclass lostanimal_new(JSONEndpoint):\n    url = \"lostanimal_new\"\n    js_module = \"lostfound_new\"\n    get_permissions = asm3.users.ADD_LOST_ANIMAL\n    post_permissions = asm3.users.ADD_LOST_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        return {\n            \"agegroups\": asm3.configuration.age_groups(dbo),\n            \"additional\": asm3.additional.get_additional_fields(dbo, 0, \"lostanimal\"),\n            \"colours\": asm3.lookups.get_basecolours(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"breeds\": asm3.lookups.get_breeds_by_species(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"name\": \"lostanimal_new\"\n        }\n\n    def post_all(self, o):\n        return str(asm3.lostfound.insert_lostanimal_from_form(o.dbo, o.post, o.user))\n\nclass lostfound_match(ASMEndpoint):\n    url = \"lostfound_match\"\n    get_permissions = ( asm3.users.VIEW_LOST_ANIMAL, asm3.users.VIEW_FOUND_ANIMAL, asm3.users.VIEW_PERSON )\n\n    def content(self, o):\n        dbo = o.dbo\n        post = o.post\n        lostanimalid = post.integer(\"lostanimalid\")\n        foundanimalid = post.integer(\"foundanimalid\")\n        animalid = post.integer(\"animalid\")\n        self.content_type(\"text/html\")\n        self.cache_control(0)\n        # If no parameters have been given, use the cached daily copy of the match report\n        if lostanimalid == 0 and foundanimalid == 0 and animalid == 0:\n            asm3.al.debug(\"no parameters given, using cached report\", \"code.lostfound_match\", dbo)\n            return asm3.cachedisk.get(\"lostfound_report\", dbo.database)\n        else:\n            asm3.al.debug(\"match lost=%d, found=%d, animal=%d\" % (lostanimalid, foundanimalid, animalid), \"code.lostfound_match\", dbo)\n            return asm3.lostfound.match_report(dbo, o.user, lostanimalid, foundanimalid, animalid)\n\nclass mailmerge(JSONEndpoint):\n    url = \"mailmerge\"\n    get_permissions = asm3.users.MAIL_MERGE\n    post_permissions = asm3.users.MAIL_MERGE\n\n    def controller(self, o):\n        l = o.locale\n        dbo = o.dbo\n        post = o.post\n        crid = post.integer(\"id\")\n        crit = asm3.reports.get_criteria(dbo, crid)\n        title = asm3.reports.get_title(dbo, crid)\n        # If this mail merge takes criteria and none were supplied, go to the criteria screen to get them\n        if len(crit) != 0 and post[\"hascriteria\"] == \"\": self.redirect(\"report_criteria?id=%s&target=mailmerge\" % crid)\n        asm3.al.debug(\"entering mail merge selection mode for %d\" % post.integer(\"id\"), \"code.mailmerge\", dbo)\n        p = asm3.reports.get_criteria_params(dbo, crid, post)\n        rows, cols = asm3.reports.execute_query(dbo, crid, o.user, p)\n        if rows is None: rows = []\n        asm3.al.debug(\"got merge rows (%d items)\" % len(rows), \"code.mailmerge\", dbo)\n        # construct a list of field tokens for the email helper\n        fields = []\n        if len(rows) > 0:\n            for fname in sorted(rows[0].keys()):\n                fields.append(fname)\n        # send the selection form\n        title = _(\"Mail Merge - {0}\", l).format(title)\n        return {\n            \"title\": title,\n            \"fields\": fields,\n            \"mergeparams\": asm3.utils.json(p),\n            \"mergereport\": crid,\n            \"mergetitle\": title.replace(\" \", \"_\").replace(\"\\\"\", \"\").replace(\"'\", \"\").lower(),\n            \"numrows\": len(rows),\n            \"hasemail\": \"EMAILADDRESS\" in fields,\n            \"hasaddress\": \"OWNERNAME\" in fields and \"OWNERADDRESS\" in fields and \"OWNERTOWN\" in fields and \"OWNERCOUNTY\" in fields and \"OWNERPOSTCODE\" in fields,\n            \"templates\": asm3.template.get_document_templates(dbo, \"mailmerge\")\n        }\n   \n    def post_email(self, o):\n        dbo = o.dbo\n        post = o.post\n        mergeparams = \"\"\n        if post[\"mergeparams\"] != \"\": mergeparams = asm3.utils.json_parse(post[\"mergeparams\"])\n        rows, cols = asm3.reports.execute_query(dbo, post.integer(\"mergereport\"), o.user, mergeparams)\n        fromadd = post[\"from\"]\n        subject = post[\"subject\"]\n        body = post[\"body\"]\n        if asm3.configuration.audit_on_send_email(dbo):\n            addresses = [r[\"EMAILADDRESS\"] for r in rows]\n            asm3.audit.email(dbo, o.user, fromadd, addresses, \"\", \"\", subject, body)\n        asm3.utils.send_bulk_email(dbo, fromadd, subject, body, rows, \"html\")\n\n    def post_document(self, o):\n        dbo = o.dbo\n        post = o.post\n        mergeparams = \"\"\n        if post[\"mergeparams\"] != \"\": mergeparams = asm3.utils.json_parse(post[\"mergeparams\"])\n        rows, cols = asm3.reports.execute_query(dbo, post.integer(\"mergereport\"), o.user, mergeparams)\n        templateid = post.integer(\"templateid\")\n        templatecontent = asm3.template.get_document_template_content(dbo, templateid)\n        templatename = asm3.template.get_document_template_name(dbo, templateid)\n        if not templatename.endswith(\".html\"):\n            raise asm3.utils.ASMValidationError(\"Only html templates are allowed\")\n        # Generate a document from the template for each row\n        org_tags = asm3.wordprocessor.org_tags(dbo, o.user)\n        c = []\n        for d in rows:\n            c.append( asm3.wordprocessor.substitute_tags(asm3.utils.bytes2str(templatecontent), asm3.wordprocessor.append_tags(d, org_tags)) )\n        content = '<div class=\"mce-pagebreak\" style=\"page-break-before: always; clear: both; border: 0\">&nbsp;</div>'.join(c)\n        self.content_type(\"text/html\")\n        self.cache_control(0)\n        return asm3.html.tinymce_header(templatename, \"document_edit.js\", jswindowprint=True, pdfenabled=False, readonly=True) + \\\n            asm3.html.tinymce_main(o.locale, \"\", recid=0, linktype=\"\", \\\n                dtid=\"\", content=asm3.utils.escape_tinymce(content))\n\n    def post_labels(self, o):\n        dbo = o.dbo\n        post = o.post\n        mergeparams = \"\"\n        if post[\"mergeparams\"] != \"\": mergeparams = asm3.utils.json_parse(post[\"mergeparams\"])\n        rows, cols = asm3.reports.execute_query(dbo, post.integer(\"mergereport\"), o.user, mergeparams)\n        self.content_type(\"application/pdf\")\n        disposition = asm3.configuration.pdf_inline(dbo) and \"inline; filename=%s\" or \"attachment; filename=%s\"\n        self.header(\"Content-Disposition\", disposition % post[\"mergetitle\"] + \".pdf\")\n        return asm3.utils.generate_label_pdf(dbo, o.locale, rows, post[\"papersize\"], post[\"units\"], post[\"fontpt\"], \n            post.floating(\"hpitch\"), post.floating(\"vpitch\"), \n            post.floating(\"width\"), post.floating(\"height\"), \n            post.floating(\"lmargin\"), post.floating(\"tmargin\"),\n            post.integer(\"cols\"), post.integer(\"rows\"))\n\n    def post_csv(self, o):\n        dbo = o.dbo\n        post = o.post\n        mergeparams = \"\"\n        if post[\"mergeparams\"] != \"\": mergeparams = asm3.utils.json_parse(post[\"mergeparams\"])\n        rows, cols = asm3.reports.execute_query(dbo, post.integer(\"mergereport\"), o.user, mergeparams)\n        self.content_type(\"text/csv\")\n        self.header(\"Content-Disposition\", \"attachment; filename=\" + post[\"mergetitle\"] + \".csv\")\n        includeheader = 1 == post.boolean(\"includeheader\")\n        return asm3.utils.csv(o.locale, rows, cols, includeheader)\n\n    def post_preview(self, o):\n        dbo = o.dbo\n        post = o.post\n        mergeparams = \"\"\n        if post[\"mergeparams\"] != \"\": mergeparams = asm3.utils.json_parse(post[\"mergeparams\"])\n        rows, cols = asm3.reports.execute_query(dbo, post.integer(\"mergereport\"), o.user, mergeparams)\n        asm3.al.debug(\"returning preview rows for %d [%s]\" % (post.integer(\"mergereport\"), post[\"mergetitle\"]), \"code.mailmerge\", dbo)\n        return asm3.utils.json(rows)\n\n    def post_recipients(self, o):\n        dbo = o.dbo\n        post = o.post\n        mergeparams = \"\"\n        if post[\"mergeparams\"] != \"\": mergeparams = asm3.utils.json_parse(post[\"mergeparams\"])\n        rows, cols = asm3.reports.execute_query(dbo, post.integer(\"mergereport\"), o.user, mergeparams)\n        emails = [ x.EMAILADDRESS for x in rows if x and x.EMAILADDRESS is not None and x.EMAILADDRESS != \"\" ]\n        return \", \".join(emails)\n\nclass maint_db_stats(ASMEndpoint):\n    url = \"maint_db_stats\"\n\n    def content(self, o):\n        self.content_type(\"text/plain\")\n        self.cache_control(0)\n        s = o.dbo.stats()\n        return \"first record added on %s\\n\" \\\n            \"%s shelter animals\\n\" \\\n            \"%s animals\\n\" \\\n            \"%s people\\n\" \\\n            \"%s movements\\n\" \\\n            \"%s media (%s MB)\\n\" \\\n            \"%s jpg (%s MB)\\n\" \\\n            \"%s pdf (%s MB)\\n\" % (\n                s.firstrecord,\n                s.shelteranimals,\n                s.totalanimals,\n                s.totalpeople,\n                s.totalmovements,\n                s.totalmedia, s.mediasize,\n                s.totaljpg, s.jpgsize,\n                s.totalpdf, s.pdfsize\n            )\n\nclass maint_deps(ASMEndpoint):\n    url = \"maint_deps\"\n\n    def content(self, o):\n        self.content_type(\"text/plain\")\n        self.cache_control(0)\n        return \"web.py %s\" % web.__version__\n\nclass maint_error(ASMEndpoint):\n    url = \"maint_error\"\n\n    def content(self, o):\n        return 1 / 0 # Test error handling\n\nclass maint_latency(JSONEndpoint):\n    url = \"maint_latency\"\n\n    def controller(self, o):\n        return {}\n\n    def post_all(self, o):\n        self.content_type(\"text/plain\")\n        self.cache_control(0)\n        return \"pong\"\n\nclass maint_petfinder(ASMEndpoint):\n    url = \"maint_petfinder\"\n\n    def content(self, o):\n        \"\"\" Clears all PetFinder listings \"\"\"\n        self.content_type(\"text/plain\")\n        self.cache_control(0)\n        try:\n            pc = asm3.publishers.base.PublishCriteria(asm3.configuration.publisher_presets(o.dbo))\n            p = asm3.publishers.petfinder.PetFinderPublisher(o.dbo, pc)\n            return p.clearListings()\n        except Exception as err:\n            return str(err)\n\nclass maint_time(ASMEndpoint):\n    url = \"maint_time\"\n\n    def content(self, o):\n        self.content_type(\"text/plain\")\n        self.cache_control(0)\n        return \"Time now is %s. TZ=%s DST=%s (%s)\" % \\\n            ( o.dbo.now(), o.dbo.timezone, o.dbo.timezone_dst == 1 and \"ON\" or \"OFF\", get_dst(o.locale) )\n\nclass maint_undelete(JSONEndpoint):\n    url = \"maint_undelete\"\n    get_permissions = asm3.users.USE_SQL_INTERFACE\n\n    def controller(self, o):\n        d = asm3.audit.get_deletions(o.dbo)\n        asm3.al.debug(\"got %d deleted top level records\" % len(d), \"code.undelete\", o.dbo)\n        return { \"rows\": d }\n\n    def post_undelete(self, o):\n        self.check(asm3.users.USE_SQL_INTERFACE)\n        for i in o.post[\"ids\"].split(\",\"):\n            if i == \"\": continue\n            tablename, iid = i.split(\":\")\n            asm3.audit.undelete(o.dbo, asm3.utils.cint(iid), tablename)\n\nclass medical(JSONEndpoint):\n    url = \"medical\"\n    get_permissions = asm3.users.VIEW_MEDICAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        offset = o.post[\"offset\"]\n        if offset == \"\": offset = \"m365\"\n        med = asm3.medical.get_treatments_outstanding(dbo, offset, o.locationfilter, o.siteid, o.visibleanimalids)\n        profiles = asm3.medical.get_profiles(dbo)\n        asm3.al.debug(\"got %d medical treatments\" % len(med), \"code.medical\", dbo)\n        return {\n            \"profiles\": profiles,\n            \"rows\": med,\n            \"overlimit\": 0,\n            \"newmed\": o.post.integer(\"newmed\") == 1,\n            \"name\": \"medical\",\n            \"stockitems\": asm3.stock.get_stock_items(dbo),\n            \"stockusagetypes\": asm3.lookups.get_stock_usage_types(dbo),\n            \"users\": asm3.users.get_users(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_MEDICAL)\n        asm3.medical.insert_regimen_from_form(o.dbo, o.user, o.post)\n\n    def post_createbulk(self, o):\n        self.check(asm3.users.ADD_MEDICAL)\n        for animalid in o.post.integer_list(\"animals\"):\n            o.post.data[\"animal\"] = str(animalid)\n            asm3.medical.insert_regimen_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_MEDICAL)\n        asm3.medical.update_regimen_from_form(o.dbo, o.user, o.post)\n\n    def post_delete_regimen(self, o):\n        self.check(asm3.users.DELETE_MEDICAL)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.medical.delete_regimen(o.dbo, o.user, mid)\n\n    def post_delete_treatment(self, o):\n        self.check(asm3.users.DELETE_MEDICAL)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.medical.delete_treatment(o.dbo, o.user, mid)\n\n    def post_get_profile(self, o):\n        return asm3.utils.json([asm3.medical.get_profile(o.dbo, o.post.integer(\"profileid\"))])\n\n    def post_given(self, o):\n        self.check(asm3.users.BULK_COMPLETE_MEDICAL)\n        post = o.post\n        newdate = post.date(\"newdate\")\n        vet = post.integer(\"givenvet\")\n        by = post[\"givenby\"]\n        comments = post[\"treatmentcomments\"]\n        for mid in post.integer_list(\"ids\"):\n            asm3.medical.update_treatment_given(o.dbo, o.user, mid, newdate, by, vet, comments)\n        if post.integer(\"item\") != -1:\n            asm3.stock.deduct_stocklevel_from_form(o.dbo, o.user, post)\n\n    def post_undo(self, o):\n        self.check(asm3.users.BULK_COMPLETE_MEDICAL)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.medical.update_treatment_given(o.dbo, o.user, mid, None)\n\n    def post_required(self, o):\n        self.check(asm3.users.BULK_COMPLETE_MEDICAL)\n        newdate = o.post.date(\"newdate\")\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.medical.update_treatment_required(o.dbo, o.user, mid, newdate)\n\nclass medicalprofile(JSONEndpoint):\n    url = \"medicalprofile\"\n    get_permissions = asm3.users.VIEW_MEDICAL\n\n    def controller(self, o):\n        med = asm3.medical.get_profiles(o.dbo)\n        asm3.al.debug(\"got %d medical profiles\" % len(med), \"code.medical_profile\", o.dbo)\n        return {\n            \"rows\": med\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_MEDICAL)\n        asm3.medical.insert_profile_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_MEDICAL)\n        asm3.medical.update_profile_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_MEDICAL)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.medical.delete_profile(o.dbo, o.user, mid)\n\nclass move_adopt(JSONEndpoint):\n    url = \"move_adopt\"\n    get_permissions = asm3.users.ADD_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        return {\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"accounts\": asm3.financial.get_accounts(dbo, onlybank=True),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\"),\n            \"templatesemail\": asm3.template.get_document_templates(dbo, \"email\")\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_MOVEMENT)\n        checkout = o.post.boolean(\"checkoutcreate\")\n        movementid = str(asm3.movement.insert_adoption_from_form(o.dbo, o.user, o.post, create_payments = not checkout))\n        if checkout:\n            l = o.dbo.locale\n            body = asm3.wordprocessor.generate_movement_doc(o.dbo, o.post.integer(\"emailtemplateid\"), asm3.utils.cint(movementid), o.user)\n            d = {\n                \"id\":       movementid,\n                \"animalid\": o.post[\"animal\"],\n                \"personid\": o.post[\"person\"],\n                \"templateid\": o.post[\"templateid\"],\n                \"feetypeid\": o.post[\"feetypeid\"],\n                \"from\":     asm3.configuration.email(o.dbo),\n                \"to\":       o.post[\"emailaddress\"],\n                \"subject\":  _(\"Adoption Checkout\", l),\n                \"body\":     body\n            }\n            asm3.movement.send_adoption_checkout(o.dbo, o.user, asm3.utils.PostedData(d, o.dbo.locale))\n        return movementid\n\n    def post_cost(self, o):\n        dbo = o.dbo\n        post = o.post\n        l = o.locale\n        self.check(asm3.users.VIEW_COST)\n        dailyboardcost = asm3.animal.get_daily_boarding_cost(dbo, post.integer(\"id\"))\n        dailyboardcostdisplay = format_currency(l, dailyboardcost)\n        daysonshelter = asm3.animal.get_days_on_shelter(dbo, post.integer(\"id\"))\n        totaldisplay = format_currency(l, dailyboardcost * daysonshelter)\n        return totaldisplay + \"||\" + \\\n            _(\"On shelter for {0} days, daily cost {1}, cost record total <b>{2}</b>\", l).format(daysonshelter, dailyboardcostdisplay, totaldisplay)\n    \n    def post_donationdefault(self, o):\n        return asm3.lookups.get_donation_default(o.dbo, o.post.integer(\"donationtype\"))\n\n    def post_insurance(self, o):\n        return asm3.movement.generate_insurance_number(o.dbo)\n\nclass move_book_foster(JSONEndpoint):\n    url = \"move_book_foster\"\n    js_module = \"movements\"\n    get_permissions = asm3.users.VIEW_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        movements = asm3.movement.get_movements(dbo, asm3.movement.FOSTER)\n        movements = asm3.animal.remove_nonvisible_animals(movements, o.visibleanimalids)\n        asm3.al.debug(\"got %d movements\" % len(movements), \"code.move_book_foster\", dbo)\n        return {\n            \"name\": \"move_book_foster\",\n            \"rows\": movements,\n            \"movementtypes\": asm3.lookups.get_movement_types(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"returncategories\": asm3.lookups.get_entryreasons(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\")\n        }\n\nclass move_book_recent_adoption(JSONEndpoint):\n    url = \"move_book_recent_adoption\"\n    js_module = \"movements\"\n    get_permissions = asm3.users.VIEW_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        movements = asm3.movement.get_recent_adoptions(dbo)\n        asm3.al.debug(\"got %d movements\" % len(movements), \"code.move_book_recent_adoption\", dbo)\n        return {\n            \"name\": \"move_book_recent_adoption\",\n            \"rows\": movements,\n            \"logtypes\": asm3.lookups.get_log_types(dbo), \n            \"movementtypes\": asm3.lookups.get_movement_types(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"returncategories\": asm3.lookups.get_entryreasons(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\")\n        }\n\nclass move_book_recent_other(JSONEndpoint):\n    url = \"move_book_recent_other\"\n    js_module = \"movements\"\n    get_permissions = asm3.users.VIEW_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        movements = asm3.movement.get_recent_nonfosteradoption(dbo)\n        asm3.al.debug(\"got %d movements\" % len(movements), \"code.move_book_recent_other\", dbo)\n        return {\n            \"name\": \"move_book_recent_other\",\n            \"rows\": movements,\n            \"movementtypes\": asm3.lookups.get_movement_types(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"returncategories\": asm3.lookups.get_entryreasons(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\")\n        }\n\nclass move_book_recent_transfer(JSONEndpoint):\n    url = \"move_book_recent_transfer\"\n    js_module = \"movements\"\n    get_permissions = asm3.users.VIEW_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        movements = asm3.movement.get_recent_transfers(dbo)\n        asm3.al.debug(\"got %d movements\" % len(movements), \"code.move_book_recent_transfer\", dbo)\n        return {\n            \"name\": \"move_book_recent_transfer\",\n            \"rows\": movements,\n            \"movementtypes\": asm3.lookups.get_movement_types(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"returncategories\": asm3.lookups.get_entryreasons(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\")\n        }\n\nclass move_book_reservation(JSONEndpoint):\n    url = \"move_book_reservation\"\n    js_module = \"movements\"\n    get_permissions = asm3.users.VIEW_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        movements = asm3.movement.get_active_reservations(dbo)\n        asm3.al.debug(\"got %d movements\" % len(movements), \"code.move_book_reservation\", dbo)\n        return {\n            \"name\": \"move_book_reservation\",\n            \"rows\": movements,\n            \"movementtypes\": asm3.lookups.get_movement_types(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"returncategories\": asm3.lookups.get_entryreasons(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\")\n        }\n\nclass move_book_retailer(JSONEndpoint):\n    url = \"move_book_retailer\"\n    js_module = \"movements\"\n    get_permissions = asm3.users.VIEW_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        movements = asm3.movement.get_movements(dbo, asm3.movement.RETAILER)\n        asm3.al.debug(\"got %d movements\" % len(movements), \"code.move_book_retailer\", dbo)\n        return {\n            \"name\": \"move_book_retailer\",\n            \"rows\": movements,\n            \"logtypes\": asm3.lookups.get_log_types(dbo), \n            \"movementtypes\": asm3.lookups.get_movement_types(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"returncategories\": asm3.lookups.get_entryreasons(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\")\n        }\n\nclass move_book_soft_release(JSONEndpoint):\n    url = \"move_book_soft_release\"\n    js_module = \"movements\"\n    get_permissions = asm3.users.VIEW_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        movements = asm3.movement.get_soft_releases(dbo)\n        asm3.al.debug(\"got %d movements\" % len(movements), \"code.move_book_soft_release\", dbo)\n        return {\n            \"name\": \"move_book_soft_release\",\n            \"rows\": movements,\n            \"movementtypes\": asm3.lookups.get_movement_types(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"returncategories\": asm3.lookups.get_entryreasons(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\")\n        }\n\nclass move_book_trial_adoption(JSONEndpoint):\n    url = \"move_book_trial_adoption\"\n    js_module = \"movements\"\n    get_permissions = asm3.users.VIEW_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        movements = asm3.movement.get_trial_adoptions(dbo)\n        asm3.al.debug(\"got %d movements\" % len(movements), \"code.move_book_trial_adoption\", dbo)\n        return {\n            \"name\": \"move_book_trial_adoption\",\n            \"rows\": movements,\n            \"logtypes\": asm3.lookups.get_log_types(dbo), \n            \"movementtypes\": asm3.lookups.get_movement_types(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"returncategories\": asm3.lookups.get_entryreasons(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\")\n        }\n\nclass move_book_unneutered(JSONEndpoint):\n    url = \"move_book_unneutered\"\n    js_module = \"movements\"\n    get_permissions = asm3.users.VIEW_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        movements = asm3.movement.get_recent_unneutered_adoptions(dbo)\n        asm3.al.debug(\"got %d movements\" % len(movements), \"code.move_book_unneutered\", dbo)\n        return {\n            \"name\": \"move_book_unneutered\",\n            \"rows\": movements,\n            \"logtypes\": asm3.lookups.get_log_types(dbo), \n            \"movementtypes\": asm3.lookups.get_movement_types(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"returncategories\": asm3.lookups.get_entryreasons(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\")\n        }\n\nclass move_deceased(JSONEndpoint):\n    url = \"move_deceased\"\n    get_permissions = asm3.users.CHANGE_ANIMAL\n    post_permissions = asm3.users.CHANGE_ANIMAL\n\n    def controller(self, o):\n        return {\n            \"deathreasons\": asm3.lookups.get_deathreasons(o.dbo),\n            \"stockitems\": asm3.stock.get_stock_items(o.dbo),\n            \"stockusagetypes\": asm3.lookups.get_stock_usage_types(o.dbo)\n        }\n\n    def post_create(self, o):\n        asm3.animal.update_deceased_from_form(o.dbo, o.user, o.post)\n        if o.post.integer(\"item\") != -1:\n            asm3.stock.deduct_stocklevel_from_form(o.dbo, o.user, o.post)\n\nclass move_foster(JSONEndpoint):\n    url = \"move_foster\"\n    get_permissions = asm3.users.ADD_MOVEMENT\n    post_permissions = asm3.users.ADD_MOVEMENT\n\n    def controller(self, o):\n        return {}\n\n    def post_create(self, o):\n        return str(asm3.movement.insert_foster_from_form(o.dbo, o.user, o.post))\n\nclass move_gendoc(JSONEndpoint):\n    url = \"move_gendoc\"\n    get_permissions = asm3.users.GENERATE_DOCUMENTS\n\n    def controller(self, o):\n        return {\n            \"message\": o.post[\"message\"],\n            \"id\": o.post[\"id\"],\n            \"linktype\": o.post[\"linktype\"],\n            \"templates\": asm3.template.get_document_templates(o.dbo, \"movement\")\n        }\n\nclass move_reclaim(JSONEndpoint):\n    url = \"move_reclaim\"\n    get_permissions = asm3.users.ADD_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        return {\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"accounts\": asm3.financial.get_accounts(dbo, onlybank=True),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_MOVEMENT)\n        return str(asm3.movement.insert_reclaim_from_form(o.dbo, o.user, o.post))\n\n    def post_cost(self, o):\n        l = o.locale\n        dbo = o.dbo\n        post = o.post\n        self.check(asm3.users.VIEW_COST)\n        dailyboardcost = asm3.animal.get_daily_boarding_cost(dbo, post.integer(\"id\"))\n        dailyboardcostdisplay = format_currency(l, dailyboardcost)\n        daysonshelter = asm3.animal.get_days_on_shelter(dbo, post.integer(\"id\"))\n        totaldisplay = format_currency(l, dailyboardcost * daysonshelter)\n        return totaldisplay + \"||\" + _(\"On shelter for {0} days, daily cost {1}, cost record total <b>{2}</b>\", l).format(daysonshelter, dailyboardcostdisplay, totaldisplay)\n\n    def post_donationdefault(self, o):\n        return asm3.lookups.get_donation_default(o.dbo, o.post.integer(\"donationtype\"))\n\nclass move_reserve(JSONEndpoint):\n    url = \"move_reserve\"\n    get_permissions = asm3.users.ADD_MOVEMENT\n    post_permissions = asm3.users.ADD_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        return {\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"accounts\": asm3.financial.get_accounts(dbo, onlybank=True),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo)\n        }\n\n    def post_create(self, o):\n        return str(asm3.movement.insert_reserve_from_form(o.dbo, o.user, o.post))\n\nclass move_retailer(JSONEndpoint):\n    url = \"move_retailer\"\n    get_permissions = asm3.users.ADD_MOVEMENT\n    post_permissions = asm3.users.ADD_MOVEMENT\n\n    def controller(self, o):\n        return {}\n\n    def post_create(self, o):\n        return str(asm3.movement.insert_retailer_from_form(o.dbo, o.user, o.post))\n\nclass move_transfer(JSONEndpoint):\n    url = \"move_transfer\"\n    get_permissions = asm3.users.ADD_MOVEMENT\n    post_permissions = asm3.users.ADD_MOVEMENT\n\n    def controller(self, o):\n        return {}\n\n    def post_create(self, o):\n        return str(asm3.movement.insert_transfer_from_form(o.dbo, o.user, o.post))\n\nclass movement(JSONEndpoint):\n    url = \"movement\"\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_MOVEMENT)\n        return asm3.movement.insert_movement_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_MOVEMENT)\n        asm3.movement.update_movement_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_MOVEMENT)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.movement.delete_movement(o.dbo, o.user, mid)\n\n    def post_insurance(self, o):\n        return asm3.movement.generate_insurance_number(o.dbo)\n\n    def post_trialfull(self, o):\n        self.check(asm3.users.CHANGE_MOVEMENT)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.movement.trial_to_full_adoption(o.dbo, o.user, mid)\n\n    def post_checkout(self, o):\n        asm3.movement.send_adoption_checkout(o.dbo, o.user, o.post)\n\nclass onlineform_incoming(JSONEndpoint):\n    url = \"onlineform_incoming\"\n    get_permissions = asm3.users.VIEW_INCOMING_FORMS\n\n    def controller(self, o):\n        headers = asm3.onlineform.get_onlineformincoming_headers(o.dbo)\n        asm3.al.debug(\"got %d submitted headers\" % len(headers), \"code.onlineform_incoming\", o.dbo)\n        return {\n            \"rows\": headers\n        }\n\n    def post_view(self, o):\n        self.check(asm3.users.VIEW_INCOMING_FORMS)\n        return asm3.onlineform.get_onlineformincoming_html(o.dbo, o.post.integer(\"collationid\"), include_raw=False)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_INCOMING_FORMS)\n        for did in o.post.integer_list(\"ids\"):\n            asm3.onlineform.delete_onlineformincoming(o.dbo, o.user, did)\n\n    def post_attachanimal(self, o):\n        dbo = o.dbo\n        collationid = o.post.integer(\"collationid\")\n        animalid = o.post.integer(\"animalid\")\n        asm3.onlineform.attach_form(dbo, o.user, asm3.media.ANIMAL, animalid, collationid)\n        return animalid\n\n    def post_attachanimalbyname(self, o):\n        self.check(asm3.users.ADD_MEDIA)\n        rv = []\n        for pid in o.post.integer_list(\"ids\"):\n            collationid, animalid, animalname = asm3.onlineform.attach_animal(o.dbo, o.user, pid)\n            rv.append(\"%d|%d|%s\" % (collationid, animalid, animalname))\n        return \"^$\".join(rv)\n\n    def post_attachperson(self, o):\n        dbo = o.dbo\n        collationid = o.post.integer(\"collationid\")\n        personid = o.post.integer(\"personid\")\n        asm3.onlineform.attach_form(dbo, o.user, asm3.media.PERSON, personid, collationid)\n        return personid \n\n    def post_animal(self, o):\n        self.check(asm3.users.ADD_MEDIA)\n        user = \"form/%s\" % o.user\n        rv = []\n        for pid in o.post.integer_list(\"ids\"):\n            collationid, animalid, animalname, status = asm3.onlineform.create_animal(o.dbo, user, pid)\n            rv.append(\"%d|%d|%s|%s\" % (collationid, animalid, animalname, status))\n        return \"^$\".join(rv)\n\n    def post_person(self, o):\n        self.check(asm3.users.ADD_PERSON)\n        user = \"form/%s\" % o.user\n        rv = []\n        for pid in o.post.integer_list(\"ids\"):\n            collationid, personid, personname, status = asm3.onlineform.create_person(o.dbo, user, pid)\n            rv.append(\"%d|%d|%s|%s\" % (collationid, personid, personname, status))\n        return \"^$\".join(rv)\n\n    def post_lostanimal(self, o):\n        self.check(asm3.users.ADD_LOST_ANIMAL)\n        user = \"form/%s\" % o.user\n        rv = []\n        for pid in o.post.integer_list(\"ids\"):\n            collationid, lostanimalid, personname, status = asm3.onlineform.create_lostanimal(o.dbo, user, pid)\n            rv.append(\"%d|%d|%s|%s\" % (collationid, lostanimalid, personname, status))\n        return \"^$\".join(rv)\n\n    def post_foundanimal(self, o):\n        self.check(asm3.users.ADD_FOUND_ANIMAL)\n        user = \"form/%s\" % o.user\n        rv = []\n        for pid in o.post.integer_list(\"ids\"):\n            collationid, foundanimalid, personname, status = asm3.onlineform.create_foundanimal(o.dbo, user, pid)\n            rv.append(\"%d|%d|%s|%s\" % (collationid, foundanimalid, personname, status))\n        return \"^$\".join(rv)\n\n    def post_incident(self, o):\n        self.check(asm3.users.ADD_INCIDENT)\n        user = \"form/%s\" % o.user\n        rv = []\n        for pid in o.post.integer_list(\"ids\"):\n            collationid, incidentid, personname, status = asm3.onlineform.create_animalcontrol(o.dbo, user, pid)\n            rv.append(\"%d|%d|%s|%s\" % (collationid, incidentid, personname, status))\n        return \"^$\".join(rv)\n\n    def post_transport(self, o):\n        self.check(asm3.users.ADD_TRANSPORT)\n        user = \"form/%s\" % o.user\n        rv = []\n        for pid in o.post.integer_list(\"ids\"):\n            collationid, animalid, animalname = asm3.onlineform.create_transport(o.dbo, user, pid)\n            rv.append(\"%d|%d|%s|0\" % (collationid, animalid, animalname))\n        return \"^$\".join(rv)\n\n    def post_waitinglist(self, o):\n        self.check(asm3.users.ADD_WAITING_LIST)\n        user = \"form/%s\" % o.user\n        rv = []\n        for pid in o.post.integer_list(\"ids\"):\n            collationid, wlid, personname, status = asm3.onlineform.create_waitinglist(o.dbo, user, pid)\n            rv.append(\"%d|%d|%s|%s\" % (collationid, wlid, personname, status))\n        return \"^$\".join(rv)\n\nclass onlineform_incoming_print(ASMEndpoint):\n    url = \"onlineform_incoming_print\"\n    get_permissions = asm3.users.VIEW_INCOMING_FORMS\n\n    def content(self, o):\n        self.content_type(\"text/html\")\n        self.cache_control(0)\n        return asm3.onlineform.get_onlineformincoming_html_print(o.dbo, o.post.integer_list(\"ids\"))\n\nclass onlineform(JSONEndpoint):\n    url = \"onlineform\"\n    get_permissions = asm3.users.VIEW_ONLINE_FORMS\n    post_permissions = asm3.users.CHANGE_ONLINE_FORMS\n\n    def controller(self, o):\n        l = o.locale\n        dbo = o.dbo\n        formid = o.post.integer(\"formid\")\n        formname = asm3.onlineform.get_onlineform_name(dbo, formid)\n        fields = asm3.onlineform.get_onlineformfields(dbo, formid)\n        # Escape any angle brackets in raw markup output. This is needed\n        # to target tooltip as a textarea\n        for r in fields:\n            if r[\"FIELDTYPE\"] == asm3.onlineform.FIELDTYPE_RAWMARKUP:\n                r[\"TOOLTIP\"] = asm3.html.escape_angle(r[\"TOOLTIP\"]) \n        title = _(\"Online Form: {0}\", l).format(formname)\n        asm3.al.debug(\"got %d online form fields\" % len(fields), \"code.onlineform\", dbo)\n        return {\n            \"rows\": fields,\n            \"formid\": formid,\n            \"formname\": formname,\n            \"formfields\": asm3.utils.deduplicate_list(asm3.onlineform.FORM_FIELDS),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"title\": title\n        }\n\n    def post_create(self, o):\n        return asm3.onlineform.insert_onlineformfield_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        asm3.onlineform.update_onlineformfield_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        for did in o.post.integer_list(\"ids\"):\n            asm3.onlineform.delete_onlineformfield(o.dbo, o.user, did)\n\n    def post_reindex(self, o):\n        asm3.onlineform.reindex_onlineform(o.dbo, o.user, o.post.integer(\"formid\"))\n        \nclass onlineforms(JSONEndpoint):\n    url = \"onlineforms\"\n    get_permissions = asm3.users.VIEW_ONLINE_FORMS\n\n    def controller(self, o):\n        dbo = o.dbo\n        onlineforms = asm3.onlineform.get_onlineforms(dbo)\n        asm3.al.debug(\"got %d online forms\" % len(onlineforms), \"code.onlineforms\", dbo)\n        return {\n            \"rows\": onlineforms,\n            \"flags\": asm3.lookups.get_person_flags(dbo),\n            \"header\": asm3.onlineform.get_onlineform_header(dbo),\n            \"footer\": asm3.onlineform.get_onlineform_footer(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_ONLINE_FORMS)\n        return asm3.onlineform.insert_onlineform_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_ONLINE_FORMS)\n        asm3.onlineform.update_onlineform_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_ONLINE_FORMS)\n        for did in o.post.integer_list(\"ids\"):\n            asm3.onlineform.delete_onlineform(o.dbo, o.user, did)\n\n    def post_clone(self, o):\n        self.check(asm3.users.ADD_ONLINE_FORMS)\n        for did in o.post.integer_list(\"ids\"):\n            asm3.onlineform.clone_onlineform(o.dbo, o.user, did)\n\n    def post_headfoot(self, o):\n        self.check(asm3.users.CHANGE_ONLINE_FORMS)\n        asm3.onlineform.set_onlineform_headerfooter(o.dbo, o.post[\"header\"], o.post[\"footer\"])\n\n    def post_import(self, o):\n        self.check(asm3.users.ADD_ONLINE_FORMS)\n        fd = asm3.utils.bytes2str(o.post.filedata())\n        if fd.startswith(\"{\"):\n            asm3.onlineform.import_onlineform_json(o.dbo, fd)\n        else:\n            asm3.onlineform.import_onlineform_html(o.dbo, fd)\n        self.redirect(\"onlineforms\")\n\nclass onlineform_json(ASMEndpoint):\n    url = \"onlineform_json\"\n    get_permissions = asm3.users.VIEW_ONLINE_FORMS\n\n    def content(self, o):\n        self.content_type(\"application/json\")\n        return asm3.onlineform.get_onlineform_json(o.dbo, o.post.integer(\"formid\"))\n\nclass onlineform_view(ASMEndpoint):\n    url = \"onlineform_view\"\n    get_permissions = asm3.users.VIEW_ONLINE_FORMS\n\n    def content(self, o):\n        self.content_type(\"text/html\")\n        self.cache_control(0)\n        return asm3.onlineform.get_onlineform_html(o.dbo, o.post.integer(\"formid\"))\n\nclass options(JSONEndpoint):\n    url = \"options\"\n    get_permissions = asm3.users.SYSTEM_OPTIONS\n    post_permissions = asm3.users.SYSTEM_OPTIONS\n\n    def controller(self, o):\n        dbo = o.dbo\n        c = {\n            \"accounts\": asm3.financial.get_accounts(dbo, onlybank=True),\n            \"accountsexp\": asm3.financial.get_accounts(dbo, onlyexpense=True),\n            \"accountsinc\": asm3.financial.get_accounts(dbo, onlyincome=True),\n            \"animalfindcolumns\": asm3.html.json_animalfindcolumns(dbo),\n            \"animalflags\": asm3.lookups.get_animal_flags(dbo),\n            \"breeds\": asm3.lookups.get_breeds(dbo),\n            \"coattypes\": asm3.lookups.get_coattypes(dbo),\n            \"colours\": asm3.lookups.get_basecolours(dbo),\n            \"costtypes\": asm3.lookups.get_costtypes(dbo),\n            \"currencies\": asm3.lookups.CURRENCIES,\n            \"deathreasons\": asm3.lookups.get_deathreasons(dbo),\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"entryreasons\": asm3.lookups.get_entryreasons(dbo),\n            \"foundanimalfindcolumns\": asm3.html.json_foundanimalfindcolumns(dbo),\n            \"incidenttypes\": asm3.lookups.get_incident_types(dbo),\n            \"haspaypal\": PAYPAL_VALIDATE_IPN_URL != \"\",\n            \"incidentfindcolumns\": asm3.html.json_incidentfindcolumns(dbo),\n            \"jurisdictions\": asm3.lookups.get_jurisdictions(dbo),\n            \"locales\": get_locales(),\n            \"locations\": asm3.lookups.get_internal_locations(dbo),\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"lostanimalfindcolumns\": asm3.html.json_lostanimalfindcolumns(dbo),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"personfindcolumns\": asm3.html.json_personfindcolumns(dbo),\n            \"quicklinks\": asm3.html.json_quicklinks(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"sizes\": asm3.lookups.get_sizes(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"themes\": asm3.lookups.VISUAL_THEMES,\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\"),\n            \"testtypes\": asm3.lookups.get_test_types(dbo),\n            \"types\": asm3.lookups.get_animal_types(dbo),\n            \"urgencies\": asm3.lookups.get_urgencies(dbo),\n            \"usersandroles\": asm3.users.get_users_and_roles(dbo),\n            \"vaccinationtypes\": asm3.lookups.get_vaccination_types(dbo),\n            \"waitinglistcolumns\": asm3.html.json_waitinglistcolumns(dbo)\n        }\n        asm3.al.debug(\"lookups loaded\", \"code.options\", dbo)\n        return c\n\n    def post_save(self, o):\n        asm3.configuration.csave(o.dbo, o.user, o.post)\n        self.reload_config()\n\nclass pp_cardcom(ASMEndpoint):\n    \"\"\" \n    Cardcom Indicator endpoint. \n    \"\"\"\n    url = \"pp_cardcom\"\n    check_logged_in = False\n    use_web_input = False\n\n    def content(self, o):\n        asm3.al.debug(\"in pp_cardcom_content\")\n        asm3.al.debug(o.post, \"code.pp_cardcom\")\n        asm3.al.debug(self.query(), \"code.pp_cardcom\")\n\n        querystring = self.query()\n        if querystring.startswith(\"?\"):\n            querystring = querystring[1:]\n        params = asm3.utils.parse_qs(querystring)\n        #ReturnValue contains db-payref. Extract db\n        client_reference_id = dict(params).get(\"ReturnValue\",\"\")\n        dbname = client_reference_id[0:client_reference_id.find(\"-\")]\n        dbo = asm3.db.get_database(dbname)\n        if dbo.database in asm3.db.ERROR_VALUES:\n            asm3.al.error(\"invalid database '%s'\" % dbname, \"code.pp_cardcom\")\n            return\n        try:\n            p = asm3.paymentprocessor.cardcom.Cardcom(dbo)\n            p.receive(querystring)\n        except asm3.paymentprocessor.base.ProcessorError:\n            # ProcessorError subclasses are thrown when there is a problem with the \n            # data PayPal have sent, but we do not want them to send it again.\n            # By catching these and returning a 200 empty body, they will not\n            # send it again.\n            return\n\nclass pp_paypal(ASMEndpoint):\n    \"\"\" \n    PayPal IPN endpoint. If we return anything but 200 OK with an\n    empty body, PayPal will retry the IPN at a later time. \n    Note that PayPal send POSTed data encoded as cp1252, so we\n    parse it ourselves using data_param() instead of web.input (hard-coded to utf-8)\n    \"\"\"\n    url = \"pp_paypal\"\n    check_logged_in = False\n    use_web_input = False\n    data_encoding = \"cp1252\"\n\n    def post_all(self, o):\n        asm3.al.debug(o.data, \"code.pp_paypal\")\n        dbname = self.data_param(\"custom\")\n        dbo = asm3.db.get_database(dbname)\n        if dbo.database in asm3.db.ERROR_VALUES:\n            asm3.al.error(\"invalid database '%s'\" % dbname, \"code.pp_paypal\")\n            return\n        try:\n            p = asm3.paymentprocessor.paypal.PayPal(dbo)\n            p.receive(o.data)\n        except asm3.paymentprocessor.base.ProcessorError:\n            # ProcessorError subclasses are thrown when there is a problem with the \n            # data PayPal have sent, but we do not want them to send it again.\n            # By catching these and returning a 200 empty body, they will not\n            # send it again.\n            return\n\nclass pp_stripe(ASMEndpoint):\n    \"\"\"\n    Stripe webhook endpoint. Like PayPal, a non-200 return code\n    will force a retry.\n    The payload is utf-8 encoded JSON.\n    \"\"\"\n    url = \"pp_stripe\"\n    check_logged_in = False\n    use_web_input = False\n    data_encoding = \"utf-8\"\n\n    def post_all(self, o):\n        asm3.al.debug(o.data, \"code.pp_stripe\")\n        try:\n            j = asm3.utils.json_parse(o.data)\n            if \"client_reference_id\" not in j[\"data\"][\"object\"]:\n                asm3.al.error(\"client_reference_id missing, this is not an ASM requested payment\", \"code.pp_stripe\")\n                return # OK 200, this payment notification is not for us\n            client_reference_id = j[\"data\"][\"object\"][\"client_reference_id\"]\n            dbname = client_reference_id[0:client_reference_id.find(\"-\")]\n            dbo = asm3.db.get_database(dbname)\n            if dbo.database in asm3.db.ERROR_VALUES:\n                asm3.al.error(\"invalid database '%s'\" % dbname, \"code.pp_stripe\")\n                return # OK 200, we can't do anything with this\n        except Exception as e:\n            asm3.al.error(\"failed extracting dbname from client_reference_id: %s\" % e, \"code.pp_stripe\")\n            return\n\n        try:\n            p = asm3.paymentprocessor.stripeh.Stripe(dbo)\n            p.receive(o.data)\n        except asm3.paymentprocessor.base.ProcessorError:\n            # ProcessorError subclasses are thrown when there is a problem with the \n            # data Stripe have sent, but we do not want them to send it again.\n            # By catching these and returning a 200 empty body, they will not\n            # send it again.\n            return\n\nclass person(JSONEndpoint):\n    url = \"person\"\n    get_permissions = asm3.users.VIEW_PERSON\n\n    def controller(self, o):\n        dbo = o.dbo\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: \n            self.notfound()\n        if p.ISSTAFF == 1:\n            self.check(asm3.users.VIEW_STAFF)\n        if p.ISVOLUNTEER == 1:\n            self.check(asm3.users.VIEW_VOLUNTEER)\n        if o.siteid != 0 and p.SITEID != 0 and o.siteid != p.SITEID:\n            raise asm3.utils.ASMPermissionError(\"person not in user site\")\n        if (p.LATLONG is None or p.LATLONG == \"\") and p.OWNERADDRESS != \"\":\n            p.LATLONG = asm3.person.update_geocode(dbo, p.ID, p.LATLONG, p.OWNERADDRESS, p.OWNERTOWN, p.OWNERCOUNTY, p.OWNERPOSTCODE)\n        upid = asm3.users.get_personid(dbo, o.user)\n        if upid != 0 and upid == p.id:\n            raise asm3.utils.ASMPermissionError(\"cannot view user staff record\")\n        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, \"owner\", p.ID, p.OWNERNAME)\n        asm3.al.debug(\"opened person '%s'\" % p.OWNERNAME, \"code.person\", dbo)\n        return {\n            \"additional\": asm3.additional.get_additional_fields(dbo, p.id, \"person\"),\n            \"animaltypes\": asm3.lookups.get_animal_types(dbo),\n            \"audit\": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, \"owner\", p.id) or [],\n            \"species\": asm3.lookups.get_species(dbo),\n            \"breeds\": asm3.lookups.get_breeds_by_species(dbo),\n            \"colours\": asm3.lookups.get_basecolours(dbo),\n            \"diarytasks\": asm3.diary.get_person_tasks(dbo),\n            \"flags\": asm3.lookups.get_person_flags(dbo),\n            \"ynun\": asm3.lookups.get_ynun(dbo),\n            \"ynunk\": asm3.lookups.get_ynunk(dbo),\n            \"homecheckhistory\": asm3.person.get_homechecked(dbo, p.id),\n            \"jurisdictions\": asm3.lookups.get_jurisdictions(dbo),\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"sexes\": asm3.lookups.get_sexes(dbo),\n            \"sites\": asm3.lookups.get_sites(dbo),\n            \"sizes\": asm3.lookups.get_sizes(dbo),\n            \"towns\": asm3.person.get_towns(dbo),\n            \"counties\": asm3.person.get_counties(dbo),\n            \"towncounties\": asm3.person.get_town_to_county(dbo),\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p.id)[0],\n            \"templates\": asm3.template.get_document_templates(dbo, \"person\"),\n            \"person\": p\n        }\n\n    def post_save(self, o):\n        self.check(asm3.users.CHANGE_PERSON)\n        asm3.person.update_person_from_form(o.dbo, o.post, o.user)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_PERSON)\n        asm3.person.delete_person(o.dbo, o.user, o.post.integer(\"personid\"))\n\n    def post_email(self, o):\n        self.check(asm3.users.EMAIL_PERSON)\n        asm3.person.send_email_from_form(o.dbo, o.user, o.post)\n\n    def post_latlong(self, o):\n        self.check(asm3.users.CHANGE_PERSON)\n        asm3.person.update_latlong(o.dbo, o.post.integer(\"personid\"), o.post[\"latlong\"])\n\n    def post_merge(self, o):\n        self.check(asm3.users.MERGE_PERSON)\n        asm3.person.merge_person(o.dbo, o.user, o.post.integer(\"personid\"), o.post.integer(\"mergepersonid\"))\n\nclass person_citations(JSONEndpoint):\n    url = \"person_citations\"\n    js_module = \"citations\"\n    get_permissions = asm3.users.VIEW_CITATION\n\n    def controller(self, o):\n        dbo = o.dbo\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        citations = asm3.financial.get_person_citations(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d citations\" % len(citations), \"code.incident_citations\", dbo)\n        return {\n            \"name\": \"person_citations\",\n            \"rows\": citations,\n            \"person\": p,\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0],\n            \"citationtypes\": asm3.lookups.get_citation_types(dbo)\n        }\n\nclass person_clinic(JSONEndpoint):\n    url = \"person_clinic\"\n    js_module = \"clinic_appointment\"\n    get_permissions = asm3.users.VIEW_CLINIC\n\n    def controller(self, o):\n        dbo = o.dbo\n        personid = o.post.integer(\"id\")\n        p = asm3.person.get_person(dbo, personid)\n        if p is None: self.notfound()\n        rows = asm3.clinic.get_person_appointments(dbo, personid)\n        asm3.al.debug(\"got %d appointments for person %s\" % (len(rows), p.OWNERNAME), \"code.person_clinic\", dbo)\n        return {\n            \"name\": self.url,\n            \"person\": p,\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, personid)[0],\n            \"clinicstatuses\": asm3.lookups.get_clinic_statuses(dbo),\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"forlist\": asm3.users.get_users(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"clinic\"),\n            \"rows\": rows\n        }\n\nclass person_diary(JSONEndpoint):\n    url = \"person_diary\"\n    js_module = \"diary\"\n    get_permissions = asm3.users.VIEW_DIARY\n\n    def controller(self, o):\n        dbo = o.dbo\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        diaries = asm3.diary.get_diaries(dbo, asm3.diary.PERSON, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d diaries\" % len(diaries), \"code.person_diary\", dbo)\n        return {\n            \"rows\": diaries,\n            \"person\": p,\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0],\n            \"name\": \"person_diary\",\n            \"linkid\": p[\"ID\"],\n            \"linktypeid\": asm3.diary.PERSON,\n            \"forlist\": asm3.users.get_users_and_roles(dbo)\n        }\n\nclass person_donations(JSONEndpoint):\n    url = \"person_donations\"\n    js_module = \"donations\"\n    get_permissions = asm3.users.VIEW_DONATION\n\n    def controller(self, o):\n        dbo = o.dbo\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        donations = asm3.financial.get_person_donations(dbo, o.post.integer(\"id\"))\n        return {\n            \"person\": p,\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0],\n            \"name\": \"person_donations\",\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"accounts\": asm3.financial.get_accounts(dbo, onlybank=True),\n            \"logtypes\": asm3.lookups.get_log_types(dbo), \n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"frequencies\": asm3.lookups.get_donation_frequencies(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"payment\"),\n            \"rows\": donations\n        }\n\nclass person_embed(ASMEndpoint):\n    url = \"person_embed\"\n    check_logged_in = False\n\n    def content(self, o):\n        if not o.dbo: raise asm3.utils.ASMPermissionError(\"No session\")\n        dbo = o.dbo\n        self.content_type(\"application/json\")\n        self.cache_control(180) # Person data can be cached for a few minutes, useful for multiple widgets on one page\n        return asm3.utils.json({\n            \"additional\": asm3.additional.get_additional_fields(dbo, 0, \"person\"),\n            \"jurisdictions\": asm3.lookups.get_jurisdictions(dbo),\n            \"towns\": asm3.person.get_towns(dbo),\n            \"counties\": asm3.person.get_counties(dbo),\n            \"towncounties\": asm3.person.get_town_to_county(dbo),\n            \"flags\": asm3.lookups.get_person_flags(dbo),\n            \"sites\": asm3.lookups.get_sites(dbo)\n        })\n\n    def post_find(self, o):\n        self.check(asm3.users.VIEW_PERSON)\n        self.content_type(\"application/json\")\n        q = o.post[\"q\"]\n        rows = asm3.person.get_person_find_simple(o.dbo, q, o.user, classfilter=o.post[\"filter\"], \\\n            includeStaff=self.checkb(asm3.users.VIEW_STAFF), \\\n            includeVolunteers=self.checkb(asm3.users.VIEW_VOLUNTEER), limit=100, siteid=o.siteid)\n        asm3.al.debug(\"find '%s' got %d rows\" % (self.query(), len(rows)), \"code.person_embed\", o.dbo)\n        return asm3.utils.json(rows)\n\n    def post_id(self, o):\n        self.check(asm3.users.VIEW_PERSON)\n        self.content_type(\"application/json\")\n        self.cache_control(120)\n        dbo = o.dbo\n        pid = o.post.integer(\"id\")\n        p = asm3.person.get_person_embedded(dbo, pid)\n        if not p:\n            asm3.al.error(\"get person by id %d found no records.\" % pid, \"code.person_embed\", dbo)\n            raise web.notfound()\n        else:\n            return asm3.utils.json((p,))\n\n    def post_personwarn(self, o):\n        self.check(asm3.users.VIEW_PERSON)\n        self.content_type(\"application/json\")\n        self.cache_control(120)\n        dbo = o.dbo\n        pid = o.post.integer(\"id\")\n        p = asm3.person.get_person_embedded(dbo, pid)\n        if not p:\n            asm3.al.error(\"get person by id %d found no records.\" % pid, \"code.person_embed\", dbo)\n            raise web.notfound()\n        else:\n            asm3.person.embellish_adoption_warnings(dbo, p)\n            return asm3.utils.json((p,))\n\n    def post_similar(self, o):\n        self.check(asm3.users.VIEW_PERSON)\n        self.content_type(\"application/json\")\n        dbo = o.dbo\n        post = o.post\n        surname = post[\"surname\"]\n        forenames = post[\"forenames\"]\n        address = post[\"address\"]\n        email = post[\"emailaddress\"]\n        mobile = post[\"mobiletelephone\"]\n        p = asm3.person.get_person_similar(dbo, email, mobile, surname, forenames, address, o.siteid)\n        if len(p) == 0:\n            asm3.al.debug(\"No similar people found for %s, %s, %s, %s, %s\" % (email, mobile, surname, forenames, address), \"code.person_embed\", dbo)\n        else:\n            asm3.al.debug(\"found similar people for %s, %s, %s, %s, %s: got %d records\" % (email, mobile, surname, forenames, address, len(p)), \"code.person_embed\", dbo)\n        return asm3.utils.json(p)\n\n    def post_add(self, o):\n        self.check(asm3.users.ADD_PERSON)\n        self.content_type(\"application/json\")\n        dbo = o.dbo\n        asm3.al.debug(\"add new person\", \"code.person_embed\", dbo)\n        pid = asm3.person.insert_person_from_form(dbo, o.post, o.user)\n        p = asm3.person.get_person(dbo, pid)\n        return asm3.utils.json((p,))\n\nclass person_find(JSONEndpoint):\n    url = \"person_find\"\n    get_permissions = asm3.users.VIEW_PERSON\n\n    def controller(self, o):\n        dbo = o.dbo\n        flags = asm3.lookups.get_person_flags(dbo)\n        asm3.al.debug(\"lookups loaded\", \"code.person_find\", dbo)\n        return {\n            \"flags\": flags,\n            \"jurisdictions\": asm3.lookups.get_jurisdictions(dbo),\n            \"users\": asm3.users.get_users(dbo)\n        }\n\nclass person_find_results(JSONEndpoint):\n    url = \"person_find_results\"\n    get_permissions = asm3.users.VIEW_PERSON\n\n    def controller(self, o):\n        dbo = o.dbo\n        mode = o.post[\"mode\"]\n        q = o.post[\"q\"]\n        if mode == \"SIMPLE\":\n            results = asm3.person.get_person_find_simple(dbo, q, o.user, classfilter=\"all\", \\\n                includeStaff=self.checkb(asm3.users.VIEW_STAFF), \\\n                includeVolunteers=self.checkb(asm3.users.VIEW_VOLUNTEER), \\\n                limit=asm3.configuration.record_search_limit(dbo), siteid=o.siteid)\n        else:\n            results = asm3.person.get_person_find_advanced(dbo, o.post.data, o.user, \\\n                includeStaff=self.checkb(asm3.users.VIEW_STAFF), includeVolunteers=self.checkb(asm3.users.VIEW_VOLUNTEER), \\\n                limit=asm3.configuration.record_search_limit(dbo), siteid=o.siteid)\n        add = None\n        if len(results) > 0: \n            add = asm3.additional.get_additional_fields_ids(dbo, results, \"person\")\n        asm3.al.debug(\"found %d results for %s\" % (len(results), self.query()), \"code.person_find_results\", dbo)\n        return {\n            \"rows\": results,\n            \"additional\": add\n        }\n\nclass person_investigation(JSONEndpoint):\n    url = \"person_investigation\"\n    get_permissions = asm3.users.VIEW_INVESTIGATION\n\n    def controller(self, o):\n        dbo = o.dbo\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        investigation = asm3.person.get_investigation(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d investigation records for person %s\" % (len(investigation), p[\"OWNERNAME\"]), \"code.person_investigation\", dbo)\n        return {\n            \"rows\": investigation,\n            \"person\": p,\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0]\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_INVESTIGATION)\n        return str(asm3.person.insert_investigation_from_form(o.dbo, o.user, o.post))\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_INVESTIGATION)\n        asm3.person.update_investigation_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_INVESTIGATION)\n        for did in o.post.integer_list(\"ids\"):\n            asm3.person.delete_investigation(o.dbo, o.user, did)\n\nclass person_licence(JSONEndpoint):\n    url = \"person_licence\"\n    js_module = \"licence\"\n    get_permissions = asm3.users.VIEW_LICENCE\n\n    def controller(self, o):\n        dbo = o.dbo\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        licences = asm3.financial.get_person_licences(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d licences\" % len(licences), \"code.person_licence\", dbo)\n        return {\n            \"name\": \"person_licence\",\n            \"rows\": licences,\n            \"person\": p,\n            \"templates\": asm3.template.get_document_templates(dbo, \"licence\"),\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0],\n            \"licencetypes\": asm3.lookups.get_licence_types(dbo)\n        }\n\nclass person_log(JSONEndpoint):\n    url = \"person_log\"\n    js_module = \"log\"\n    get_permissions = asm3.users.VIEW_LOG\n\n    def controller(self, o):\n        dbo = o.dbo\n        logfilter = o.post.integer(\"filter\")\n        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        logs = asm3.log.get_logs(dbo, asm3.log.PERSON, o.post.integer(\"id\"), logfilter)\n        return {\n            \"name\": \"person_log\",\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.log.PERSON,\n            \"filter\": logfilter,\n            \"rows\": logs,\n            \"person\": p,\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0],\n            \"logtypes\": asm3.lookups.get_log_types(dbo)\n        }\n\nclass person_lookingfor(ASMEndpoint):\n    url = \"person_lookingfor\"\n    get_permissions = asm3.users.VIEW_PERSON\n\n    def content(self, o):\n        self.content_type(\"text/html\")\n        if o.post.integer(\"personid\") == 0:\n            return asm3.cachedisk.get(\"lookingfor_report\", o.dbo.database)\n        else:\n            return asm3.person.lookingfor_report(o.dbo, o.user, o.post.integer(\"personid\"))\n\nclass person_links(JSONEndpoint):\n    url = \"person_links\"\n    get_permissions = asm3.users.VIEW_PERSON_LINKS\n\n    def controller(self, o):\n        dbo = o.dbo\n        links = asm3.person.get_links(dbo, o.post.integer(\"id\"))\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        asm3.al.debug(\"got %d person links\" % len(links), \"code.person_links\", dbo)\n        return {\n            \"links\": links,\n            \"person\": p,\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0]\n        }\n\nclass person_media(JSONEndpoint):\n    url = \"person_media\"\n    js_module = \"media\"\n    get_permissions = asm3.users.VIEW_MEDIA\n\n    def controller(self, o):\n        dbo = o.dbo\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        m = asm3.media.get_media(dbo, asm3.media.PERSON, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d media\" % len(m), \"code.person_media\", dbo)\n        return {\n            \"media\": m,\n            \"person\": p,\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0],\n            \"showpreferred\": True,\n            \"canwatermark\": False,\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.media.PERSON,\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"name\": self.url,\n            \"resizeimagespec\": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, \"\"),\n            \"templates\": asm3.template.get_document_templates(dbo, \"email\"),\n            \"sigtype\": ELECTRONIC_SIGNATURES\n        }\n\nclass person_movements(JSONEndpoint):\n    url = \"person_movements\"\n    js_module = \"movements\"\n    get_permissions = asm3.users.VIEW_MOVEMENT\n\n    def controller(self, o):\n        dbo = o.dbo\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        movements = asm3.movement.get_person_movements(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d movements\" % len(movements), \"code.person_movements\", dbo)\n        return {\n            \"name\": \"person_movements\",\n            \"rows\": movements,\n            \"person\": p,\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0],\n            \"logtypes\": asm3.lookups.get_log_types(dbo), \n            \"movementtypes\": asm3.lookups.get_movement_types(dbo),\n            \"reservationstatuses\": asm3.lookups.get_reservation_statuses(dbo),\n            \"returncategories\": asm3.lookups.get_entryreasons(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"movement\")\n        }\n\nclass person_new(JSONEndpoint):\n    url = \"person_new\"\n    get_permissions = asm3.users.ADD_PERSON\n    post_permissions = asm3.users.ADD_PERSON\n\n    def controller(self, o):\n        dbo = o.dbo\n        asm3.al.debug(\"add person\", \"code.person_new\", dbo)\n        return {\n            \"towns\": asm3.person.get_towns(dbo),\n            \"counties\": asm3.person.get_counties(dbo),\n            \"towncounties\": asm3.person.get_town_to_county(dbo),\n            \"additional\": asm3.additional.get_additional_fields(dbo, 0, \"person\"),\n            \"jurisdictions\": asm3.lookups.get_jurisdictions(dbo),\n            \"flags\": asm3.lookups.get_person_flags(dbo),\n            \"sites\": asm3.lookups.get_sites(dbo)\n        }\n\n    def post_all(self, o):\n        return str(asm3.person.insert_person_from_form(o.dbo, o.post, o.user))\n\nclass person_rota(JSONEndpoint):\n    url = \"person_rota\"\n    js_module = \"rota\"\n    get_permissions = asm3.users.VIEW_ROTA\n\n    def controller(self, o):\n        dbo = o.dbo\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        rota = asm3.person.get_person_rota(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d rota items\" % len(rota), \"code.person_rota\", dbo)\n        return {\n            \"name\": \"person_rota\",\n            \"rows\": rota,\n            \"person\": p,\n            \"rotatypes\": asm3.lookups.get_rota_types(dbo),\n            \"worktypes\": asm3.lookups.get_work_types(dbo),\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0]\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_ROTA)\n        return asm3.person.insert_rota_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_ROTA)\n        asm3.person.update_rota_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_ROTA)\n        for rid in o.post.integer_list(\"ids\"):\n            asm3.person.delete_rota(o.dbo, o.user, rid)\n\nclass person_traploan(JSONEndpoint):\n    url = \"person_traploan\"\n    js_module = \"traploan\"\n    get_permissions = asm3.users.VIEW_TRAPLOAN\n\n    def controller(self, o):\n        dbo = o.dbo\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        traploans = asm3.animalcontrol.get_person_traploans(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d trap loans\" % len(traploans), \"code.person_traploan\", dbo)\n        return {\n            \"name\": \"person_traploan\",\n            \"rows\": traploans,\n            \"person\": p,\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0],\n            \"traptypes\": asm3.lookups.get_trap_types(dbo)\n        }\n\nclass person_vouchers(JSONEndpoint):\n    url = \"person_vouchers\"\n    js_module = \"vouchers\"\n    get_permissions = asm3.users.VIEW_VOUCHER\n\n    def controller(self, o):\n        dbo = o.dbo\n        p = asm3.person.get_person(dbo, o.post.integer(\"id\"))\n        if p is None: self.notfound()\n        vouchers = asm3.financial.get_person_vouchers(dbo, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d person vouchers\" % len(vouchers), \"code.person_vouchers\", dbo)\n        return {\n            \"name\": \"person_vouchers\",\n            \"rows\": vouchers,\n            \"person\": p,\n            \"tabcounts\": asm3.person.get_satellite_counts(dbo, p[\"ID\"])[0],\n            \"templates\": asm3.template.get_document_templates(dbo, \"voucher\"),\n            \"vouchertypes\": asm3.lookups.get_voucher_types(dbo)\n        }\n\nclass publish(JSONEndpoint):\n    url = \"publish\"\n    get_permissions = asm3.users.USE_INTERNET_PUBLISHER\n\n    def controller(self, o):\n        dbo = o.dbo\n        mode = o.post[\"mode\"]\n        failed = False\n        asm3.al.debug(\"publish started for mode %s\" % mode, \"code.publish\", dbo)\n        # If a publisher is already running and we have a mode, mark\n        # a failure starting\n        if asm3.asynctask.is_task_running(dbo):\n            asm3.al.debug(\"publish already running, not starting new publish\", \"code.publish\", dbo)\n        else:\n            # If a publishing mode is requested, start that publisher\n            # running on a background thread\n            asm3.publish.start_publisher(dbo, mode, user=o.user, newthread=True)\n        return { \"failed\": failed }\n\n    def post_poll(self, o):\n        return \"%s|%d|%s\" % (asm3.asynctask.get_task_name(o.dbo), asm3.asynctask.get_progress_percent(o.dbo), asm3.asynctask.get_last_error(o.dbo))\n\n    def post_stop(self, o):\n        asm3.asynctask.set_cancel(o.dbo, True)\n\nclass publish_logs(JSONEndpoint):\n    url = \"publish_logs\"\n    get_permissions = asm3.users.USE_INTERNET_PUBLISHER\n\n    def controller(self, o):\n        logs = asm3.publish.get_publish_logs(o.dbo)\n        asm3.al.debug(\"viewing %d publishing logs\" % len(logs), \"code.publish_logs\", o.dbo)\n        return {\n            \"rows\": logs\n        }\n\nclass publish_log_view(ASMEndpoint):\n    url = \"publish_log_view\"\n    get_permissions = asm3.users.USE_INTERNET_PUBLISHER\n\n    def content(self, o):\n        asm3.al.debug(\"viewing log file %s\" % o.post[\"view\"], \"code.publish_logs\", o.dbo)\n        self.cache_control(CACHE_ONE_WEEK) # log files never change\n        self.content_type(\"text/plain\")\n        self.header(\"Content-Disposition\", \"inline; filename=\\\"%s\\\"\" % o.post[\"view\"])\n        return asm3.publish.get_publish_log(o.dbo, o.post.integer(\"view\"))\n\nclass publish_options(JSONEndpoint):\n    url = \"publish_options\"\n    get_permissions = asm3.users.PUBLISH_OPTIONS\n    post_permissions = asm3.users.PUBLISH_OPTIONS\n\n    def controller(self, o):\n        dbo = o.dbo\n        c = {\n            \"locations\": asm3.lookups.get_internal_locations(dbo),\n            \"flags\": asm3.lookups.get_animal_flags(dbo),\n            \"hasakcreunite\": AKC_REUNITE_BASE_URL != \"\",\n            \"hasfoundanimals\": FOUNDANIMALS_FTP_USER != \"\",\n            \"hashomeagain\": HOMEAGAIN_BASE_URL != \"\",\n            \"hashtmlftp\": HTMLFTP_PUBLISHER_ENABLED,\n            \"hasmaddiesfund\": MADDIES_FUND_TOKEN_URL != \"\",\n            \"haspetcademy\": PETCADEMY_FTP_HOST != \"\",\n            \"haspetlink\": PETLINK_BASE_URL != \"\",\n            \"haspetslocated\": PETSLOCATED_FTP_USER != \"\",\n            \"hassmarttag\": SMARTTAG_FTP_USER != \"\",\n            \"hasvetenvoy\": False, # Disabled. VETENVOY_US_BASE_URL != \"\",\n            \"haspetrescue\": PETRESCUE_URL != \"\",\n            \"hassavourlife\": SAVOURLIFE_URL != \"\",\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"styles\": asm3.template.get_html_template_names(dbo),\n            \"users\": asm3.users.get_users(dbo)\n        }\n        asm3.al.debug(\"loaded lookups\", \"code.publish_options\", dbo)\n        return c\n\n    def post_save(self, o):\n        asm3.configuration.csave(o.dbo, o.user, o.post)\n        self.reload_config()\n\n    def post_vesignup(self, o):\n        userid, userpwd = asm3.publishers.vetenvoy.VetEnvoyUSMicrochipPublisher.signup(o.dbo, o.post)\n        return \"%s,%s\" % (userid, userpwd)\n\nclass report(ASMEndpoint):\n    url = \"report\"\n    get_permissions = asm3.users.VIEW_REPORT\n\n    def content(self, o):\n        dbo = o.dbo\n        post = o.post\n        crid = post.integer(\"id\")\n        # Make sure this user has a role that can view the report\n        asm3.reports.check_view_permission(o.session, crid)\n        crit = asm3.reports.get_criteria(dbo, crid)\n        self.content_type(\"text/html\")\n        self.cache_control(0)\n        # If this report takes criteria and none were supplied, go to the criteria screen instead to get them\n        if len(crit) != 0 and post[\"hascriteria\"] == \"\": self.redirect(\"report_criteria?id=%d&target=report\" % post.integer(\"id\"))\n        title = asm3.reports.get_title(dbo, crid)\n        asm3.al.debug(\"got criteria (%s), executing report %d %s\" % (str(post.data), crid, title), \"code.report\", dbo)\n        p = asm3.reports.get_criteria_params(dbo, crid, post)\n        if asm3.configuration.audit_on_view_report(dbo):\n            asm3.audit.view_report(dbo, o.user, title, str(post.data))\n        s = asm3.reports.execute(dbo, crid, o.user, p)\n        return s\n\nclass report_criteria(JSONEndpoint):\n    url = \"report_criteria\"\n    get_permissions = asm3.users.VIEW_REPORT\n\n    def controller(self, o):\n        dbo = o.dbo\n        post = o.post\n        title = asm3.reports.get_title(o.dbo, post.integer(\"id\"))\n        crit = asm3.reports.get_criteria(dbo, post.integer(\"id\"))\n        asm3.al.debug(\"building report criteria form for report %d %s\" % (post.integer(\"id\"), title), \"code.report_criteria\", dbo)\n        def has_criteria(c):\n            for name, rtype, question in crit:\n                if rtype == c: return True\n            return False\n        c = {\n            \"id\":           post.integer(\"id\"),\n            \"title\":        title,\n            \"target\":       post[\"target\"],\n            \"criteria\":     crit\n        }\n        if has_criteria(\"ANIMALFLAG\"): c[\"animalflags\"] = asm3.lookups.get_animal_flags(dbo)\n        if has_criteria(\"DONATIONTYPE\") or has_criteria(\"PAYMENTTYPE\"): c[\"donationtypes\"] = asm3.lookups.get_donation_types(dbo)\n        if has_criteria(\"LITTER\"): c[\"litters\"] = asm3.animal.get_active_litters_brief(dbo)\n        if has_criteria(\"LOCATION\"): c[\"locations\"] = asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid)\n        if has_criteria(\"LOGTYPE\"): c[\"logtypes\"] = asm3.lookups.get_log_types(dbo)\n        if has_criteria(\"PAYMENTMETHOD\") or has_criteria(\"PAYMENTTYPE\"): c[\"paymentmethods\"] = asm3.lookups.get_payment_methods(dbo)\n        if has_criteria(\"PERSON\"): c[\"people\"] = asm3.person.get_person_name_addresses(dbo)\n        if has_criteria(\"PERSONFLAG\"): c[\"personflags\"] = asm3.lookups.get_person_flags(dbo)\n        if has_criteria(\"SITE\"): c[\"sites\"] = asm3.lookups.get_sites(dbo)\n        if has_criteria(\"SPECIES\"): c[\"species\"] = asm3.lookups.get_species(dbo)\n        if has_criteria(\"TYPE\"): c[\"types\"] = asm3.lookups.get_animal_types(dbo)\n        return c\n\nclass report_export(JSONEndpoint):\n    url = \"report_export\"\n    get_permissions = asm3.users.EXPORT_REPORT\n\n    def controller(self, o):\n        dbo = o.dbo\n        reports = asm3.reports.get_available_reports(dbo)\n        asm3.al.debug(\"exporting %d reports\" % len(reports), \"code.report_export\", dbo)\n        return {\n            \"rows\": reports\n        }\n\nclass report_export_csv(ASMEndpoint):\n    url = \"report_export_csv\"\n    get_permissions = asm3.users.EXPORT_REPORT\n\n    def content(self, o):\n        dbo = o.dbo\n        post = o.post\n        crid = post.integer(\"id\")\n        crit = asm3.reports.get_criteria(dbo, crid)\n        # If this report takes criteria and none were supplied, go to the criteria screen instead to get them\n        if len(crit) != 0 and post[\"hascriteria\"] == \"\": self.redirect(\"report_criteria?id=%d&target=report_export_csv\" % crid)\n        # Make sure this user has a role that can view the report\n        asm3.reports.check_view_permission(o.session, crid)\n        title = asm3.reports.get_title(dbo, crid)\n        filename = title.replace(\" \", \"_\").replace(\"\\\"\", \"\").replace(\"'\", \"\").lower()\n        p = asm3.reports.get_criteria_params(dbo, crid, post)\n        rows, cols = asm3.reports.execute_query(dbo, crid, o.user, p)\n        titlecaseheader = cols is not None and \"TITLECASEHEADER\" in cols\n        renameheader = \"\"\n        if cols is not None and \"RENAMEHEADER\" in cols and len(rows) > 0:\n            renameheader = rows[0].RENAMEHEADER\n        self.content_type(\"text/csv\")\n        # non-latin1 chars in HTTP headers cause errors in web.py - encode any unicode chars as HTML entities\n        # then look for them and use the report ID if any are found.\n        if asm3.utils.encode_html(filename).find(\"&#\") != -1: filename = str(crid) \n        self.header(\"Content-Disposition\", f\"attachment; filename=\\\"{filename}.csv\\\"\")\n        return asm3.utils.csv(o.locale, rows, cols, includeheader=True, titlecaseheader=titlecaseheader, renameheader=renameheader)\n\nclass report_export_email(ASMEndpoint):\n    url = \"report_export_email\"\n    get_permissions = asm3.users.EXPORT_REPORT\n\n    def content(self, o):\n        dbo = o.dbo\n        post = o.post\n        crid = post.integer(\"id\")\n        email = post[\"email\"]\n        crit = asm3.reports.get_criteria(dbo, crid)\n        # If this report takes criteria and none were supplied, go to the criteria screen instead to get them\n        if len(crit) != 0 and post[\"hascriteria\"] == \"\": self.redirect(\"report_criteria?id=%d&target=report_export_email\" % crid)\n        # Make sure this user has a role that can view the report\n        asm3.reports.check_view_permission(o.session, crid)\n        title = asm3.reports.get_title(dbo, crid)\n        p = asm3.reports.get_criteria_params(dbo, crid, post)\n        content = asm3.reports.execute(dbo, crid, o.user, p)\n        asm3.utils.send_email(dbo, asm3.configuration.email(dbo), email, \"\", \"\", title, content, \"html\")\n        self.redirect(\"report%s\" % self.query() + \"&sent=1\")\n\nclass report_export_pdf(ASMEndpoint):\n    url = \"report_export_pdf\"\n    get_permissions = asm3.users.EXPORT_REPORT\n\n    def content(self, o):\n        dbo = o.dbo\n        post = o.post\n        crid = post.integer(\"id\")\n        crit = asm3.reports.get_criteria(dbo, crid)\n        # If this report takes criteria and none were supplied, go to the criteria screen instead to get them\n        if len(crit) != 0 and post[\"hascriteria\"] == \"\": self.redirect(\"report_criteria?id=%d&target=report_export_pdf\" % crid)\n        # Make sure this user has a role that can view the report\n        asm3.reports.check_view_permission(o.session, crid)\n        p = asm3.reports.get_criteria_params(dbo, crid, post)\n        disposition = asm3.configuration.pdf_inline(dbo) and \"inline; filename=\\\"report.pdf\\\"\" or \"attachment; filename=\\\"report.pdf\\\"\"\n        self.content_type(\"application/pdf\")\n        self.header(\"Content-Disposition\", disposition)\n        return asm3.utils.html_to_pdf(dbo, asm3.reports.execute(dbo, crid, o.user, p))\n\nclass report_images(JSONEndpoint):\n    url = \"report_images\"\n    \n    def controller(self, o):\n        images = asm3.dbfs.get_report_images(o.dbo)\n        asm3.al.debug(\"got %d extra images\" % len(images), \"code.report_images\", o.dbo)\n        return { \"rows\": images }\n\n    def post_create(self, o):\n        asm3.dbfs.upload_report_image(o.dbo, o.post.data.filechooser)\n        self.reload_config()\n        self.redirect(\"report_images\")\n\n    def post_delete(self, o):\n        for i in o.post[\"ids\"].split(\",\"):\n            if i != \"\": asm3.dbfs.delete_filepath(o.dbo, \"/reports/\" + i)\n        self.reload_config()\n\n    def post_rename(self, o):\n        asm3.dbfs.rename_file(o.dbo, \"/reports\", o.post[\"oldname\"], o.post[\"newname\"])\n\nclass reports(JSONEndpoint):\n    url = \"reports\"\n    get_permissions = asm3.users.VIEW_REPORT\n\n    def controller(self, o):\n        dbo = o.dbo\n        reports = asm3.reports.get_reports(dbo)\n        header = asm3.reports.get_raw_report_header(dbo)\n        footer = asm3.reports.get_raw_report_footer(dbo)\n        asm3.al.debug(\"editing %d reports\" % len(reports), \"code.reports\", dbo)\n        return {\n            \"categories\": \"|\".join(asm3.reports.get_categories(dbo)),\n            \"recommended\": asm3.reports.RECOMMENDED_REPORTS,\n            \"header\": header,\n            \"footer\": footer,\n            \"roles\": asm3.users.get_roles(dbo),\n            \"additionalfields\": asm3.additional.get_fields(dbo),\n            \"animalflags\": asm3.lookups.get_animal_flags(dbo),\n            \"animaltypes\": asm3.lookups.get_animal_types(dbo),\n            \"donationtypes\": asm3.lookups.get_donation_types(dbo),\n            \"entryreasons\": asm3.lookups.get_entryreasons(dbo),\n            \"incidenttypes\": asm3.lookups.get_incident_types(dbo),\n            \"completedtypes\": asm3.lookups.get_incident_completed_types(dbo),\n            \"jurisdictions\": asm3.lookups.get_jurisdictions(dbo),\n            \"locations\": asm3.lookups.get_internal_locations(dbo),\n            \"paymentmethods\": asm3.lookups.get_payment_methods(dbo),\n            \"personflags\": asm3.lookups.get_person_flags(dbo),\n            \"sizes\": asm3.lookups.get_sizes(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"testtypes\": asm3.lookups.get_test_types(dbo),\n            \"vaccinationtypes\": asm3.lookups.get_vaccination_types(dbo),\n            \"rows\": reports\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_REPORT)\n        rid = asm3.reports.insert_report_from_form(o.dbo, o.user, o.post)\n        self.reload_config()\n        return rid\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_REPORT)\n        asm3.reports.update_report_from_form(o.dbo, o.user, o.post)\n        self.reload_config()\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_REPORT)\n        for rid in o.post.integer_list(\"ids\"):\n            asm3.reports.delete_report(o.dbo, o.user, rid)\n        self.reload_config()\n\n    def post_sql(self, o):\n        self.check(asm3.users.USE_SQL_INTERFACE)\n        asm3.reports.check_sql(o.dbo, o.user, o.post[\"sql\"])\n\n    def post_genhtml(self, o):\n        self.check(asm3.users.USE_SQL_INTERFACE)\n        return asm3.reports.generate_html(o.dbo, o.user, o.post[\"sql\"])\n\n    def post_headfoot(self, o):\n        self.check(asm3.users.CHANGE_REPORT)\n        asm3.reports.set_raw_report_headerfooter(o.dbo, o.post[\"header\"], o.post[\"footer\"])\n\n    def post_smcomlist(self, o):\n        return asm3.utils.json(asm3.reports.get_smcom_reports_installable(o.dbo))\n\n    def post_smcominstall(self, o):\n        self.check(asm3.users.ADD_REPORT)\n        asm3.reports.install_smcom_reports(o.dbo, o.user, o.post.integer_list(\"ids\"))\n        self.reload_config()\n\nclass roles(JSONEndpoint):\n    url = \"roles\"\n    get_permissions = asm3.users.EDIT_USER\n    post_permissions = asm3.users.EDIT_USER\n\n    def controller(self, o):\n        roles = asm3.users.get_roles(o.dbo)\n        asm3.al.debug(\"editing %d roles\" % len(roles), \"code.roles\", o.dbo)\n        return { \"rows\": roles }\n\n    def post_create(self, o):\n        asm3.users.insert_role_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        asm3.users.update_role_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        for rid in o.post.integer_list(\"ids\"):\n            asm3.users.delete_role(o.dbo, o.user, rid)\n\nclass search(JSONEndpoint):\n    url = \"search\"\n    \n    def controller(self, o):\n        q = o.post[\"q\"]\n        results, timetaken, explain, sortname = asm3.search.search(o.dbo, o.session, q)\n        is_large_db = \"\"\n        if o.dbo.is_large_db: is_large_db = \" (indexed only)\"\n        asm3.al.debug(\"searched for '%s', got %d results in %s, sorted %s %s\" % (q, len(results), timetaken, sortname, is_large_db), \"code.search\", o.dbo)\n        return {\n            \"q\": q,\n            \"results\": results,\n            \"timetaken\": str(round(timetaken, 2)),\n            \"explain\": explain,\n            \"sortname\": sortname\n        }\n\nclass service(ASMEndpoint):\n    url = \"service\"\n    check_logged_in = False\n    session_cookie = False\n\n    def handle(self, o):\n        contenttype, client_ttl, cache_ttl, response = asm3.service.handler(o.post, PATH, self.remote_ip(), self.referer(), self.user_agent(), self.query())\n        if contenttype == \"redirect\":\n            self.redirect(response)\n        else:\n            self.content_type(contenttype)\n            self.cache_control(client_ttl, cache_ttl) \n            self.header(\"Access-Control-Allow-Origin\", \"*\") # CORS\n            return response\n\n    def content(self, o):\n        return self.handle(o)\n\n    def post_all(self, o):\n        return self.handle(o)\n\nclass shelterview(JSONEndpoint):\n    url = \"shelterview\"\n    get_permissions = asm3.users.VIEW_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        animals = asm3.animal.get_shelterview_animals(dbo, o.locationfilter, o.siteid, o.visibleanimalids)\n        asm3.al.debug(\"got %d animals for shelterview\" % (len(animals)), \"code.shelterview\", dbo)\n        return {\n            \"animals\": asm3.animal.get_animals_brief(animals),\n            \"flags\": asm3.lookups.get_animal_flags(dbo),\n            \"fosterers\": asm3.person.get_shelterview_fosterers(dbo, o.siteid),\n            \"locations\": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),\n            \"perrow\": asm3.configuration.main_screen_animal_link_max(dbo)\n        }\n\n    def post_movelocation(self, o):\n        self.check(asm3.users.CHANGE_ANIMAL)\n        asm3.animal.update_location_unit(o.dbo, o.user, o.post.integer(\"animalid\"), o.post.integer(\"locationid\"))\n\n    def post_moveunit(self, o):\n        self.check(asm3.users.CHANGE_ANIMAL)\n        asm3.animal.update_location_unit(o.dbo, o.user, o.post.integer(\"animalid\"), o.post.integer(\"locationid\"), o.post[\"unit\"])\n\n    def post_movefoster(self, o):\n        self.check(asm3.users.ADD_MOVEMENT)\n        post = o.post\n        post.data[\"person\"] = post[\"personid\"]\n        post.data[\"animal\"] = post[\"animalid\"]\n        post.data[\"fosterdate\"] = python2display(o.locale, now(o.dbo.timezone))\n        return asm3.movement.insert_foster_from_form(o.dbo, o.user, post)\n\nclass smcom_my(ASMEndpoint):\n    url = \"smcom_my\"\n\n    def content(self, o):\n        if o.session.superuser == 1: asm3.smcom.go_smcom_my(o.dbo)\n\nclass sql(JSONEndpoint):\n    url = \"sql\"\n    get_permissions = asm3.users.USE_SQL_INTERFACE\n    post_permissions = asm3.users.USE_SQL_INTERFACE\n\n    def controller(self, o):\n        asm3.al.debug(\"%s opened SQL interface\" % o.user, \"code.sql\", o.dbo)\n        return {}\n\n    def post_exec(self, o):\n        sql = o.post[\"sql\"].strip()\n        return self.exec_sql(o.dbo, o.user, sql)\n\n    def post_execfile(self, o):\n        sql = asm3.utils.bytes2str(o.post.filedata())\n        self.content_type(\"text/plain\")\n        return self.exec_sql_from_file(o.dbo, o.user, sql)\n\n    def check_update_query(self, q):\n        \"\"\" Prevent updates or deletes to certain tables or columns to prevent\n            more savvy malicious users tampering via SQL Interface.\n            q is already stripped and converted to lower case by the exec_sql caller.\n            If one of our tamper proofed tables is touched, an Exception is raised\n            and the query not run.\n            This will also throw an error if we have an update or delete query\n            without a where clause to prevent people doing something daft\n            (easy to get around with WHERE 1=1 or something)\n        \"\"\"\n        for t in ( \"audittrail\", \"deletion\", \"signaturehash\" ):\n            if q.find(t) != -1:\n                raise Exception(\"Forbidden: %s\" % q)\n        if q.find(\"where\") == -1 and (q.startswith(\"delete\") or q.startswith(\"update\")):\n            raise Exception(\"Forbidden: DELETE or UPDATE\")\n\n    def exec_sql(self, dbo, user, sql):\n        l = dbo.locale\n        rowsaffected = 0\n        try:\n            for q in dbo.split_queries(sql):\n                if q == \"\": continue\n                q = self.substitute_report_tokens(dbo, user, q)\n                ql = q.lower()\n                asm3.al.info(\"%s query: %s\" % (user, q), \"code.sql\", dbo)\n                if ql.startswith(\"select\") or ql.startswith(\"show\"):\n                    return asm3.html.table(dbo.query(q))\n                elif ql.startswith(\"insert\"):\n                    rowsaffected += dbo.execute(q)\n                else:\n                    self.check_update_query(ql)\n                    rowsaffected += dbo.execute(q)\n            asm3.configuration.db_view_seq_version(dbo, \"0\")\n            return _(\"{0} rows affected.\", l).format(rowsaffected)\n        except Exception as err:\n            asm3.al.error(\"%s\" % str(err), \"code.sql\", dbo)\n            raise asm3.utils.ASMValidationError(str(err))\n\n    def exec_sql_from_file(self, dbo, user, sql):\n        l = dbo.locale\n        output = []\n        for q in dbo.split_queries(sql):\n            try:\n                if q == \"\": continue\n                q = self.substitute_report_tokens(dbo, user, q)\n                ql = q.lower()\n                asm3.al.info(\"%s query: %s\" % (user, q), \"code.sql\", dbo)\n                if ql.startswith(\"select\") or ql.startswith(\"show\"):\n                    output.append(str(dbo.query(q)))\n                else:\n                    self.check_update_query(ql)\n                    rowsaffected = dbo.execute(q)\n                    output.append(_(\"{0} rows affected.\", l).format(rowsaffected))\n            except Exception as err:\n                asm3.al.error(\"%s\" % str(err), \"code.sql\", dbo)\n                output.append(\"ERROR: %s\" % str(err))\n        asm3.configuration.db_view_seq_version(dbo, \"0\")\n        return \"\\n\\n\".join(output)\n\n    def substitute_report_tokens(self, dbo, user, q):\n        \"\"\" Substitutes any of our report tokens that might be in query q \"\"\"\n        # Substitute CURRENT_DATE-X tokens\n        for day in asm3.utils.regex_multi(r\"\\$CURRENT_DATE\\-(.+?)\\$\", q):\n            d = dbo.today(offset=asm3.utils.cint(day)*-1)\n            q = q.replace(\"$CURRENT_DATE-%s$\" % day, dbo.sql_date(d, includeTime=False, wrapParens=False))\n        # Substitute CURRENT_DATE+X tokens\n        for day in asm3.utils.regex_multi(r\"\\$CURRENT_DATE\\+(.+?)\\$\", q):\n            d = dbo.today(offset=asm3.utils.cint(day))\n            q = q.replace(\"$CURRENT_DATE+%s$\" % day, dbo.sql_date(d, includeTime=False, wrapParens=False))\n        # straight tokens\n        q = q.replace(\"$CURRENT_DATE$\", dbo.sql_date(dbo.now(), includeTime=False, wrapParens=False))\n        q = q.replace(\"$USER$\", user)\n        q = q.replace(\"$DATABASENAME$\", dbo.database)\n        return q\n\nclass sql_dump(ASMEndpoint):\n    url = \"sql_dump\"\n    get_permissions = asm3.users.USE_SQL_INTERFACE\n\n    def content(self, o):\n        l = o.locale\n        dbo = o.dbo\n        mode = o.post[\"mode\"]\n        self.content_type(\"text/plain\")\n        if mode == \"dumpsql\":\n            asm3.al.info(\"%s executed SQL database dump\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"dump.sql\\\"\")\n            return asm3.dbupdate.dump(dbo) # generator\n        if mode == \"dumpsqlmedia\":\n            asm3.al.info(\"%s executed SQL database dump (base64/media)\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"media.sql\\\"\")\n            return asm3.dbupdate.dump_dbfs_base64(dbo) # generator\n        if mode == \"dumpddlmysql\":\n            asm3.al.info(\"%s executed DDL dump MySQL\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"ddl_mysql.sql\\\"\")\n            dbo2 = asm3.db.get_dbo(\"MYSQL\")\n            dbo2.locale = dbo.locale\n            return asm3.dbupdate.sql_structure(dbo2)\n            return asm3.dbupdate.sql_default_data(dbo2).replace(\"|=\", \";\")\n        if mode == \"dumpddlpostgres\":\n            asm3.al.info(\"%s executed DDL dump PostgreSQL\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"ddl_postgresql.sql\\\"\")\n            dbo2 = asm3.db.get_dbo(\"POSTGRESQL\")\n            dbo2.locale = dbo.locale\n            return asm3.dbupdate.sql_structure(dbo2)\n            return asm3.dbupdate.sql_default_data(dbo2).replace(\"|=\", \";\")\n        if mode == \"dumpddldb2\":\n            asm3.al.info(\"%s executed DDL dump DB2\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"ddl_db2.sql\\\"\")\n            dbo2 = asm3.db.get_dbo(\"DB2\")\n            dbo2.locale = dbo.locale\n            return asm3.dbupdate.sql_structure(dbo2)\n            return asm3.dbupdate.sql_default_data(dbo2).replace(\"|=\", \";\")\n        elif mode == \"dumpsqlasm2\":\n            # ASM2_COMPATIBILITY\n            asm3.al.info(\"%s executed SQL database dump (ASM2 HSQLDB)\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"asm2.sql\\\"\")\n            return asm3.dbupdate.dump_hsqldb(dbo) # generator\n        elif mode == \"dumpsqlasm2nomedia\":\n            # ASM2_COMPATIBILITY\n            asm3.al.info(\"%s executed SQL database dump (ASM2 HSQLDB, without media)\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"asm2.sql\\\"\")\n            return asm3.dbupdate.dump_hsqldb(dbo, includeDBFS = False) # generator\n        elif mode == \"animalcsv\":\n            asm3.al.debug(\"%s executed CSV animal dump\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"animal.csv\\\"\")\n            rows = asm3.animal.get_animal_find_advanced(dbo, { \"logicallocation\" : \"all\", \"filter\" : \"includedeceased,includenonshelter\" })\n            asm3.additional.append_to_results(dbo, rows, \"animal\")\n            return asm3.utils.csv(l, rows)\n        elif mode == \"mediacsv\":\n            asm3.al.debug(\"%s executed CSV media dump\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"media.csv\\\"\")\n            return asm3.utils.csv(l, asm3.media.get_media_export(dbo))\n        elif mode == \"medicalcsv\":\n            asm3.al.debug(\"%s executed CSV medical dump\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"medical.csv\\\"\")\n            return asm3.utils.csv(l, asm3.medical.get_medical_export(dbo))\n        elif mode == \"personcsv\":\n            asm3.al.debug(\"%s executed CSV person dump\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"person.csv\\\"\")\n            rows = asm3.person.get_person_find_simple(dbo, \"\", o.user, includeStaff=True, includeVolunteers=True)\n            asm3.additional.append_to_results(dbo, rows, \"person\")\n            return asm3.utils.csv(l, rows)\n        elif mode == \"incidentcsv\":\n            asm3.al.debug(\"%s executed CSV incident dump\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"incident.csv\\\"\")\n            rows = asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { \"filter\" : \"\" }, 0)\n            asm3.additional.append_to_results(dbo, rows, \"incident\")\n            return asm3.utils.csv(l, rows)\n        elif mode == \"licencecsv\":\n            asm3.al.debug(\"%s executed CSV licence dump\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"licence.csv\\\"\")\n            return asm3.utils.csv(l, asm3.financial.get_licence_find_simple(dbo, \"\"))\n        elif mode == \"paymentcsv\":\n            asm3.al.debug(\"%s executed CSV payment dump\" % o.user, \"code.sql\", dbo)\n            self.header(\"Content-Disposition\", \"attachment; filename=\\\"payment.csv\\\"\")\n            return asm3.utils.csv(l, asm3.financial.get_donations(dbo, \"m10000\"))\n\nclass staff_rota(JSONEndpoint):\n    url = \"staff_rota\"\n    get_permissions = asm3.users.VIEW_STAFF_ROTA\n\n    def controller(self, o):\n        dbo = o.dbo\n        startdate = o.post.date(\"start\")\n        if startdate is None: startdate = monday_of_week(dbo.today())\n        rota = asm3.person.get_rota(dbo, startdate, add_days(startdate, 7))\n        asm3.al.debug(\"got %d rota items\" % len(rota), \"code.staff_rota\", dbo)\n        return {\n            \"name\": \"staff_rota\",\n            \"rows\": rota,\n            \"flags\": asm3.lookups.get_person_flags(dbo),\n            \"flagsel\": o.post[\"flags\"],\n            \"startdate\": startdate,\n            \"prevdate\": subtract_days(startdate, 7),\n            \"nextdate\": add_days(startdate, 7),\n            \"rotatypes\": asm3.lookups.get_rota_types(dbo),\n            \"worktypes\": asm3.lookups.get_work_types(dbo),\n            \"staff\": asm3.person.get_staff_volunteers(dbo, o.siteid)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_ROTA)\n        return asm3.person.insert_rota_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_ROTA)\n        asm3.person.update_rota_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_ROTA)\n        for rid in o.post.integer_list(\"ids\"):\n            asm3.person.delete_rota(o.dbo, o.user, rid)\n\n    def post_deleteweek(self, o):\n        self.check(asm3.users.DELETE_ROTA)\n        asm3.person.delete_rota_week(o.dbo, o.user, o.post.date(\"startdate\"))\n\n    def post_clone(self, o):\n        self.check(asm3.users.ADD_ROTA)\n        startdate = o.post.date(\"startdate\")\n        newdate = o.post.date(\"newdate\")\n        flags = o.post[\"flags\"]\n        asm3.person.clone_rota_week(o.dbo, o.user, startdate, newdate, flags)\n\nclass stocklevel(JSONEndpoint):\n    url = \"stocklevel\"\n    get_permissions = asm3.users.VIEW_STOCKLEVEL\n\n    def controller(self, o):\n        dbo = o.dbo\n        if o.post.integer(\"viewlocation\") == -1:\n            levels = asm3.stock.get_stocklevels_depleted(dbo)\n        else:\n            levels = asm3.stock.get_stocklevels(dbo, o.post.integer(\"viewlocation\"))\n        asm3.al.debug(\"got %d stock levels\" % len(levels), \"code.stocklevel\", dbo)\n        return {\n            \"stocklocations\": asm3.lookups.get_stock_locations(dbo),\n            \"stocknames\": \"|\".join(asm3.stock.get_stock_names(dbo)),\n            \"stockusagetypes\": asm3.lookups.get_stock_usage_types(dbo),\n            \"stockunits\": \"|\".join(asm3.stock.get_stock_units(dbo)),\n            \"newlevel\": o.post.integer(\"newlevel\") == 1,\n            \"sortexp\": o.post.integer(\"sortexp\") == 1,\n            \"rows\": levels\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_STOCKLEVEL)\n        for dummy in range(0, o.post.integer(\"quantity\")):\n            asm3.stock.insert_stocklevel_from_form(o.dbo, o.post, o.user)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_STOCKLEVEL)\n        asm3.stock.update_stocklevel_from_form(o.dbo, o.post, o.user)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_STOCKLEVEL)\n        for sid in o.post.integer_list(\"ids\"):\n            asm3.stock.delete_stocklevel(o.dbo, o.user, sid)\n\n    def post_lastname(self, o):\n        self.check(asm3.users.VIEW_STOCKLEVEL)\n        return asm3.stock.get_last_stock_with_name(o.dbo, o.post[\"name\"])\n\nclass systemusers(JSONEndpoint):\n    url = \"systemusers\"\n    js_module = \"users\"\n    get_permissions = asm3.users.EDIT_USER\n\n    def controller(self, o):\n        dbo = o.dbo\n        user = asm3.users.get_users(dbo)\n        roles = asm3.users.get_roles(dbo)\n        asm3.al.debug(\"editing %d system users\" % len(user), \"code.systemusers\", dbo)\n        return {\n            \"rows\": user,\n            \"roles\": roles,\n            \"internallocations\": asm3.lookups.get_internal_locations(dbo),\n            \"sites\": asm3.lookups.get_sites(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_USER)\n        return asm3.users.insert_user_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.EDIT_USER)\n        asm3.users.update_user_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.EDIT_USER)\n        for uid in o.post.integer_list(\"ids\"):\n            asm3.users.delete_user(o.dbo, o.user, uid)\n\n    def post_reset(self, o):\n        self.check(asm3.users.EDIT_USER)\n        for uid in o.post.integer_list(\"ids\"):\n            asm3.users.reset_password(o.dbo, uid, o.post[\"password\"])\n\nclass task(JSONEndpoint):\n    url = \"task\"\n\n    def controller(self, o):\n        return { }\n   \n    def post_poll(self, o):\n        return \"%s|%d|%s|%s\" % (asm3.asynctask.get_task_name(o.dbo), asm3.asynctask.get_progress_percent(o.dbo), asm3.asynctask.get_last_error(o.dbo), asm3.asynctask.get_return_value(o.dbo))\n\n    def post_stop(self, o):\n        asm3.asynctask.set_cancel(o.dbo, True)\n\nclass test(JSONEndpoint):\n    url = \"test\"\n    get_permissions = asm3.users.VIEW_TEST\n\n    def controller(self, o):\n        dbo = o.dbo\n        offset = o.post[\"offset\"]\n        if offset == \"\": offset = \"m365\"\n        test = asm3.medical.get_tests_outstanding(dbo, offset, o.locationfilter, o.siteid, o.visibleanimalids)\n        asm3.al.debug(\"got %d tests\" % len(test), \"code.test\", dbo)\n        return {\n            \"name\": \"test\",\n            \"newtest\": o.post.integer(\"newtest\") == 1,\n            \"rows\": test,\n            \"stockitems\": asm3.stock.get_stock_items(dbo),\n            \"stockusagetypes\": asm3.lookups.get_stock_usage_types(dbo),\n            \"testtypes\": asm3.lookups.get_test_types(dbo),\n            \"testresults\": asm3.lookups.get_test_results(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_TEST)\n        return asm3.medical.insert_test_from_form(o.dbo, o.user, o.post)\n\n    def post_createbulk(self, o):\n        self.check(asm3.users.ADD_TEST)\n        for animalid in o.post.integer_list(\"animals\"):\n            o.post.data[\"animal\"] = str(animalid)\n            asm3.medical.insert_test_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_TEST)\n        asm3.medical.update_test_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_TEST)\n        for vid in o.post.integer_list(\"ids\"):\n            asm3.medical.delete_test(o.dbo, o.user, vid)\n\n    def post_perform(self, o):\n        self.check(asm3.users.CHANGE_TEST)\n        newdate = o.post.date(\"newdate\")\n        retestdate = o.post.date(\"retest\")\n        reschedulecomments = o.post[\"usagecomments\"]\n        vet = o.post.integer(\"givenvet\")\n        testresult = o.post.integer(\"testresult\")\n        for vid in o.post.integer_list(\"ids\"):\n            asm3.medical.complete_test(o.dbo, o.user, vid, newdate, testresult, vet)\n            if retestdate is not None:\n                asm3.medical.reschedule_test(o.dbo, o.user, vid, retestdate, reschedulecomments)\n        if o.post.integer(\"item\") != -1:\n            asm3.stock.deduct_stocklevel_from_form(o.dbo, o.user, o.post)\n\nclass timeline(JSONEndpoint):\n    url = \"timeline\"\n    get_permissions = asm3.users.VIEW_ANIMAL\n\n    def controller(self, o):\n        dbo = o.dbo\n        evts = asm3.animal.get_timeline(dbo, 500)\n        asm3.al.debug(\"timeline events, run by %s, got %d events\" % (o.user, len(evts)), \"code.timeline\", dbo)\n        return {\n            \"recent\": evts,\n            \"resultcount\": len(evts)\n        }\n\nclass transport(JSONEndpoint):\n    url = \"transport\"\n    get_permissions = asm3.users.VIEW_TRANSPORT\n\n    def controller(self, o):\n        dbo = o.dbo\n        transports = asm3.movement.get_active_transports(dbo)\n        asm3.al.debug(\"got %d transports\" % len(transports), \"code.transport\", dbo)\n        return {\n            \"name\": \"transport\",\n            \"statuses\": asm3.lookups.get_transport_statuses(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"transport\"),\n            \"transporttypes\": asm3.lookups.get_transport_types(dbo),\n            \"rows\": transports\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_TRANSPORT)\n        return asm3.movement.insert_transport_from_form(o.dbo, o.user, o.post)\n\n    def post_createbulk(self, o):\n        self.check(asm3.users.ADD_TRANSPORT)\n        for animalid in o.post.integer_list(\"animals\"):\n            o.post.data[\"animal\"] = str(animalid)\n            asm3.movement.insert_transport_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_TRANSPORT)\n        asm3.movement.update_transport_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_TRANSPORT)\n        for mid in o.post.integer_list(\"ids\"):\n            asm3.movement.delete_transport(o.dbo, o.user, mid)\n\n    def post_setstatus(self, o):\n        self.check(asm3.users.CHANGE_TRANSPORT)\n        asm3.movement.update_transport_statuses(o.dbo, o.user, o.post.integer_list(\"ids\"), o.post.integer(\"newstatus\"))\n\nclass traploan(JSONEndpoint):\n    url = \"traploan\"\n    get_permissions = asm3.users.VIEW_TRAPLOAN\n\n    def controller(self, o):\n        dbo = o.dbo\n        traploans = []\n        offset = o.post[\"offset\"]\n        if offset == \"\" or offset == \"a\":\n            traploans = asm3.animalcontrol.get_active_traploans(dbo)\n        else:\n            traploans = asm3.animalcontrol.get_returned_traploans(dbo, offset)\n        asm3.al.debug(\"got %d trap loans\" % len(traploans), \"code.traploan\", dbo)\n        return {\n            \"name\": \"traploan\",\n            \"rows\": traploans,\n            \"traptypes\": asm3.lookups.get_trap_types(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_TRAPLOAN)\n        return asm3.animalcontrol.insert_traploan_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_TRAPLOAN)\n        asm3.animalcontrol.update_traploan_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_TRAPLOAN)\n        for lid in o.post.integer_list(\"ids\"):\n            asm3.animalcontrol.delete_traploan(o.dbo, o.user, lid)\n\nclass vaccination(JSONEndpoint):\n    url = \"vaccination\"\n    get_permissions = asm3.users.VIEW_VACCINATION\n\n    def controller(self, o):\n        dbo = o.dbo\n        offset = o.post[\"offset\"]\n        if offset == \"\": offset = \"m365\"\n        vacc = asm3.medical.get_vaccinations_outstanding(dbo, offset, o.locationfilter, o.siteid, o.visibleanimalids)\n        asm3.al.debug(\"got %d vaccinations\" % len(vacc), \"code.vaccination\", dbo)\n        return {\n            \"name\": \"vaccination\",\n            \"newvacc\": o.post.integer(\"newvacc\") == 1,\n            \"rows\": vacc,\n            \"batches\": asm3.medical.get_batch_for_vaccination_types(dbo),\n            \"manufacturers\": \"|\".join(asm3.medical.get_vacc_manufacturers(dbo)),\n            \"stockitems\": asm3.stock.get_stock_items(dbo),\n            \"stockusagetypes\": asm3.lookups.get_stock_usage_types(dbo),\n            \"users\": asm3.users.get_users(dbo),\n            \"vaccinationtypes\": asm3.lookups.get_vaccination_types(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_VACCINATION)\n        return asm3.medical.insert_vaccination_from_form(o.dbo, o.user, o.post)\n\n    def post_createbulk(self, o):\n        self.check(asm3.users.ADD_VACCINATION)\n        for animalid in o.post.integer_list(\"animals\"):\n            o.post.data[\"animal\"] = str(animalid)\n            asm3.medical.insert_vaccination_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_VACCINATION)\n        asm3.medical.update_vaccination_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_VACCINATION)\n        for vid in o.post.integer_list(\"ids\"):\n            asm3.medical.delete_vaccination(o.dbo, o.user, vid)\n\n    def post_given(self, o):\n        self.check(asm3.users.BULK_COMPLETE_VACCINATION)\n        post = o.post\n        newdate = post.date(\"newdate\")\n        rescheduledate = post.date(\"rescheduledate\")\n        reschedulecomments = post[\"reschedulecomments\"]\n        givenexpires = post.date(\"givenexpires\")\n        givenbatch = post[\"givenbatch\"]\n        givenmanufacturer = post[\"givenmanufacturer\"]\n        givenby = post[\"givenby\"]\n        givenrabiestag = post[\"givenrabiestag\"]\n        vet = post.integer(\"givenvet\")\n        for vid in post.integer_list(\"ids\"):\n            asm3.medical.complete_vaccination(o.dbo, o.user, vid, newdate, givenby, vet, givenexpires, givenbatch, givenmanufacturer, givenrabiestag)\n            if rescheduledate is not None:\n                asm3.medical.reschedule_vaccination(o.dbo, o.user, vid, rescheduledate, reschedulecomments)\n            if post.integer(\"item\") != -1:\n                asm3.medical.update_vaccination_batch_stock(o.dbo, o.user, vid, post.integer(\"item\"))\n        if post.integer(\"item\") != -1:\n            asm3.stock.deduct_stocklevel_from_form(o.dbo, o.user, post)\n\n    def post_required(self, o):\n        self.check(asm3.users.BULK_COMPLETE_VACCINATION)\n        newdate = o.post.date(\"newdate\")\n        for vid in o.post.integer_list(\"ids\"):\n            asm3.medical.update_vaccination_required(o.dbo, o.user, vid, newdate)\n\nclass voucher(JSONEndpoint):\n    url = \"voucher\"\n    js_module = \"vouchers\"\n    get_permissions = asm3.users.VIEW_VOUCHER\n\n    def controller(self, o):\n        dbo = o.dbo\n        offset = o.post[\"offset\"]\n        if offset == \"\": offset = \"i31\"\n        vouchers = asm3.financial.get_vouchers(dbo, offset)\n        asm3.al.debug(\"got %d vouchers for %s\" % (len(vouchers), offset), \"code.person_vouchers\", dbo)\n        return {\n            \"name\": \"voucher\",\n            \"rows\": vouchers,\n            \"templates\": asm3.template.get_document_templates(dbo, \"voucher\"),\n            \"vouchertypes\": asm3.lookups.get_voucher_types(dbo)\n        }\n\n    def post_create(self, o):\n        self.check(asm3.users.ADD_VOUCHER)\n        return asm3.financial.insert_voucher_from_form(o.dbo, o.user, o.post)\n\n    def post_update(self, o):\n        self.check(asm3.users.CHANGE_VOUCHER)\n        asm3.financial.update_voucher_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_VOUCHER)\n        for vid in o.post.integer_list(\"ids\"):\n            asm3.financial.delete_voucher(o.dbo, o.user, vid)\n\nclass waitinglist(JSONEndpoint):\n    url = \"waitinglist\"\n    get_permissions = asm3.users.VIEW_WAITING_LIST\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.waitinglist.get_waitinglist_by_id(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        recname = \"%s %s\" % (a.OWNERNAME, a.SPECIESNAME)\n        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, \"animalwaitinglist\", a[\"ID\"], recname)\n        asm3.al.debug(\"opened waiting list %s\" % recname, \"code.waitinglist\", dbo)\n        return {\n            \"animal\": a,\n            \"additional\": asm3.additional.get_additional_fields(dbo, a[\"ID\"], \"waitinglist\"),\n            \"audit\": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, \"animalwaitinglist\", a[\"ID\"]) or [],\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"sizes\": asm3.lookups.get_sizes(dbo),\n            \"species\": asm3.lookups.get_species(dbo),\n            \"urgencies\": asm3.lookups.get_urgencies(dbo),\n            \"templates\": asm3.template.get_document_templates(dbo, \"waitinglist\"),\n            \"templatesemail\": asm3.template.get_document_templates(dbo, \"email\"),\n            \"tabcounts\": asm3.waitinglist.get_satellite_counts(dbo, a[\"ID\"])[0]\n        }\n\n    def post_save(self, o):\n        self.check(asm3.users.CHANGE_WAITING_LIST)\n        asm3.waitinglist.update_waitinglist_from_form(o.dbo, o.post, o.user)\n\n    def post_email(self, o):\n        self.check(asm3.users.EMAIL_PERSON)\n        asm3.waitinglist.send_email_from_form(o.dbo, o.user, o.post)\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_WAITING_LIST)\n        asm3.waitinglist.delete_waitinglist(o.dbo, o.user, o.post.integer(\"id\"))\n\n    def post_toanimal(self, o):\n        self.check(asm3.users.ADD_ANIMAL)\n        return str(asm3.waitinglist.create_animal(o.dbo, o.user, o.post.integer(\"id\")))\n\nclass waitinglist_diary(JSONEndpoint):\n    url = \"waitinglist_diary\"\n    js_module = \"diary\"\n    get_permissions = asm3.users.VIEW_DIARY\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.waitinglist.get_waitinglist_by_id(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        diaries = asm3.diary.get_diaries(dbo, asm3.diary.WAITINGLIST, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d diaries\" % len(diaries), \"code.waitinglist_diary\", dbo)\n        return {\n            \"rows\": diaries,\n            \"animal\": a,\n            \"tabcounts\": asm3.waitinglist.get_satellite_counts(dbo, a[\"WLID\"])[0],\n            \"name\": \"waitinglist_diary\",\n            \"linkid\": a[\"WLID\"],\n            \"linktypeid\": asm3.diary.WAITINGLIST,\n            \"forlist\": asm3.users.get_users_and_roles(dbo)\n        }\n\nclass waitinglist_log(JSONEndpoint):\n    url = \"waitinglist_log\"\n    js_module = \"log\"\n    get_permissions = asm3.users.VIEW_LOG\n\n    def controller(self, o):\n        dbo = o.dbo\n        logfilter = o.post.integer(\"filter\")\n        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)\n        a = asm3.waitinglist.get_waitinglist_by_id(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        logs = asm3.log.get_logs(dbo, asm3.log.WAITINGLIST, o.post.integer(\"id\"), logfilter)\n        asm3.al.debug(\"got %d logs\" % len(logs), \"code.waitinglist_diary\", dbo)\n        return {\n            \"name\": \"waitinglist_log\",\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.log.WAITINGLIST,\n            \"filter\": logfilter,\n            \"rows\": logs,\n            \"animal\": a,\n            \"tabcounts\": asm3.waitinglist.get_satellite_counts(dbo, a[\"WLID\"])[0],\n            \"logtypes\": asm3.lookups.get_log_types(dbo)\n        }\n\nclass waitinglist_media(JSONEndpoint):\n    url = \"waitinglist_media\"\n    js_module = \"media\"\n    get_permissions = asm3.users.VIEW_MEDIA\n\n    def controller(self, o):\n        dbo = o.dbo\n        a = asm3.waitinglist.get_waitinglist_by_id(dbo, o.post.integer(\"id\"))\n        if a is None: self.notfound()\n        m = asm3.media.get_media(dbo, asm3.media.WAITINGLIST, o.post.integer(\"id\"))\n        asm3.al.debug(\"got %d media\" % len(m), \"code.waitinglist_media\", dbo)\n        return {\n            \"media\": m,\n            \"animal\": a,\n            \"tabcounts\": asm3.waitinglist.get_satellite_counts(dbo, a[\"WLID\"])[0],\n            \"showpreferred\": True,\n            \"canwatermark\": False,\n            \"linkid\": o.post.integer(\"id\"),\n            \"linktypeid\": asm3.media.WAITINGLIST,\n            \"logtypes\": asm3.lookups.get_log_types(dbo),\n            \"name\": self.url,\n            \"resizeimagespec\": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, \"\"),\n            \"templates\": asm3.template.get_document_templates(dbo, \"email\"),\n            \"sigtype\": ELECTRONIC_SIGNATURES\n        }\n\nclass waitinglist_new(JSONEndpoint):\n    url = \"waitinglist_new\"\n    get_permissions = asm3.users.ADD_WAITING_LIST\n    post_permissions = asm3.users.ADD_WAITING_LIST\n\n    def controller(self, o):\n        dbo = o.dbo\n        return {\n            \"species\": asm3.lookups.get_species(dbo),\n            \"additional\": asm3.additional.get_additional_fields(dbo, 0, \"waitinglist\"),\n            \"sizes\": asm3.lookups.get_sizes(dbo),\n            \"urgencies\": asm3.lookups.get_urgencies(dbo)\n        }\n\n    def post_all(self, o):\n        return str(asm3.waitinglist.insert_waitinglist_from_form(o.dbo, o.post, o.user))\n\nclass waitinglist_results(JSONEndpoint):\n    url = \"waitinglist_results\"\n    get_permissions = asm3.users.VIEW_WAITING_LIST\n\n    def controller(self, o):\n        dbo = o.dbo\n        post = o.post\n        priorityfloor = asm3.utils.iif(post[\"priorityfloor\"] == \"\", dbo.query_int(\"SELECT MAX(ID) FROM lkurgency\"), post.integer(\"priorityfloor\"))\n        speciesfilter = asm3.utils.iif(post[\"species\"] == \"\", -1, post.integer(\"species\"))\n        sizefilter = asm3.utils.iif(post[\"size\"] == \"\", -1, post.integer(\"size\"))\n        rows = asm3.waitinglist.get_waitinglist(dbo, priorityfloor, speciesfilter, sizefilter,\n            post[\"addresscontains\"], post.integer(\"includeremoved\"), post[\"namecontains\"], post[\"descriptioncontains\"])\n        add = None\n        if len(rows) > 0: \n            add = asm3.additional.get_additional_fields_ids(dbo, rows, \"waitinglist\")\n        asm3.al.debug(\"found %d results\" % (len(rows)), \"code.waitinglist_results\", dbo)\n        return {\n            \"rows\": rows,\n            \"additional\": add, \n            \"seladdresscontains\": post[\"addresscontains\"],\n            \"seldescriptioncontains\": post[\"descriptioncontains\"],\n            \"selincluderemoved\": post.integer(\"includeremoved\"),\n            \"selnamecontains\": post[\"namecontains\"],\n            \"selpriorityfloor\": priorityfloor,\n            \"selspecies\": speciesfilter,\n            \"selsize\": sizefilter,\n            \"species\": asm3.lookups.get_species(dbo),\n            \"sizes\": asm3.lookups.get_sizes(dbo),\n            \"urgencies\": asm3.lookups.get_urgencies(dbo),\n            \"yesno\": asm3.lookups.get_yesno(dbo)\n        }\n\n    def post_delete(self, o):\n        self.check(asm3.users.DELETE_WAITING_LIST)\n        for wid in o.post.integer_list(\"ids\"):\n            asm3.waitinglist.delete_waitinglist(o.dbo, o.user, wid)\n\n    def post_complete(self, o):\n        self.check(asm3.users.CHANGE_WAITING_LIST)\n        for wid in o.post.integer_list(\"ids\"):\n            asm3.waitinglist.update_waitinglist_remove(o.dbo, o.user, wid)\n\n    def post_highlight(self, o):\n        self.check(asm3.users.CHANGE_WAITING_LIST)\n        for wid in o.post.integer_list(\"ids\"):\n            asm3.waitinglist.update_waitinglist_highlight(o.dbo, wid, o.post[\"himode\"])\n\n\n\n# List of routes constructed from class definitions\nroutes = []\n\n# Setup the WSGI application object and session with mappings\napp = web.application(generate_routes(), globals(), autoreload=AUTORELOAD)\napp.notfound = asm_404\nif EMAIL_ERRORS:\n    app.internalerror = asm_500_email\nsession = session_manager()\n\n# Choose startup mode\nif DEPLOYMENT_TYPE == \"wsgi\":\n    application = app.wsgifunc()\nelif DEPLOYMENT_TYPE == \"fcgi\":\n    web.wsgi.runwsgi = lambda func, addr=None: web.wsgi.runfcgi(func, addr)\n    web.runwsgi = web.runfcgi\n\nif __name__ == \"__main__\":\n    app.run()\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/code.py b/src/code.py
--- a/src/code.py	(revision b0a8ce62bff68bb38ec7329c8f8da39aea676384)
+++ b/src/code.py	(date 1659005572898)
@@ -1,6693 +1,0 @@
-#!/usr/bin/env python3
-
-import os, sys
-
-# The path to the folder containing the ASM3 modules
-PATH = os.path.dirname(os.path.abspath(__file__)) + os.sep
-
-# Prepend our modules to the path to make sure they're added first
-sys.path.insert(0, PATH)
-
-import web062 as web
-
-import asm3.al
-import asm3.additional
-import asm3.animal
-import asm3.animalcontrol
-import asm3.asynctask
-import asm3.audit
-import asm3.cachedisk
-import asm3.cachemem
-import asm3.clinic
-import asm3.configuration
-import asm3.csvimport
-import asm3.db
-import asm3.dbfs
-import asm3.dbupdate
-import asm3.diary
-import asm3.financial
-import asm3.html
-import asm3.log
-import asm3.lookups
-import asm3.lostfound
-import asm3.media
-import asm3.medical
-import asm3.mobile
-import asm3.movement
-import asm3.onlineform
-import asm3.paymentprocessor.base
-import asm3.paymentprocessor.paypal
-import asm3.paymentprocessor.stripeh
-import asm3.paymentprocessor.cardcom
-import asm3.person
-import asm3.publish
-import asm3.publishers.base
-import asm3.publishers.html
-import asm3.publishers.vetenvoy
-import asm3.reports
-import asm3.search
-import asm3.service
-import asm3.smcom
-import asm3.stock
-import asm3.template
-import asm3.users
-import asm3.utils
-import asm3.waitinglist
-import asm3.wordprocessor
-
-from asm3.i18n import _, BUILD, translate, get_version, get_display_date_format, \
-    get_currency_prefix, get_currency_symbol, get_currency_dp, get_currency_radix, \
-    get_currency_digit_grouping, get_dst, get_locales, parse_date, python2display, \
-    add_minutes, add_days, subtract_days, subtract_months, first_of_month, last_of_month, \
-    monday_of_week, sunday_of_week, first_of_year, last_of_year, now, format_currency
-
-from asm3.sitedefs import AUTORELOAD, BASE_URL, CONTENT_SECURITY_POLICY, DEPLOYMENT_TYPE, \
-    ELECTRONIC_SIGNATURES, EMERGENCY_NOTICE, \
-    AKC_REUNITE_BASE_URL, HOMEAGAIN_BASE_URL, LARGE_FILES_CHUNKED, LOCALE, JQUERY_UI_CSS, \
-    LEAFLET_CSS, LEAFLET_JS, MULTIPLE_DATABASES, \
-    ADMIN_EMAIL, EMAIL_ERRORS, MADDIES_FUND_TOKEN_URL, HTMLFTP_PUBLISHER_ENABLED, \
-    MANUAL_HTML_URL, MANUAL_PDF_URL, MANUAL_FAQ_URL, MANUAL_VIDEO_URL, MAP_LINK, MAP_PROVIDER, \
-    MAP_PROVIDER_KEY, OSM_MAP_TILES, FOUNDANIMALS_FTP_USER, PETCADEMY_FTP_HOST, \
-    PETLINK_BASE_URL, PETRESCUE_URL, PETSLOCATED_FTP_USER, QR_IMG_SRC, \
-    RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, \
-    SAVOURLIFE_URL,SERVICE_URL, SESSION_SECURE_COOKIE, SESSION_DEBUG, SHARE_BUTTON, SMARTTAG_FTP_USER, \
-    SMCOM_LOGIN_URL, SMCOM_PAYMENT_LINK, PAYPAL_VALIDATE_IPN_URL
-
-CACHE_ONE_HOUR = 3600
-CACHE_ONE_DAY = 86400
-CACHE_ONE_WEEK = 604800
-CACHE_ONE_MONTH = 2592000
-CACHE_ONE_YEAR = 31536000 
-
-def session_manager():
-    """
-    Sort out our session manager. We use a global in the utils module
-    to hold the session to make sure if the app/code.py is reloaded it
-    always gets the same session manager.
-    """
-    class MemCacheStore(web.session.Store):
-        """ 
-        A session manager that uses either an in-memory dictionary or memcache
-        (if available).
-        """
-        def __contains__(self, key):
-            rv = asm3.cachemem.get(key) is not None
-            if SESSION_DEBUG: asm3.al.debug("contains(%s)=%s" % (key, rv), "MemCacheStore.__contains__")
-            return rv
-        def __getitem__(self, key):
-            rv = asm3.cachemem.get(key)
-            if SESSION_DEBUG: asm3.al.debug("getitem(%s)=%s" % (key, rv), "MemCacheStore.__getitem__")
-            return rv
-        def __setitem__(self, key, value):
-            rv = asm3.cachemem.put(key, value, web.config.session_parameters["timeout"])
-            if SESSION_DEBUG: asm3.al.debug("setitem(%s, %s)=%s" % (key, value, rv), "MemCacheStore.__setitem__")
-            return rv
-        def __delitem__(self, key):
-            rv = asm3.cachemem.delete(key)
-            if SESSION_DEBUG: asm3.al.debug("delitem(%s)=%s" % (key, rv), "MemCacheStore.__delitem__")
-            return rv
-        def cleanup(self, timeout):
-            pass # Not needed, we assign values to memcache with timeout
-    # Set session parameters, 24 hour timeout
-    web.config.session_parameters["cookie_name"] = "asm_session_id"
-    web.config.session_parameters["cookie_path"] = "/"
-    web.config.session_parameters["timeout"] = 86400
-    web.config.session_parameters["ignore_change_ip"] = True
-    web.config.session_parameters["ignore_expiry"] = True # session disappears on timeout set above 
-    web.config.session_parameters["secure"] = SESSION_SECURE_COOKIE
-    sess = None
-    if asm3.utils.websession is None:
-        sess = web.session.Session(app, MemCacheStore(), initializer={"user" : None, "dbo" : None, "locale" : None, 
-            "searches" : [], "siteid": None, "locationfilter": None, "staffid": None, "visibleanimalids": "" })
-        asm3.utils.websession = sess
-    else:
-        sess = asm3.utils.websession
-    return sess
-
-def asm_404():
-    """
-    Custom 404 page
-    """
-    s = """<!DOCTYPE html>
-        <html>
-        <head>
-        <title>404</title>
-        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
-        <link rel="shortcut icon" href="static/images/logo/icon-16.png">
-        <link rel="icon" href="static/images/logo/icon-32.png" sizes="32x32">
-        <link rel="icon" href="static/images/logo/icon-48.png" sizes="48x48">
-        <link rel="icon" href="static/images/logo/icon-128.png" sizes="128x128">
-        </head>
-        <body style="background-color: #999">
-        <div style="position: absolute; left: 20%; width: 60%; padding: 20px; background-color: white">
-
-        <img src="static/images/logo/icon-64.png" align="right" />
-        <h2>Error 404</h2>
-
-        <p>Sorry, but the record or resource you tried to access was not found.</p>
-
-        <p><a href="javascript:history.back()">Go Back</a></p>
-
-        </div>
-        </body>
-        </html>
-    """
-    web.header("Content-Type", "text/html")
-    web.header("Cache-Control", "public, max-age=3600, s-maxage=3600") # Cache 404s for an hour at any proxy/CDN as they can be a DoS vector
-    session.no_cookie = True
-    return web.notfound(s)
-
-def asm_500_email():
-    """
-    Custom 500 error page that sends emails to the site admin
-    """
-    asm3.utils.send_error_email()
-    s = """
-        <html>
-        <head>
-        <title>500</title>
-        <meta http-equiv="refresh" content="5;url=main">
-        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
-        <link rel="shortcut icon" href="static/images/logo/icon-16.png">
-        <link rel="icon" href="static/images/logo/icon-32.png" sizes="32x32">
-        <link rel="icon" href="static/images/logo/icon-48.png" sizes="48x48">
-        <link rel="icon" href="static/images/logo/icon-128.png" sizes="128x128">
-        </head>
-        <body style="background-color: #999">
-        <div style="position: absolute; left: 20%; width: 60%; padding: 20px; background-color: white">
-
-        <img src="static/images/logo/icon-64.png" align="right" />
-        <h2>Error 500</h2>
-
-        <p>An error occurred trying to process your request.</p>
-
-        <p>The system administrator has been notified to fix the problem.</p>
-
-        <p>Sometimes, a database update needs to have been run, or you 
-        need to update your browser's local version of the application. 
-        Please return to the <a href="main">home page</a> to run and
-        receive any updates.</p>
-
-        </div>
-        </body>
-        </html>
-    """
-    web.header("Content-Type", "text/html")
-    web.header("Cache-Control", "no-cache, no-store, must-revalidate, max-age=0") # Never cache 500 errors
-    return web.internalerror(s)
-
-def emergency_notice():
-    """
-    Returns emergency notice text if any is set.
-    """
-    if EMERGENCY_NOTICE != "":
-        if os.path.exists(EMERGENCY_NOTICE):
-            s = asm3.utils.read_text_file(EMERGENCY_NOTICE)
-            return s
-    return ""
-
-def generate_routes():
-    """ Extract the url property from all classes and construct the route list """
-    g = globals().copy()
-    for name, obj in g.items():
-        try:
-            url = getattr(obj, "url")
-            if url != "" and name != "web":
-                if not url.startswith("/"): url = "/%s" % url
-                routes.append(url)
-                routes.append(name)
-        except:
-            pass # Ignore objects that don't have url attributes
-    return routes
-
-class ASMEndpoint(object):
-    """ Base class for ASM endpoints """
-    url = ""               # The route/url to this target
-    get_permissions = ( )  # List of permissions needed to GET
-    post_permissions = ( ) # List of permissions needed to POST
-    check_logged_in = True # Check whether we have a valid login
-    session_cookie = True  # Whether to send a session cookie
-    user_activity = True   # Hitting this endpoint qualifies as user activity
-    use_web_input = True   # Unpack values with webpy's web.input()
-    login_url = "login"    # The url to go to if not logged in
-    data = None            # Request data posted to this endpoint as bytes or str if data_encoding is set
-    data_encoding = None   # codec to use for decoding of posted data to str (None to not decode)
-
-    def _params(self):
-        l = session.locale
-        if l is None:
-            l = LOCALE
-        post = asm3.utils.PostedData({}, l)
-        try:
-            if self.use_web_input: post = asm3.utils.PostedData(web.input(filechooser = {}), l)
-            self.data = web.data()
-            if self.data_encoding: self.data = asm3.utils.bytes2str(self.data, encoding=self.data_encoding)
-        except Exception as err:
-            asm3.al.error("Failed unpacking params: %s" % str(err), "ASMEndpoint._params", session.dbo, sys.exc_info())
-        return web.utils.storage( data=self.data, post=post, dbo=session.dbo, locale=l, user=session.user, session=session, \
-            siteid = session.siteid, locationfilter = session.locationfilter, staffid = session.staffid,
-            visibleanimalids = session.visibleanimalids )
-
-    def check(self, permissions):
-        """ Check logged in and permissions (which can be a single permission string or a list/tuple) """
-        if not self.session_cookie:
-            session.no_cookie = True # Stop the session object calling setcookie
-        if self.check_logged_in:
-            self.check_loggedin(session, web, self.login_url)
-        if isinstance(permissions, str):
-            asm3.users.check_permission(session, permissions)
-        else:
-            for p in permissions:
-                asm3.users.check_permission(session, p)
-
-    def checkb(self, permissions):
-        """ Check logged in and a single permission, returning a boolean """
-        if self.check_logged_in:
-            self.check_loggedin(session, web, self.login_url)
-        return asm3.users.check_permission_bool(session, permissions)
-
-    def check_animal(self, a):
-        """ Checks whether the animal we're about to look at is viewable by the user """
-        if not asm3.animal.is_animal_in_location_filter(a, session.locationfilter, session.siteid, session.visibleanimalids):
-            raise asm3.utils.ASMPermissionError("animal not in location filter/site")
-
-    def check_locked_db(self):
-        if session.dbo and session.dbo.locked: 
-            l = session.locale
-            raise asm3.utils.ASMPermissionError(_("This database is locked.", l))
-
-    def check_loggedin(self, session, web, loginpage = "login"):
-        """
-        Checks if we have a logged in user and if not, redirects to
-        the login page
-        """
-        if not self.is_loggedin(session):
-            path = web.ctx.path
-            if path.startswith("/"): path = path[1:]
-            query = str(web.ctx.query)
-            raise web.seeother("%s/%s?target=%s%s" % (BASE_URL, loginpage, path, query))
-        elif self.user_activity:
-            # update the last user activity if logged in
-            asm3.users.update_user_activity(session.dbo, session.user)
-
-    def content(self, o):
-        """ Virtual function: override to get the content """
-        return ""
-
-    def cache_control(self, client_ttl = 0, cache_ttl = 0):
-        """ Sends a cache control header.
-        client_ttl: The max-age to send for the client
-        cache_ttl:  The s-maxage to send for an edge cache
-        """
-        if client_ttl == 0 and cache_ttl == 0:
-            self.header("Cache-Control", "no-cache, no-store, must-revalidate, max-age=0")
-        elif client_ttl > 0 and cache_ttl == 0:
-            self.header("Cache-Control", "public, max-age=%s" % client_ttl)
-        else:
-            self.header("Cache-Control", "public, max-age=%s, s-maxage=%s" % (client_ttl, cache_ttl))
-
-    def content_type(self, ct):
-        """ Sends a content-type header """
-        self.header("Content-Type", ct)
-
-    def data_param(self, p):
-        """ Returns a URL encoded parameter from the data stream.
-            This is useful for some services where they send data in
-            odd encodings (eg: PayPal use cp1252) and we can't use 
-            web.input, which assumes utf-8 """
-        for b in self.data.split("&"):
-            if b.startswith(p):
-                return b.split("=")[1]
-        return ""
-
-    def get_cookie(self, s):
-        """ Returns the value of cookie s. Returns None if it does not exist. """
-        try:
-            return web.cookies().get(s)
-        except:
-            return None
-
-    def set_cookie(self, name, value, ttl):
-        """ Sets a cookie value """
-        web.setcookie(name, value, expires=ttl, secure=SESSION_SECURE_COOKIE, httponly=True)
-
-    def header(self, key, value):
-        """ Set the response header key to value """
-        web.header(key, value)
-
-    def is_loggedin(self, session):
-        """
-        Returns true if the user is logged in
-        """
-        return "user" in session and session.user is not None
-
-    def notfound(self):
-        """ Returns a 404 """
-        raise web.notfound()
-
-    def post_all(self, o):
-        """ Virtual function: override to handle postback """
-        return ""
-
-    def query(self):
-        """ Returns the request query string """
-        return web.ctx.query
-
-    def redirect(self, route):
-        """ Redirect to another route 
-            Uses BASE_URL if a relative route is given to help CDNs. """
-        if not route.startswith("http"): route = "%s/%s" % (BASE_URL, route)
-        raise web.seeother(route)
-
-    def referer(self):
-        """ Returns the referer request header """
-        return web.ctx.env.get("HTTP_REFERER", "")
-
-    def reload_config(self):
-        """ Reloads items in the session based on database values, invalidates config.js so client reloads it """
-        asm3.users.update_session(session)
-
-    def remote_ip(self):
-        """ Gets the IP address of the requester, taking account of reverse proxies """
-        remoteip = web.ctx['ip']
-        if "HTTP_X_FORWARDED_FOR" in web.ctx.env:
-            xf = web.ctx.env["HTTP_X_FORWARDED_FOR"]
-            if xf is not None and str(xf).strip() != "":
-                remoteip = xf
-        return remoteip
-
-    def user_agent(self):
-        """ Returns the user agent request header """
-        return web.ctx.env.get("HTTP_USER_AGENT", "")
-
-    def GET(self):
-        self.check(self.get_permissions)
-        return self.content(self._params())
-
-    def POST(self):
-        """ Handle a POST, deal with permissions and locked databases """
-        if self.check_logged_in:
-            self.check_locked_db()
-        self.check(self.post_permissions)
-        o = self._params()
-        mode = o.post["mode"]
-        if mode == "": 
-            return self.post_all(o)
-        else:
-            # Mode has been supplied, call post_mode
-            return getattr(self.__class__, "post_%s" % mode)(self, o)
-
-class GeneratorEndpoint(ASMEndpoint):
-    """Base class for endpoints that use generators for their content """
-    def GET(self):
-        self.check(self.get_permissions)
-        if LARGE_FILES_CHUNKED: 
-            self.header("Transfer-Encoding", "chunked")
-        for x in self.content(self._params()):
-            yield x
-
-class JSONEndpoint(ASMEndpoint):
-    """ Base class for ASM endpoints that return JSON """
-    js_module = ""         # The javascript module to start (can be omitted if same as url)
-    url = ""               # The route/url to this target
-
-    def controller(self, o):
-        """ Virtual function to be overridden - return controller as a dict """
-        return {}
-
-    def GET(self):
-        """ Handle a GET, deal with permissions, session and JSON responses """
-        self.check(self.get_permissions)
-        o = self._params()
-        c = self.controller(o)
-        self.cache_control(0)
-        if self.js_module == "":
-            self.js_module = self.url
-        if not o.post["json"] == "true":
-            self.content_type("text/html")
-            self.header("X-Frame-Options", "SAMEORIGIN") 
-            self.header("X-Content-Type-Options", "nosniff") 
-            self.header("X-XSS-Protection", "1; mode=block") 
-            self.header("Referrer-Policy", "same-origin") 
-            self.header("Strict-Transport-Security", "max-age=%s" % CACHE_ONE_MONTH) 
-            nonce = asm3.utils.uuid_str()
-            # CSP is not applied to users of the mobile app as we still have users with
-            # older iPads on iOS/Safari 9 that only supports CSP1
-            if CONTENT_SECURITY_POLICY != "" and not o.session.mobileapp:
-                self.header("Content-Security-Policy", CONTENT_SECURITY_POLICY % { "nonce": nonce })
-            return "%(header)s\n" \
-                "<script nonce='%(nonce)s'>\n" \
-                "controller=%(controller)s;\n" \
-                "$(document).ready(function() { " \
-                "common.route_listen(); " \
-                "common.module_start(\"%(js_module)s\"); " \
-                "%(js_injection)s " \
-                "});\n</script>\n</body>\n</html>" % { 
-                    "controller": asm3.utils.json(c),
-                    "header": asm3.html.header("", session),
-                    "js_injection": asm3.configuration.js_injection(o.dbo),
-                    "js_module": self.js_module, 
-                    "nonce": nonce }
-        else:
-            self.content_type("application/json")
-            return asm3.utils.json(c)
-
-class index(ASMEndpoint):
-    url = "/"
-    check_logged_in = False
-
-    def content(self, o):
-        # If there's no database structure, create it before 
-        # redirecting to the login page.
-        if not MULTIPLE_DATABASES:
-            dbo = asm3.db.get_database()
-            if not dbo.has_structure():
-                self.redirect("database")
-        self.redirect("main")
-
-class database(ASMEndpoint):
-    url = "database"
-    check_logged_in = False
-
-    def content(self, o):
-        if MULTIPLE_DATABASES:
-            if asm3.smcom.active():
-                raise asm3.utils.ASMPermissionError("N/A for sm.com")
-            else:
-                # We can't create the database as we have multiple, so
-                # output the SQL creation script with default data
-                # for whatever our dbtype is instead
-                dbo = asm3.db.get_dbo()
-                s = "-- Creation script for %s\n\n" % dbo.dbtype
-                s += asm3.dbupdate.sql_structure(dbo)
-                s += asm3.dbupdate.sql_default_data(dbo).replace("|=", ";")
-                self.content_type("text/plain")
-                self.header("Content-Disposition", "attachment; filename=\"setup.sql\"")
-                return s
-
-        dbo = asm3.db.get_database()
-        if dbo.has_structure():
-            raise asm3.utils.ASMPermissionError("Database already created")
-
-        s = asm3.html.bare_header("Create your database")
-        s += """
-            <h2>Create your new ASM database</h2>
-            <form id="cdbf" method="post" action="database">
-            <p>Please select your locale: 
-            <select name="locale" class="asm-selectbox">
-            %s
-            </select>
-            </p>
-            <button id="createdb">Create Database</button>
-            <div id="info" class="ui-state-highlight ui-corner-all" style="margin-top: 20px; padding: 0 .7em; display: none">
-            <p><span class="ui-icon ui-icon-info" style="float: left; margin-right: .3em;"></span>
-            Please be patient, this can take upto a few minutes.
-            </p>
-            </div>
-            </form>
-            <script type="text/javascript">
-            $("select").val("%s");
-            $("#createdb").button().click(function() {
-                $("#createdb").button("disable");
-                $("#info").fadeIn();
-                $("#cdbf").submit();
-            });
-            </script>
-            """ % (asm3.html.options_locales(), LOCALE)
-        s += asm3.html.footer()
-        self.content_type("text/html")
-        return s
-
-    def post_all(self, o):
-        dbo = asm3.db.get_database()
-        dbo.locale = o.post["locale"]
-        dbo.installpath = PATH
-        asm3.dbupdate.install(dbo)
-        self.redirect("login")
-
-class faviconico(ASMEndpoint):
-    url = "favicon.ico"
-    session_cookie = False
-    check_logged_in = False
-
-    def content(self, o):
-        self.cache_control(CACHE_ONE_HOUR, CACHE_ONE_HOUR)
-        self.redirect("static/images/logo/icon-16.png")
-
-class image(ASMEndpoint):
-    url = "image"
-    user_activity = False
-    session_cookie = False # Disable sending the cookie with the response to assist with caching
-
-    def content(self, o):
-        try:
-            # Use a read through disk cache for thumbnails.
-            # This saves on database calls and thumbnail scaling for busier sites.
-            # We only cache if a date parameter is specified so that changing the date can invalidate the cache.
-            cache_indicator = ""
-            if o.post["date"] != "" and o.post["mode"].endswith("thumb"):
-                cache_key = "%s:id=%s:seq=%s:date=%s" % ( o.post["mode"], o.post["id"], o.post.integer("seq"), o.post["date"])
-                cache_path = o.dbo.database
-                imagedata = asm3.cachedisk.get(cache_key, cache_path)
-                cache_indicator = asm3.utils.iif(imagedata is None, "", " from cache")
-                if imagedata is None:
-                    lastmod, imagedata = asm3.media.get_image_file_data(o.dbo, o.post["mode"], o.post["id"], o.post.integer("seq"), False)
-                    if len(imagedata) > 50: # Never cache empty/broken thumbnails
-                        asm3.cachedisk.put(cache_key, cache_path, imagedata, CACHE_ONE_WEEK)
-            else:
-                lastmod, imagedata = asm3.media.get_image_file_data(o.dbo, o.post["mode"], o.post["id"], o.post.integer("seq"), False)
-        except Exception as err:
-            # The call to get_image_file_data can produce a lot of errors when people try to access 
-            # images via unsubstituted tokens in documents, etc. 
-            # Log them instead of throwing an error that will end up in our error box
-            asm3.al.error(str(err), "code.image", o.dbo, sys.exc_info())
-            raise asm3.utils.ASMError("failure retrieving image")
-
-        if imagedata != b"NOPIC":
-            self.content_type("image/jpeg")
-            if o.post["date"] != "":
-                # if we have a date parameter, it can be used to invalidate any cache, so cache on the client for a long time
-                self.cache_control(CACHE_ONE_YEAR)
-            else:
-                # otherwise cache for an hour in CDNs and just for the day locally
-                self.cache_control(CACHE_ONE_DAY, CACHE_ONE_HOUR)
-            asm3.al.debug("mode=%s id=%s seq=%s (%s bytes%s)" % (o.post["mode"], o.post["id"], o.post["seq"], len(imagedata), cache_indicator), "image.content", o.dbo)
-            return imagedata
-        else:
-            # If a parameter of nopic=404 is passed, we return a 404 instead of redirecting to nopic
-            if o.post["nopic"] == "404": self.notfound()
-            self.redirect("image?db=%s&mode=nopic" % o.dbo.database)
-
-class configjs(ASMEndpoint):
-    url = "config.js"
-    check_logged_in = False
-    user_activity = False
-
-    def content(self, o):
-        # db is the database name and ts is the date/time the config was
-        # last read upto. The ts value (config_ts) is set during login and
-        # updated whenever the user posts to publish_options or options.
-        # Both values are used purely to cache the config in the browser, but
-        # aren't actually used by the controller here.
-        # post = asm3.utils.PostedData(web.input(db = "", ts = ""), o.locale)
-        if o.user is None:
-            # We aren't logged in and can't do anything, don't cache an empty page
-            self.content_type("text/javascript")
-            self.cache_control(0)
-            return ""
-        dbo = o.dbo
-        self.content_type("text/javascript")
-        self.cache_control(CACHE_ONE_YEAR)
-        realname = ""
-        emailaddress = ""
-        expirydate = ""
-        expirydatedisplay = ""
-        if asm3.smcom.active():
-            expirydate = asm3.smcom.get_expiry_date(dbo)
-            if expirydate is not None: 
-                expirydatedisplay = python2display(o.locale, expirydate)
-                expirydate = expirydate.isoformat()
-        us = asm3.users.get_users(dbo, o.user)
-        if len(us) > 0:
-            emailaddress = asm3.utils.nulltostr(us[0]["EMAILADDRESS"])
-            realname = asm3.utils.nulltostr(us[0]["REALNAME"])
-        mapprovider = MAP_PROVIDER
-        mapprovidero = asm3.configuration.map_provider_override(dbo)
-        mapproviderkey = MAP_PROVIDER_KEY
-        mapproviderkeyo = asm3.configuration.map_provider_key_override(dbo)
-        if mapprovidero != "": mapprovider = mapprovidero
-        if mapproviderkeyo != "": mapproviderkey = mapproviderkeyo
-        maplink = MAP_LINK
-        maplinko = asm3.configuration.map_link_override(dbo)
-        if maplinko != "": maplinko = maplink
-        osmmaptiles = OSM_MAP_TILES
-        osmmaptileso = asm3.configuration.osm_map_tiles_override(dbo)
-        if osmmaptileso != "": osmmaptiles = osmmaptileso
-        c = { "baseurl": BASE_URL,
-            "serviceurl": SERVICE_URL,
-            "build": BUILD,
-            "locale": o.locale,
-            "theme": o.session.theme,
-            "user": o.session.user,
-            "useremail": emailaddress,
-            "userreal": realname,
-            "useraccount": dbo.database,
-            "useraccountalias": dbo.alias,
-            "dateformat": get_display_date_format(o.locale),
-            "currencysymbol": get_currency_symbol(o.locale),
-            "currencydp": get_currency_dp(o.locale),
-            "currencyprefix": get_currency_prefix(o.locale),
-            "currencyradix": get_currency_radix(o.locale),
-            "currencydigitgrouping": get_currency_digit_grouping(o.locale),
-            "securitymap": o.session.securitymap,
-            "superuser": o.session.superuser,
-            "locationfilter": o.locationfilter,
-            "siteid": o.siteid,
-            "roles": o.session.roles,
-            "roleids": o.session.roleids,
-            "manualhtml": MANUAL_HTML_URL,
-            "manualpdf": MANUAL_PDF_URL,
-            "manualfaq": MANUAL_FAQ_URL,
-            "manualvideo": MANUAL_VIDEO_URL,
-            "microchipmanufacturers": asm3.lookups.MICROCHIP_MANUFACTURERS,
-            "smcom": asm3.smcom.active(),
-            "smcomexpiry": expirydate,
-            "smcomexpirydisplay": expirydatedisplay,
-            "smcompaymentlink": SMCOM_PAYMENT_LINK.replace("{alias}", dbo.alias).replace("{database}", dbo.database),
-            "jqueryuicss": JQUERY_UI_CSS,
-            "leafletcss": LEAFLET_CSS,
-            "leafletjs": LEAFLET_JS,
-            "maplink": maplink,
-            "mapprovider": mapprovider,
-            "mapproviderkey": mapproviderkey,
-            "osmmaptiles": osmmaptiles,
-            "hascustomlogo": asm3.dbfs.file_exists(dbo, "logo.jpg"),
-            "mobileapp": o.session.mobileapp,
-            "config": asm3.configuration.get_map(dbo),
-            "menustructure": asm3.html.menu_structure(o.locale, 
-                asm3.publish.PUBLISHER_LIST,
-                asm3.reports.get_reports_menu(dbo, o.session.roleids, o.session.superuser), 
-                asm3.reports.get_mailmerges_menu(dbo, o.session.roleids, o.session.superuser)),
-            "publishers": asm3.publish.PUBLISHER_LIST
-        }
-        return "const asm = %s;" % asm3.utils.json(c)
-
-class csperror(ASMEndpoint):
-    """
-    Target for logging content security policy errors from the frontend
-    via the CSP directive: report-uri /csperror
-    Nothing is returned as the UI does not expect a response.
-    Errors are logged and emailed to the admin if EMAIL_ERRORS is set.
-    """
-    url = "csperror"
-    user_activity = False
-
-    def post_all(self, o):
-        asm3.al.error(str(self.data), "code.csperror", o.dbo)
-        if EMAIL_ERRORS:
-            asm3.utils.send_email(o.dbo, ADMIN_EMAIL, ADMIN_EMAIL, "", "", "CSP violation", str(self.data), "plain", exceptions=False)
-
-class jserror(ASMEndpoint):
-    """
-    Target for logging javascript errors from the frontend.
-    Nothing is returned as the UI does not expect a response.
-    Errors are logged and emailed to the admin if EMAIL_ERRORS is set.
-    """
-    url = "jserror"
-    user_activity = False
-
-    def post_all(self, o):
-        dbo = o.dbo
-        post = o.post
-        emailsubject = "%s @ %s" % (post["user"], post["account"])
-        emailbody = "%s:\n\n%s\n\nUA: %s\nIP: %s" % (post["msg"], post["stack"], self.user_agent(), self.remote_ip())
-        logmess = "%s@%s: %s %s" % (post["user"], post["account"], post["msg"], post["stack"])
-        asm3.al.error(logmess, "code.jserror", dbo)
-        if EMAIL_ERRORS:
-            asm3.utils.send_email(dbo, ADMIN_EMAIL, ADMIN_EMAIL, "", "", emailsubject, emailbody, "plain", exceptions=False)
-
-class media(ASMEndpoint):
-    url = "media"
-
-    def content(self, o):
-        lastmod, medianame, mimetype, filedata = asm3.media.get_media_file_data(o.dbo, o.post.integer("id"))
-        self.content_type(mimetype)
-        self.header("Content-Disposition", "inline; filename=\"%s\"" % medianame)
-        self.cache_control(CACHE_ONE_DAY)
-        asm3.al.debug("%s %s (%s bytes)" % (medianame, mimetype, len(filedata)), "media.content", o.dbo)
-        return filedata
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_MEDIA)
-        linkid = o.post.integer("linkid")
-        linktypeid = o.post.integer("linktypeid")
-        asm3.media.attach_file_from_form(o.dbo, o.user, linktypeid, linkid, o.post)
-        self.redirect("%s?id=%d" % (o.post["controller"], linkid))
-
-    def post_createdoc(self, o):
-        self.check(asm3.users.ADD_MEDIA)
-        linkid = o.post.integer("linkid")
-        linktypeid = o.post.integer("linktypeid")
-        mediaid = asm3.media.create_blank_document_media(o.dbo, o.user, linktypeid, linkid)
-        self.redirect("document_media_edit?id=%d&redirecturl=%s?id=%d" % (mediaid, o.post["controller"], linkid))
-
-    def post_createlink(self, o):
-        self.check(asm3.users.ADD_MEDIA)
-        linkid = o.post.integer("linkid")
-        linktypeid = o.post.integer("linktypeid")
-        asm3.media.attach_link_from_form(o.dbo, o.user, linktypeid, linkid, o.post)
-        self.redirect("%s?id=%d" % (o.post["controller"], linkid))
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        asm3.media.update_media_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_MEDIA)
-        for mid in o.post.integer_list("ids"):
-            asm3.media.delete_media(o.dbo, o.user, mid)
-
-    def post_email(self, o):
-        self.check(asm3.users.EMAIL_PERSON)
-        dbo = o.dbo
-        post = o.post
-        emailadd = post["to"]
-        attachments = []
-        subject = [ post["subject"] ]
-        linktypeid = 0
-        linkid = 0
-        for mid in post.integer_list("ids"):
-            m = asm3.media.get_media_by_id(dbo, mid)
-            filename = asm3.media._get_media_filename(m)
-            if m is None: self.notfound()
-            linktypeid = m.LINKTYPEID
-            linkid = m.LINKID
-            content = asm3.dbfs.get_string(dbo, m.MEDIANAME)
-            if m.MEDIAMIMETYPE == "text/html":
-                content = asm3.utils.bytes2str(content)
-                content = asm3.utils.fix_relative_document_uris(dbo, content)
-                content = asm3.utils.str2bytes(content)
-            attachments.append(( filename, m.MEDIAMIMETYPE, content ))
-            subject.append(filename)
-        asm3.utils.send_email(dbo, post["from"], emailadd, post["cc"], post["bcc"], post["subject"], post["body"], "html", attachments)
-        if asm3.configuration.audit_on_send_email(dbo): 
-            asm3.audit.email(dbo, o.user, post["from"], emailadd, post["cc"], post["bcc"], post["subject"], post["body"])
-        if post.boolean("addtolog"):
-            asm3.log.add_log_email(dbo, o.user, asm3.media.get_log_from_media_type(linktypeid), linkid, post.integer("logtype"), 
-                emailadd, ", ".join(subject), post["body"])
-        return emailadd
-
-    def post_emailpdf(self, o):
-        self.check(asm3.users.EMAIL_PERSON)
-        dbo = o.dbo
-        post = o.post
-        emailadd = post["to"]
-        attachments = []
-        subject = [ post["subject"] ]
-        linktypeid = 0
-        linkid = 0
-        for mid in post.integer_list("ids"):
-            m = asm3.media.get_media_by_id(dbo, mid)
-            if m is None: self.notfound()
-            if m.MEDIAMIMETYPE != "text/html": continue
-            linktypeid = m.LINKTYPEID
-            linkid = m.LINKID
-            content = asm3.utils.bytes2str(asm3.dbfs.get_string(dbo, m.MEDIANAME))
-            contentpdf = asm3.utils.html_to_pdf(dbo, content)
-            filename = asm3.media._get_media_filename(m).replace(".html", ".pdf")
-            attachments.append(( filename, "application/pdf", contentpdf ))
-            subject.append(filename)
-        asm3.utils.send_email(dbo, post["from"], emailadd, post["cc"], post["bcc"], post["subject"], post["body"], "html", attachments)
-        if asm3.configuration.audit_on_send_email(dbo): 
-            asm3.audit.email(dbo, o.user, post["from"], emailadd, post["cc"], post["bcc"], post["subject"], post["body"])
-        if post.boolean("addtolog"):
-            asm3.log.add_log_email(dbo, o.user, asm3.media.get_log_from_media_type(linktypeid), linkid, post.integer("logtype"), 
-                emailadd, ", ".join(subject), post["body"])
-        return emailadd
-
-    def post_emailsign(self, o):
-        self.check(asm3.users.EMAIL_PERSON)
-        dbo = o.dbo
-        post = o.post
-        l = o.locale
-        emailadd = post["to"]
-        body = post["body"]
-        for mid in post.integer_list("ids"):
-            m = asm3.media.get_media_by_id(dbo, mid)
-            if m is None: raise web.notfound()
-            if m.MEDIAMIMETYPE != "text/html": continue
-            token = asm3.utils.md5_hash_hex("%s%s" % (m.ID, m.LINKID))
-            url = "%s?account=%s&method=sign_document&email=%s&formid=%d&token=%s" % (SERVICE_URL, dbo.database, asm3.utils.strip_email_address(emailadd).replace("@", "%40"), mid, token)
-            body = asm3.utils.replace_url_token(body, url, m.MEDIANOTES)
-            if post.boolean("addtolog"):
-                asm3.log.add_log_email(dbo, o.user, asm3.media.get_log_from_media_type(m.LINKTYPEID), m.LINKID, post.integer("logtype"), 
-                    emailadd, _("Document signing request", l), body)
-            asm3.media.create_log(dbo, o.user, mid, "ES01", _("Document signing request", l))
-            asm3.utils.send_email(dbo, post["from"], emailadd, post["cc"], post["bcc"], post["subject"], body, "html")
-            if asm3.configuration.audit_on_send_email(dbo): 
-                asm3.audit.email(dbo, o.user, post["from"], emailadd, post["cc"], post["bcc"], post["subject"], body)
-        return emailadd
-
-    def post_jpg2pdf(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        for mid in o.post.integer_list("ids"):
-            asm3.media.convert_media_jpg2pdf(o.dbo, o.user, mid)
-
-    def post_moveanimal(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        for mid in o.post.integer_list("ids"):
-            asm3.media.update_media_link(o.dbo, o.user, mid, asm3.media.ANIMAL, o.post.integer("animalid"))
-
-    def post_moveperson(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        for mid in o.post.integer_list("ids"):
-            asm3.media.update_media_link(o.dbo, o.user, mid, asm3.media.PERSON, o.post.integer("personid"))
-
-    def post_sign(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        for mid in o.post.integer_list("ids"):
-            asm3.media.sign_document(o.dbo, o.user, mid, o.post["sig"], o.post["signdate"], "signscreen")
-
-    def post_signpad(self, o):
-        asm3.configuration.signpad_ids(o.dbo, o.user, o.post["ids"])
-
-    def post_rotateclock(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        for mid in o.post.integer_list("ids"):
-            asm3.media.rotate_media(o.dbo, o.user, mid, True)
-
-    def post_rotateanti(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        for mid in o.post.integer_list("ids"):
-            asm3.media.rotate_media(o.dbo, o.user, mid, False)
-
-    def post_watermark(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        for mid in o.post.integer_list("ids"):
-            asm3.media.watermark_media(o.dbo, o.user, mid)
-
-    def post_web(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        mid = o.post.integer_list("ids")[0]
-        asm3.media.set_web_preferred(o.dbo, o.user, mid)
-
-    def post_video(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        mid = o.post.integer_list("ids")[0]
-        asm3.media.set_video_preferred(o.dbo, o.user, mid)
-
-    def post_doc(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        mid = o.post.integer_list("ids")[0]
-        asm3.media.set_doc_preferred(o.dbo, o.user, mid)
-
-    def post_include(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        for mid in o.post.integer_list("ids"):
-            asm3.media.set_excluded(o.dbo, o.user, mid, 0)
-
-    def post_exclude(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        for mid in o.post.integer_list("ids"):
-            asm3.media.set_excluded(o.dbo, o.user, mid, 1)
-
-class media_pdfjs(ASMEndpoint):
-    url = "media_pdfjs"
-
-    def content(self, o):
-        self.redirect(f'static/lib/pdfjs/2.12.313/web/viewer.html?file=/media%3Fid={o.post["id"]}')
-
-class mobile(ASMEndpoint):
-    url = "mobile"
-    login_url = "mobile_login"
-
-    def content(self, o):
-        self.content_type("text/html")
-        return asm3.mobile.page(o.dbo, o.session, o.user)
-
-class mobile2(ASMEndpoint):
-    url = "mobile2"
-    login_url = "mobile_login"
-
-    def content(self, o):
-        dbo = o.dbo
-        animals = asm3.animal.get_shelterview_animals(dbo, o.locationfilter, o.siteid, o.visibleanimalids)
-        asm3.al.debug("mobile2 for '%s' (%s animals)" % (o.user, len(animals)), "code.mobile2", dbo)
-        c = {
-            "animals":      animals,
-            "reports":      asm3.reports.get_available_reports(dbo),
-            "vaccinations": asm3.medical.get_vaccinations_outstanding(dbo),
-            "tests":        asm3.medical.get_tests_outstanding(dbo),
-            "medicals":     asm3.medical.get_treatments_outstanding(dbo),
-            "diaries":      asm3.diary.get_uncompleted_upto_today(dbo, o.user),
-            "rsvhomecheck": asm3.person.get_reserves_without_homechecks(dbo),
-            "messages":     asm3.lookups.get_messages(dbo, session.user, session.roles, session.superuser),
-            "testresults":  asm3.lookups.get_test_results(dbo),
-            "stocklocations": asm3.stock.get_stock_locations_totals(dbo),
-            "incidentsmy":  asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { "dispatchedaco": session.user, "filter": "incomplete" }, o.user),
-            "incidentsundispatched": asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { "dispatchedaco": session.user, "filter": "undispatched" }, o.user),
-            "incidentsincomplete": asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { "filter": "incomplete" }, o.user),
-            "incidentsfollowup": asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { "filter": "requirefollowup" }, o.user),
-            "animaltypes":  asm3.lookups.get_animal_types(dbo),
-            "breeds":       asm3.lookups.get_breeds_by_species(dbo),
-            "colours":      asm3.lookups.get_basecolours(dbo),
-            "internallocations": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),
-            "sexes":        asm3.lookups.get_sexes(dbo),
-            "sizes":        asm3.lookups.get_sizes(dbo),
-            "smdblocked":   asm3.configuration.smdb_locked(dbo),
-            "species":      asm3.lookups.get_species(dbo),
-            "user":         o.user
-        }
-        self.content_type("text/html")
-        return asm3.html.mobile_page(o.locale, "", [ "common.js", "common_html.js", "mobile2.js" ], c)
-
-    def post_addanimal(self, o):
-        self.check(asm3.users.ADD_ANIMAL)
-        pass # TODO
-
-    def post_medical(self, o):
-        self.check(asm3.users.CHANGE_MEDICAL)
-        #asm3.medical.update_treatment_today(o.dbo, o.user, o.post.integer("id"))
-
-    def post_test(self, o):
-        self.check(asm3.users.CHANGE_TEST)
-        #asm3.medical.update_test_today(o.dbo, o.user, post.integer("id"))
-
-    def post_vaccinate(self, o):
-        self.check(asm3.users.CHANGE_VACCINATION)
-        #asm3.medical.update_vaccination_today(o.dbo, o.user, o.post.integer("id"))
-
-
-class mobile_login(ASMEndpoint):
-    url = "mobile_login"
-    check_logged_in = False
-
-    def content(self, o):
-        l = o.locale
-        if not MULTIPLE_DATABASES:
-            dbo = asm3.db.get_database()
-            o.locale = asm3.configuration.locale(dbo)
-        # Do we have a remember me token?
-        rmtoken = self.get_cookie("asm_remember_me")
-        if rmtoken:
-            cred = asm3.cachemem.get(rmtoken)
-            if cred and cred.find("|") != -1:
-                database, username, password = cred.split("|")
-                rpost = asm3.utils.PostedData({ "database": database, "username": username, "password": password }, LOCALE)
-                asm3.al.info("attempting auth with remember me token for %s/%s" % (database, username), "code.login")
-                user = asm3.users.web_login(rpost, session, self.remote_ip(), self.user_agent(), PATH)
-                if user not in ( "FAIL", "DISABLED", "WRONGSERVER" ):
-                    self.redirect("mobile")
-                    return
-        self.content_type("text/html")
-        c = {
-            "smcom": asm3.smcom.active(),
-            "smcomloginurl": SMCOM_LOGIN_URL,
-            "multipledatabases": MULTIPLE_DATABASES,
-            "target": o.post["target"],
-            "smaccount": o.post["smaccount"],
-            "username": o.post["username"],
-            "password": o.post["password"]
-        }
-        return asm3.html.mobile_page(l, _("Login"), [ "mobile_login.js" ], c)
-
-class mobile_logout(ASMEndpoint):
-    url = "mobile_logout"
-    check_logged_in = False
-
-    def content(self, o):
-        url = "mobile_login"
-        if o.post["smaccount"] != "":
-            url = "mobile_login?smaccount=" + o.post["smaccount"]
-        elif MULTIPLE_DATABASES and o.dbo is not None and o.dbo.alias is not None:
-            url = "mobile_login?smaccount=" + o.dbo.alias
-        asm3.users.update_user_activity(o.dbo, o.user, False)
-        asm3.users.logout(o.session, self.remote_ip(), self.user_agent())
-        self.set_cookie("asm_remember_me", "", 0) # user explicitly logged out, remove remember me
-        self.redirect(url)
-
-class mobile_post(ASMEndpoint):
-    url = "mobile_post"
-    login_url = "mobile_login"
-
-    def handle(self, o):
-        s = asm3.mobile.handler(o.session, o.post)
-        if s is None:
-            raise asm3.utils.ASMValidationError("mobile handler failed.")
-        elif s.startswith("GO "):
-            self.redirect(s[3:])
-        else:
-            self.content_type("text/html")
-            return s
-
-    def content(self, o):
-        return self.handle(o)
-
-    def post_all(self, o):
-        return self.handle(o)
-
-class mobile_report(ASMEndpoint):
-    url = "mobile_report"
-    login_url = "mobile_login"
-    get_permissions = asm3.users.VIEW_REPORT
-
-    def content(self, o):
-        dbo = o.dbo
-        post = o.post
-        crid = post.integer("id")
-        # Make sure this user has a role that can view the report
-        asm3.reports.check_view_permission(o.session, crid)
-        crit = asm3.reports.get_criteria(dbo, crid) 
-        self.content_type("text/html")
-        self.cache_control(0)
-        # If this report takes criteria and none were supplied, go to the criteria screen instead to get them
-        if len(crit) != 0 and post["hascriteria"] == "": self.redirect("mobile_report_criteria?id=%s" % post.integer("id"))
-        title = asm3.reports.get_title(dbo, crid)
-        asm3.al.debug("got criteria (%s), executing report %d" % (str(post.data), crid), "code.report", dbo)
-        p = asm3.reports.get_criteria_params(dbo, crid, post)
-        if asm3.configuration.audit_on_view_report(dbo):
-            asm3.audit.view_report(dbo, o.user, title, str(post.data))
-        s = asm3.reports.execute(dbo, crid, o.user, p)
-        return s
-
-class mobile_report_criteria(ASMEndpoint):
-    url = "mobile_report_criteria"
-    get_permissions = asm3.users.VIEW_REPORT
-
-    def content(self, o):
-        dbo = o.dbo
-        crid = o.post.integer("id")
-        crit = asm3.reports.get_criteria(dbo, crid) 
-        title = asm3.reports.get_title(dbo, crid)
-        self.content_type("text/html")
-        self.cache_control(0)
-        def has_criteria(c):
-            for name, rtype, question in crit:
-                if rtype == c: return True
-            return False
-        asm3.al.debug("building criteria form for report %d %s" % (crid, title), "code.mobile_report", dbo)
-        c = {
-            "crid":         crid,
-            "criteria":     crit,
-            "title":        title,
-            "user":         o.user
-        }
-        # Only load lookup items for criteria that need them to save bandwidth
-        if has_criteria("ANIMAL") or has_criteria("FSANIMAL") or has_criteria("ALLANIMAL") or has_criteria("ANIMALS"):
-            c["animals"] = asm3.animal.get_animals_on_shelter_namecode(dbo)
-        if has_criteria("ANIMALFLAG"): c["animalflags"] = asm3.lookups.get_animal_flags(dbo)
-        if has_criteria("DONATIONTYPE") or has_criteria("PAYMENTTYPE"): c["donationtypes"] = asm3.lookups.get_donation_types(dbo)
-        if has_criteria("LITTER"): c["litters"] = asm3.animal.get_active_litters_brief(dbo)
-        if has_criteria("LOCATION"): c["locations"] = asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid)
-        if has_criteria("LOGTYPE"): c["logtypes"] = asm3.lookups.get_log_types(dbo)
-        if has_criteria("PAYMENTMETHOD") or has_criteria("PAYMENTTYPE"): c["paymentmethods"] = asm3.lookups.get_payment_methods(dbo)
-        if has_criteria("PERSON"): c["people"] = asm3.person.get_person_name_addresses(dbo)
-        if has_criteria("PERSONFLAG"): c["personflags"] = asm3.lookups.get_person_flags(dbo)
-        if has_criteria("SITE"): c["sites"] = asm3.lookups.get_sites(dbo)
-        if has_criteria("SPECIES"): c["species"] = asm3.lookups.get_species(dbo)
-        if has_criteria("TYPE"): c["types"] = asm3.lookups.get_animal_types(dbo)
-        self.content_type("text/html")
-        return asm3.html.mobile_page(o.locale, "", [ "common.js", "common_html.js", "mobile_report.js" ], c)
-
-class mobile_sign(ASMEndpoint):
-    url = "mobile_sign"
-    login_url = "/mobile_login"
-
-    def content(self, o):
-        self.content_type("text/html")
-        ids = asm3.configuration.signpad_ids(o.dbo, o.user)
-        names = []
-        preview = []
-        for mid in ids.strip().split(","):
-            if mid.strip() != "": 
-                names.append(asm3.media.get_notes_for_id(o.dbo, int(mid)))
-                dummy, dummy, dummy, contents = asm3.media.get_media_file_data(o.dbo, int(mid))
-                preview.append(asm3.utils.bytes2str(contents))
-        l = o.dbo.locale
-        c = {
-            "ids": ids,
-            "count": len(names),
-            "names": ", ".join(names),
-            "preview": "\n<hr/>\n".join(preview),
-            "mobileapp": o.session.mobileapp
-        }
-        return asm3.html.mobile_page(l, _("Signing Pad", l), [ "mobile_sign.js" ], c)
-
-    def post_all(self, o):
-        for mid in o.post.integer_list("ids"):
-            asm3.media.sign_document(o.dbo, o.user, mid, o.post["sig"], o.post["signdate"], "signmobile")
-        asm3.configuration.signpad_ids(o.dbo, o.user, "")
-
-class main(JSONEndpoint):
-    url = "main"
-
-    def controller(self, o):
-        l = o.locale
-        dbo = o.dbo
-        # If there's something wrong with the database, logout
-        if not dbo.has_structure():
-            self.redirect("logout")
-        # If a b (build) parameter was passed to indicate the client wants to
-        # get the latest js files, invalidate the config so that the
-        # frontend doesn't keep receiving the same build number via configjs 
-        # and get into an endless loop of reloads
-        if o.post["b"] != "": self.reload_config()
-        # Database update checks
-        dbmessage = ""
-        if asm3.dbupdate.check_for_updates(dbo):
-            newversion = asm3.dbupdate.perform_updates(dbo)
-            if newversion != "":
-                dbmessage = _("Updated database to version {0}", l).format(str(newversion))
-        if asm3.dbupdate.check_for_view_seq_changes(dbo):
-            asm3.dbupdate.install_db_views(dbo)
-            asm3.dbupdate.install_db_sequences(dbo)
-            asm3.dbupdate.install_db_stored_procedures(dbo)
-        # Install recommended reports if no reports are currently installed
-        if dbo.query_int("SELECT COUNT(ID) FROM customreport") == 0: asm3.reports.install_recommended_smcom_reports(dbo, o.user)
-        # Update any reports that have newer versions available
-        asm3.reports.update_smcom_reports(dbo, o.user)
-        # News
-        news = asm3.cachedisk.get("news", "news")
-        if news is None:
-            news = asm3.utils.get_asm_news(dbo)
-            asm3.cachedisk.put("news", "news", news, CACHE_ONE_DAY)
-        # Welcome dialog
-        showwelcome = False
-        if asm3.configuration.show_first_time_screen(dbo) and o.session.superuser == 1:
-            showwelcome = True
-        # Animal links
-        linkmode = asm3.configuration.main_screen_animal_link_mode(dbo)
-        linkmax = asm3.configuration.main_screen_animal_link_max(dbo)
-        animallinks = []
-        linkname = ""
-        if linkmode == "recentlychanged":
-            linkname = _("Recently Changed", l)
-            animallinks = asm3.animal.get_links_recently_changed(dbo, linkmax, o.locationfilter, o.siteid, o.visibleanimalids)
-        elif linkmode == "recentlyentered":
-            linkname = _("Recently Entered Shelter", l)
-            animallinks = asm3.animal.get_links_recently_entered(dbo, linkmax, o.locationfilter, o.siteid, o.visibleanimalids)
-        elif linkmode == "recentlyadopted":
-            linkname = _("Recently Adopted", l)
-            animallinks = asm3.animal.get_links_recently_adopted(dbo, linkmax, o.locationfilter, o.siteid, o.visibleanimalids)
-        elif linkmode == "recentlyfostered":
-            linkname = _("Recently Fostered", l)
-            animallinks = asm3.animal.get_links_recently_fostered(dbo, linkmax, o.locationfilter, o.siteid, o.visibleanimalids)
-        elif linkmode == "longestonshelter":
-            linkname = _("Longest On Shelter", l)
-            animallinks = asm3.animal.get_links_longest_on_shelter(dbo, linkmax, o.locationfilter, o.siteid, o.visibleanimalids)
-        elif linkmode == "adoptable":
-            linkname = _("Up for adoption", l)
-            animallinks = asm3.publishers.base.get_animal_data(dbo, limit=linkmax)
-        # Users and roles, active users
-        usersandroles = asm3.users.get_users_and_roles(dbo)
-        activeusers = asm3.users.get_active_users(dbo)
-        # Messages
-        mess = asm3.lookups.get_messages(dbo, o.session.user, o.session.roles, o.session.superuser)
-        # Diary Notes
-        dm = None
-        if asm3.configuration.all_diary_home_page(dbo): 
-            dm = asm3.diary.get_uncompleted_upto_today(dbo, "", includecreatedby=False, offset=-365)
-        else:
-            dm = asm3.diary.get_uncompleted_upto_today(dbo, o.user, includecreatedby=False, offset=-365)
-        # Use a 2 minute cache, with a longer cache time of 15 minutes for big databases
-        # on the following complex calls for stats, alerts and the timeline
-        age = 120
-        if dbo.is_large_db: age = 900
-        # Alerts
-        alerts = []
-        if asm3.configuration.show_alerts_home_page(dbo):
-            alerts = asm3.animal.get_alerts(dbo, o.locationfilter, o.siteid, o.visibleanimalids, age=age)
-            if len(alerts) > 0: 
-                alerts[0]["LOOKFOR"] = asm3.cachedisk.get("lookingfor_lastmatchcount", dbo.database)
-                alerts[0]["LOSTFOUND"] = asm3.cachedisk.get("lostfound_lastmatchcount", dbo.database)
-        # Stats
-        stats = []
-        if asm3.configuration.show_stats_home_page(dbo) != "none":
-            stats = asm3.animal.get_stats(dbo, age=age)
-        # Timeline
-        timeline = []
-        if asm3.configuration.show_timeline_home_page(dbo):
-            timeline = asm3.animal.get_timeline(dbo, 10, age=age)
-        asm3.al.debug("main for '%s', %d diary notes, %d messages" % (o.user, len(dm), len(mess)), "code.main", dbo)
-        return {
-            "showwelcome": showwelcome,
-            "build": BUILD,
-            "noreload": o.post["b"] != "", 
-            "news": news,
-            "dbmessage": dbmessage,
-            "version": get_version(),
-            "emergencynotice": emergency_notice(),
-            "linkname": linkname,
-            "activeusers": activeusers,
-            "usersandroles": usersandroles,
-            "alerts": alerts,
-            "recent": timeline,
-            "stats": stats,
-            "animallinks": asm3.animal.get_animals_brief(animallinks),
-            "diary": dm,
-            "mess": mess 
-        }
-
-    def post_addmessage(self, o):
-        asm3.lookups.add_message(o.dbo, o.user, o.post.boolean("email"), o.post["message"], o.post["forname"], o.post.integer("priority"), o.post.date("expires"))
-
-    def post_delmessage(self, o):
-        asm3.lookups.delete_message(o.dbo, o.post.integer("id"))
-
-    def post_showfirsttimescreen(self, o):
-        asm3.configuration.show_first_time_screen(o.dbo, True, False)
-
-class login(ASMEndpoint):
-    url = "login"
-    check_logged_in = False
-
-    def content(self, o):
-        l = LOCALE
-        post = o.post
-        has_animals = True
-        custom_splash = False
-
-        # Filter out Internet Explorer altogether.
-        ua = self.user_agent()
-        if ua.find("MSIE") != -1 or ua.find("Trident") != -1:
-            self.redirect("static/pages/unsupported_ie.html")
-
-        # Figure out how to get the default locale and any overridden splash screen
-        # Single database
-        if not MULTIPLE_DATABASES:
-            dbo = asm3.db.get_database()
-            l = asm3.configuration.locale(dbo)
-            has_animals = asm3.animal.get_has_animals(dbo)
-            custom_splash = asm3.dbfs.file_exists(dbo, "splash.jpg")
-
-        # Multiple databases, account given
-        elif MULTIPLE_DATABASES and post["smaccount"] != "":
-            dbo = asm3.db.get_database(post["smaccount"])
-            if dbo.database == "WRONGSERVER":
-                self.redirect(SMCOM_LOGIN_URL)
-            elif dbo.database not in asm3.db.ERROR_VALUES:
-                custom_splash = asm3.dbfs.file_exists(dbo, "splash.jpg")
-                l = asm3.configuration.locale(dbo)
-
-        # Fall back to system locale
-        else:
-            l = LOCALE
-
-        # Do we have a remember me token?
-        rmtoken = self.get_cookie("asm_remember_me")
-        if rmtoken:
-            cred = asm3.cachemem.get(rmtoken)
-            if cred and cred.find("|") != -1:
-                database, username, password = cred.split("|")
-                rpost = asm3.utils.PostedData({ "database": database, "username": username, "password": password }, LOCALE)
-                asm3.al.info("attempting auth with remember me token for %s/%s" % (database, username), "code.login")
-                user = asm3.users.web_login(rpost, session, self.remote_ip(), self.user_agent(), PATH)
-                if user not in ( "FAIL", "DISABLED", "WRONGSERVER" ):
-                    self.redirect("main")
-                    return
-
-        title = _("Animal Shelter Manager Login", l)
-        s = asm3.html.bare_header(title, locale = l)
-        c = { "smcom": asm3.smcom.active(),
-             "multipledatabases": MULTIPLE_DATABASES,
-             "locale": l,
-             "hasanimals": has_animals,
-             "customsplash": custom_splash,
-             "emergencynotice": emergency_notice(),
-             "smaccount": post["smaccount"],
-             "husername": post["username"],
-             "hpassword": post["password"],
-             "baseurl": BASE_URL,
-             "smcomloginurl": SMCOM_LOGIN_URL,
-             "nologconnection": post["nologconnection"],
-             "qrimg": QR_IMG_SRC,
-             "target": post["target"]
-        }
-        nonce = asm3.utils.uuid_str()
-        s += '<script nonce="%s">\ncontroller = %s;\n' % (nonce, asm3.utils.json(c))
-        s += '$(document).ready(function() { $("body").append(login.render()); login.bind(); });\n</script>'
-        s += asm3.html.footer()
-        self.content_type("text/html")
-        self.header("X-Frame-Options", "SAMEORIGIN")
-        self.header("X-Content-Type-Options", "nosniff") 
-        self.header("X-XSS-Protection", "1; mode=block") 
-        self.header("Strict-Transport-Security", "max-age=%s" % CACHE_ONE_MONTH) 
-        if CONTENT_SECURITY_POLICY != "":
-            self.header("Content-Security-Policy", CONTENT_SECURITY_POLICY % { "nonce": nonce })
-        return s
-
-    def post_all(self, o):
-        user = asm3.users.web_login(o.post, session, self.remote_ip(), self.user_agent(), PATH)
-        # If there's a pipe in the result, we have a remember me cookie/token to set
-        if user.find("|") != -1:
-            user, token = user.split("|")
-            self.set_cookie("asm_remember_me", token, CACHE_ONE_MONTH)
-        return user
-
-    def post_reset(self, o):
-        dbo = asm3.db.get_database(o.post["database"])
-        if dbo.database in asm3.db.ERROR_VALUES: return "FAIL"
-        asm3.al.info("password reset request from %s for %s:%s" % (self.remote_ip(), o.post["database"], o.post["username"]), "code.login", dbo)
-        l = dbo.locale
-        # This cannot be used to reset the SM master password
-        if asm3.smcom.active() and o.post["username"].lower() == dbo.database:
-            asm3.al.error("failed password reset: master user %s cannot be reset here" % o.post["username"], "code.login", dbo)
-            return "MASTER"
-        # Find the user id and email address for the username given
-        userid = dbo.query_int("SELECT ID FROM users WHERE LOWER(UserName) LIKE ?", [o.post["username"].lower()])
-        email = dbo.query_string("SELECT EmailAddress FROM users WHERE ID=?", [userid])
-        if email == "": 
-            asm3.al.error("failed password reset: user %s does not exist or have an email address" % o.post["username"], "code.login", dbo)
-            return "NOEMAIL"
-        # Generate a random cache key for this reset
-        cache_key = asm3.utils.uuid_str()
-        # Store info about this reset in the cache for 10 minutes
-        asm3.cachedisk.put(cache_key, "", { "username": o.post["username"], "userid": userid,
-            "database": o.post["database"], "email": email }, 600)
-        # Construct the reset link
-        resetlink = "%s/reset_password?token=%s" % (BASE_URL, cache_key)
-        # Send the email
-        asm3.utils.send_email(dbo, asm3.configuration.email(dbo), email, "", "",
-            _("Reset password request", l),
-            _("To reset your ASM password, please follow this link:", l) + "\n\n" + resetlink + "\n\n" +
-            _("This link will remain active for 10 minutes.", l))
-        return "OK"
-
-class login_jsonp(ASMEndpoint):
-    url = "login_jsonp"
-    check_logged_in = False
-
-    def content(self, o):
-        self.content_type("text/javascript")
-        return "%s({ response: '%s' })" % (o.post["callback"], asm3.users.web_login(o.post, o.session, self.remote_ip(), self.user_agent(), PATH))
-
-class login_splash(ASMEndpoint):
-    url = "login_splash"
-    check_logged_in = False
-
-    def content(self, o):
-        try:
-            dbo = asm3.db.get_database(o.post["smaccount"])
-            self.content_type("image/jpeg")
-            self.cache_control(CACHE_ONE_DAY, 120)
-            return asm3.dbfs.get_string_filepath(dbo, "/reports/splash.jpg")
-        except Exception as err:
-            asm3.al.error("%s" % str(err), "code.login_splash", dbo)
-            return ""
-
-class logout(ASMEndpoint):
-    url = "logout"
-    check_logged_in = False
-
-    def content(self, o):
-        url = "login"
-        if o.post["smaccount"] != "":
-            url = "login?smaccount=" + o.post["smaccount"]
-        elif MULTIPLE_DATABASES and o.dbo is not None and o.dbo.alias is not None:
-            url = "login?smaccount=" + o.dbo.alias
-        asm3.users.update_user_activity(o.dbo, o.user, False)
-        asm3.users.logout(o.session, self.remote_ip(), self.user_agent())
-        self.set_cookie("asm_remember_me", "", 0) # user explicitly logged out, remove remember me
-        self.redirect(url)
-
-class reset_password(ASMEndpoint):
-    url = "reset_password"
-    check_logged_in = False
-
-    def content(self, o):
-        token = o.post["token"]
-        rinfo = asm3.cachedisk.get(token, "")
-        if rinfo is None: raise asm3.utils.ASMValidationError("invalid token")
-        dbo = asm3.db.get_database(rinfo["database"])
-        if dbo.database in asm3.db.ERROR_VALUES: raise asm3.utils.ASMValidationError("bad database")
-        # Reset their password to something random and send an email with the new password
-        l = dbo.locale
-        newpass = asm3.animalname.get_random_single_word_name()
-        asm3.users.reset_password(dbo, rinfo["userid"], newpass)
-        asm3.al.info("reset password for %s to %s" % (rinfo["username"], newpass), "code.reset_password", dbo)
-        asm3.utils.send_email(dbo, asm3.configuration.email(dbo), rinfo["email"], "", "", 
-            _("Reset password request", l),
-            _("The ASM password for {0} has been reset to:", l).format(rinfo["username"]) + 
-            "\n\n    " + newpass)
-        self.redirect("static/pages/password_reset.html")
-
-class accounts(JSONEndpoint):
-    url = "accounts"
-    get_permissions = asm3.users.VIEW_ACCOUNT
-
-    def controller(self, o):
-        dbo = o.dbo
-        if o.post["offset"] == "all":
-            accounts = asm3.financial.get_accounts(dbo)
-        else:
-            accounts = asm3.financial.get_accounts(dbo, onlyactive=True)
-        asm3.al.debug("got %d accounts" % len(accounts), "code.accounts", dbo)
-        return {
-            "accounttypes": asm3.lookups.get_account_types(dbo),
-            "costtypes": asm3.lookups.get_costtypes(dbo),
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "roles": asm3.users.get_roles(dbo),
-            "rows": accounts
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_ACCOUNT)
-        return asm3.financial.insert_account_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_ACCOUNT)
-        asm3.financial.update_account_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_ACCOUNT)
-        for aid in o.post.integer_list("ids"):
-            asm3.financial.delete_account(o.dbo, o.user, aid)
-
-class accounts_trx(JSONEndpoint):
-    url = "accounts_trx"
-    get_permissions = asm3.users.VIEW_ACCOUNT
-
-    def controller(self, o):
-        dbo = o.dbo
-        post = o.post
-        defview = asm3.configuration.default_account_view_period(dbo)
-        fromdate = post["fromdate"]
-        todate = post["todate"]
-        today = dbo.today()
-        if fromdate != "" and todate != "":
-            fromdate = post.date("fromdate")
-            todate = post.date("todate")
-        elif defview == asm3.financial.THIS_MONTH:
-            fromdate = first_of_month(today)
-            todate = last_of_month(today)
-        elif defview == asm3.financial.THIS_WEEK:
-            fromdate = monday_of_week(today)
-            todate = sunday_of_week(today)
-        elif defview == asm3.financial.THIS_YEAR:
-            fromdate = first_of_year(today)
-            todate = last_of_year(today)
-        elif defview == asm3.financial.LAST_MONTH:
-            fromdate = first_of_month(subtract_months(today, 1))
-            todate = last_of_month(subtract_months(today, 1))
-        elif defview == asm3.financial.LAST_WEEK:
-            fromdate = monday_of_week(subtract_days(today, 7))
-            todate = sunday_of_week(subtract_days(today, 7))
-        transactions = asm3.financial.get_transactions(dbo, post.integer("accountid"), fromdate, todate, post.integer("recfilter"))
-        accountcode = asm3.financial.get_account_code(dbo, post.integer("accountid"))
-        accounteditroles = asm3.financial.get_account_edit_roles(dbo, post.integer("accountid"))
-        asm3.al.debug("got %d trx for %s <-> %s" % (len(transactions), str(fromdate), str(todate)), "code.accounts_trx", dbo)
-        return {
-            "rows": transactions,
-            "codes": "|".join(asm3.financial.get_account_codes(dbo, accountcode)),
-            "accountid": post.integer("accountid"),
-            "accountcode": accountcode,
-            "accounteditroles": "|".join(accounteditroles),
-            "fromdate": python2display(o.locale, fromdate),
-            "todate": python2display(o.locale, todate)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.CHANGE_TRANSACTIONS)
-        asm3.financial.insert_trx_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_TRANSACTIONS)
-        asm3.financial.update_trx_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.CHANGE_TRANSACTIONS)
-        for tid in o.post.integer_list("ids"):
-            asm3.financial.delete_trx(o.dbo, o.user, tid)
-
-    def post_reconcile(self, o):
-        self.check(asm3.users.CHANGE_TRANSACTIONS)
-        for tid in o.post.integer_list("ids"):
-            asm3.financial.mark_reconciled(o.dbo, tid)
-
-class additional(JSONEndpoint):
-    url = "additional"
-    get_permissions = asm3.users.MODIFY_ADDITIONAL_FIELDS
-
-    def controller(self, o):
-        dbo = o.dbo
-        fields = asm3.additional.get_fields(dbo)
-        asm3.al.debug("got %d additional field definitions" % len(fields), "code.additional", dbo)
-        return {
-            "rows": fields,
-            "fieldtypes": asm3.lookups.get_additionalfield_types(dbo),
-            "linktypes": asm3.lookups.get_additionalfield_links(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.MODIFY_ADDITIONAL_FIELDS)
-        return asm3.additional.insert_field_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.MODIFY_ADDITIONAL_FIELDS)
-        asm3.additional.update_field_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.MODIFY_ADDITIONAL_FIELDS)
-        for fid in o.post.integer_list("ids"):
-            asm3.additional.delete_field(o.dbo, o.user, fid)
-
-class animal(JSONEndpoint):
-    url = "animal"
-    get_permissions = asm3.users.VIEW_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animal.get_animal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        # If a location filter is set, prevent the user opening this animal if it's
-        # not in their location.
-        self.check_animal(a)
-        recname = "%s %s" % (a.CODE, a.ANIMALNAME)
-        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, "animal", a["ID"], recname)
-        asm3.al.debug("opened animal %s" % recname, "code.animal", dbo)
-        return {
-            "animal": a,
-            "activelitters": asm3.animal.get_active_litters_brief(dbo),
-            "additional": asm3.additional.get_additional_fields(dbo, a["ID"], "animal"),
-            "animaltypes": asm3.lookups.get_animal_types(dbo),
-            "audit": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, "animal", a["ID"]) or [],
-            "species": asm3.lookups.get_species(dbo),
-            "breeds": asm3.lookups.get_breeds_by_species(dbo),
-            "coattypes": asm3.lookups.get_coattypes(dbo),
-            "colours": asm3.lookups.get_basecolours(dbo),
-            "deathreasons": asm3.lookups.get_deathreasons(dbo),
-            "diarytasks": asm3.diary.get_animal_tasks(dbo),
-            "entryreasons": asm3.lookups.get_entryreasons(dbo),
-            "flags": asm3.lookups.get_animal_flags(dbo),
-            "incidents": asm3.animalcontrol.get_animalcontrol_for_animal(dbo, o.post.integer("id")),
-            "internallocations": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),
-            "jurisdictions": asm3.lookups.get_jurisdictions(dbo),
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "pickuplocations": asm3.lookups.get_pickup_locations(dbo),
-            "publishhistory": asm3.animal.get_publish_history(dbo, a["ID"]),
-            "posneg": asm3.lookups.get_posneg(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "sizes": asm3.lookups.get_sizes(dbo),
-            "sharebutton": SHARE_BUTTON,
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, a["ID"])[0],
-            "templates": asm3.template.get_document_templates(dbo, "animal"),
-            "templatesemail": asm3.template.get_document_templates(dbo, "email"),
-            "ynun": asm3.lookups.get_ynun(dbo),
-            "ynunk": asm3.lookups.get_ynunk(dbo)
-        }
-
-    def post_save(self, o):
-        self.check(asm3.users.CHANGE_ANIMAL)
-        asm3.animal.update_animal_from_form(o.dbo, o.post, o.user)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_ANIMAL)
-        asm3.animal.delete_animal(o.dbo, o.user, o.post.integer("animalid"))
-
-    def post_email(self, o):
-        self.check(asm3.users.EMAIL_PERSON)
-        asm3.animal.send_email_from_form(o.dbo, o.user, o.post)
-
-    def post_gencode(self, o):
-        post = o.post
-        animaltypeid = post.integer("animaltypeid")
-        entryreasonid = post.integer("entryreasonid")
-        speciesid = post.integer("speciesid")
-        datebroughtin = post.date("datebroughtin")
-        sheltercode, shortcode, unique, year = asm3.animal.calc_shelter_code(o.dbo, animaltypeid, entryreasonid, speciesid, datebroughtin)
-        return sheltercode + "||" + shortcode + "||" + str(unique) + "||" + str(year)
-
-    def post_merge(self, o):
-        self.check(asm3.users.MERGE_ANIMAL)
-        asm3.animal.merge_animal(o.dbo, o.user, o.post.integer("animalid"), o.post.integer("mergeanimalid"))
-
-    def post_randomname(self, o):
-        return asm3.animal.get_random_name(o.dbo, o.post.integer("sex"))
-
-    def post_shared(self, o):
-        asm3.animal.insert_publish_history(o.dbo, o.post.integer("id"), o.post["service"])
-
-    def post_clone(self, o):
-        self.check(asm3.users.CLONE_ANIMAL)
-        nid = asm3.animal.clone_animal(o.dbo, o.user, o.post.integer("animalid"))
-        return str(nid)
-
-    def post_forgetpublish(self, o):
-        asm3.animal.delete_publish_history(o.dbo, o.post.integer("id"), o.post["service"])
-
-    def post_webnotes(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        asm3.animal.update_preferred_web_media_notes(o.dbo, o.user, o.post.integer("id"), o.post["comments"])
-
-class animal_bulk(JSONEndpoint):
-    url = "animal_bulk"
-    get_permissions = asm3.users.CHANGE_ANIMAL
-    post_permissions = asm3.users.CHANGE_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        return {
-            "ynun": asm3.lookups.get_ynun(dbo),
-            "ynunk": asm3.lookups.get_ynunk(dbo),
-            "animaltypes": asm3.lookups.get_animal_types(dbo),
-            "autolitters": asm3.animal.get_active_litters_brief(dbo),
-            "flags": asm3.lookups.get_animal_flags(dbo),
-            "entryreasons": asm3.lookups.get_entryreasons(dbo),
-            "internallocations": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "movementtypes": asm3.lookups.get_movement_types(dbo)
-        }
-
-    def post_update(self, o):
-        return asm3.animal.update_animals_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        return asm3.animal.delete_animals_from_form(o.dbo, o.user, o.post)
-
-class animal_clinic(JSONEndpoint):
-    url = "animal_clinic"
-    js_module = "clinic_appointment"
-    get_permissions = asm3.users.VIEW_CLINIC
-
-    def controller(self, o):
-        dbo = o.dbo
-        animalid = o.post.integer("id")
-        a = asm3.animal.get_animal(dbo, animalid)
-        if a is None: self.notfound()
-        self.check_animal(a)
-        rows = asm3.clinic.get_animal_appointments(dbo, animalid)
-        asm3.al.debug("got %d appointments for animal %s %s" % (len(rows), a.CODE, a.ANIMALNAME), "code.animal_clinic", dbo)
-        return {
-            "name": self.url,
-            "animal": a,
-            "clinicstatuses": asm3.lookups.get_clinic_statuses(dbo),
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "forlist": asm3.users.get_users(dbo),
-            "rows": rows,
-            "templates": asm3.template.get_document_templates(dbo, "clinic"),
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, animalid)[0]
-        }
-
-class animal_costs(JSONEndpoint):
-    url = "animal_costs"
-    get_permissions = asm3.users.VIEW_COST
-
-    def controller(self, o):
-        dbo = o.dbo
-        animalid = o.post.integer("id")
-        a = asm3.animal.get_animal(dbo, animalid)
-        if a is None: self.notfound()
-        self.check_animal(a)
-        cost = asm3.animal.get_costs(dbo, animalid)
-        asm3.al.debug("got %d costs for animal %s %s" % (len(cost), a["CODE"], a["ANIMALNAME"]), "code.animal_costs", dbo)
-        return {
-            "rows": cost,
-            "animal": a,
-            "costtypes": asm3.lookups.get_costtypes(dbo),
-            "costtotals": asm3.animal.get_cost_totals(dbo, animalid),
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, animalid)[0]
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_COST)
-        return asm3.animal.insert_cost_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_COST)
-        asm3.animal.update_cost_from_form(o.dbo, o.user, o.post)
-
-    def post_dailyboardingcost(self, o):
-        self.check(asm3.users.CHANGE_ANIMAL)
-        animalid = o.post.integer("animalid")
-        cost = o.post.integer("dailyboardingcost")
-        asm3.animal.update_daily_boarding_cost(o.dbo, o.user, animalid, cost)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_COST)
-        for cid in o.post.integer_list("ids"):
-            asm3.animal.delete_cost(o.dbo, o.user, cid)
-
-class animal_diary(JSONEndpoint):
-    url = "animal_diary"
-    js_module = "diary"
-    get_permissions = asm3.users.VIEW_DIARY
-
-    def controller(self, o):
-        dbo = o.dbo
-        animalid = o.post.integer("id")
-        a = asm3.animal.get_animal(dbo, animalid)
-        if a is None: self.notfound()
-        self.check_animal(a)
-        diaries = asm3.diary.get_diaries(dbo, asm3.diary.ANIMAL, animalid)
-        asm3.al.debug("got %d notes for animal %s %s" % (len(diaries), a["CODE"], a["ANIMALNAME"]), "code.animal_diary", dbo)
-        return {
-            "rows": diaries,
-            "animal": a,
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, animalid)[0],
-            "name": "animal_diary",
-            "linkid": animalid,
-            "linktypeid": asm3.diary.ANIMAL,
-            "forlist": asm3.users.get_users_and_roles(dbo)
-        }
-
-class animal_diet(JSONEndpoint):
-    url = "animal_diet"
-    get_permissions = asm3.users.VIEW_DIET
-
-    def controller(self, o):
-        dbo = o.dbo
-        animalid = o.post.integer("id")
-        a = asm3.animal.get_animal(dbo, animalid)
-        if a is None: self.notfound()
-        self.check_animal(a)
-        diet = asm3.animal.get_diets(dbo, animalid)
-        asm3.al.debug("got %d diets for animal %s %s" % (len(diet), a["CODE"], a["ANIMALNAME"]), "code.animal_diet", dbo)
-        return {
-            "rows": diet,
-            "animal": a,
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, animalid)[0],
-            "diettypes": asm3.lookups.get_diets(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_DIET)
-        return str(asm3.animal.insert_diet_from_form(o.dbo, o.user, o.post))
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_DIET)
-        asm3.animal.update_diet_from_form(o.dbo, o.user, o.post)
-        
-    def post_delete(self, o):
-        self.check( asm3.users.DELETE_DIET)
-        for did in o.post.integer_list("ids"):
-            asm3.animal.delete_diet(o.dbo, o.user, did)
-
-class animal_donations(JSONEndpoint):
-    url = "animal_donations"
-    js_module = "donations"
-    get_permissions = asm3.users.VIEW_DONATION
-
-    def controller(self, o):
-        dbo = o.dbo
-        animalid = o.post.integer("id")
-        a = asm3.animal.get_animal(dbo, animalid)
-        if a is None: raise web.notfound()
-        self.check_animal(a)
-        donations = asm3.financial.get_animal_donations(dbo, animalid)
-        asm3.al.debug("got %d donations for animal %s %s" % (len(donations), a["CODE"], a["ANIMALNAME"]), "code.animal_donations", dbo)
-        return {
-            "rows": donations,
-            "animal": a,
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, animalid)[0],
-            "name": "animal_donations",
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "accounts": asm3.financial.get_accounts(dbo, onlybank=True),
-            "logtypes": asm3.lookups.get_log_types(dbo), 
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "frequencies": asm3.lookups.get_donation_frequencies(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "payment")
-        }
-
-class animal_embed(ASMEndpoint):
-    url = "animal_embed"
-    check_logged_in = False
-    post_permissions = asm3.users.VIEW_ANIMAL
-
-    def post_find(self, o):
-        self.content_type("application/json")
-        q = o.post["q"]
-        rows = asm3.animal.get_animal_find_simple(o.dbo, q, o.post["filter"], 100, o.locationfilter, o.siteid, o.visibleanimalids)
-        asm3.al.debug("got %d results for '%s'" % (len(rows), self.query()), "code.animal_embed", o.dbo)
-        return asm3.utils.json(rows)
-
-    def post_multiselect(self, o):
-        self.content_type("application/json")
-        dbo = o.dbo
-        rows = asm3.animal.get_animal_find_simple(dbo, "", "all", asm3.configuration.record_search_limit(dbo), o.locationfilter, o.siteid, o.visibleanimalids)
-        locations = asm3.lookups.get_internal_locations(dbo)
-        species = asm3.lookups.get_species(dbo)
-        litters = asm3.animal.get_litters(dbo)
-        flags = asm3.lookups.get_animal_flags(dbo)
-        rv = { "rows": rows, "locations": locations, "species": species, "litters": litters, "flags": flags }
-        return asm3.utils.json(rv)
-
-    def post_id(self, o):
-        self.content_type("application/json")
-        dbo = o.dbo
-        animalid = o.post.integer("id")
-        a = asm3.animal.get_animal(dbo, animalid)
-        if a is None:
-            asm3.al.error("get animal by id %d found no records." % animalid, "code.animal_embed", dbo)
-            self.notfound()
-        else:
-            asm3.al.debug("got animal %s %s by id" % (a["CODE"], a["ANIMALNAME"]), "code.animal_embed", dbo)
-            return asm3.utils.json((a,))
-
-class animal_find(JSONEndpoint):
-    url = "animal_find"
-    get_permissions = asm3.users.VIEW_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        c = {
-            "agegroups": asm3.configuration.age_groups(dbo),
-            "animaltypes": asm3.lookups.get_animal_types(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "breeds": asm3.lookups.get_breeds_by_species(dbo),
-            "flags": asm3.lookups.get_animal_flags(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "entryreasons": asm3.lookups.get_entryreasons(dbo),
-            "internallocations": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),
-            "pickuplocations": asm3.lookups.get_pickup_locations(dbo),
-            "sizes": asm3.lookups.get_sizes(dbo),
-            "colours": asm3.lookups.get_basecolours(dbo),
-            "users": asm3.users.get_users(dbo)
-        }
-        asm3.al.debug("loaded lookups for find animal", "code.animal_find", dbo)
-        return c
-
-class animal_find_results(JSONEndpoint):
-    url = "animal_find_results"
-    get_permissions = asm3.users.VIEW_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        q = o.post["q"]
-        mode = o.post["mode"]
-        if mode == "SIMPLE":
-            results = asm3.animal.get_animal_find_simple(dbo, q, "all", asm3.configuration.record_search_limit(dbo), o.locationfilter, o.siteid, o.visibleanimalids)
-        else:
-            results = asm3.animal.get_animal_find_advanced(dbo, o.post.data, asm3.configuration.record_search_limit(dbo), o.locationfilter, o.siteid, o.visibleanimalids)
-        add = None
-        if len(results) > 0: 
-            add = asm3.additional.get_additional_fields_ids(dbo, results, "animal")
-        asm3.al.debug("found %d results for %s" % (len(results), self.query()), "code.animal_find_results", dbo)
-        return {
-            "rows": results,
-            "additional": add,
-            "wasonshelter": q == "" and mode == "SIMPLE"
-        }
-
-class animal_licence(JSONEndpoint):
-    url = "animal_licence"
-    js_module = "licence"
-    get_permissions = asm3.users.VIEW_LICENCE
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animal.get_animal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        self.check_animal(a)
-        licences = asm3.financial.get_animal_licences(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d licences" % len(licences), "code.animal_licence", dbo)
-        return {
-            "name": "animal_licence",
-            "rows": licences,
-            "animal": a,
-            "templates": asm3.template.get_document_templates(dbo, "licence"),
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, a["ID"])[0],
-            "licencetypes": asm3.lookups.get_licence_types(dbo)
-        }
-
-class animal_log(JSONEndpoint):
-    url = "animal_log"
-    js_module = "log"
-    get_permissions = asm3.users.VIEW_LOG
-
-    def controller(self, o):
-        dbo = o.dbo
-        logfilter = o.post.integer("filter")
-        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)
-        a = asm3.animal.get_animal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        self.check_animal(a)
-        logs = asm3.log.get_logs(dbo, asm3.log.ANIMAL, o.post.integer("id"), logfilter)
-        asm3.al.debug("got %d logs for animal %s %s" % (len(logs), a["CODE"], a["ANIMALNAME"]), "code.animal_log", dbo)
-        return {
-            "name": "animal_log",
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.log.ANIMAL,
-            "filter": logfilter,
-            "rows": logs,
-            "animal": a,
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, a["ID"])[0],
-            "logtypes": asm3.lookups.get_log_types(dbo)
-        }
-
-class animal_media(JSONEndpoint):
-    url = "animal_media"
-    js_module = "media"
-    get_permissions = asm3.users.VIEW_MEDIA
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animal.get_animal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        self.check_animal(a)
-        m = asm3.media.get_media(dbo, asm3.media.ANIMAL, o.post.integer("id"))
-        asm3.al.debug("got %d media entries for animal %s %s" % (len(m), a["CODE"], a["ANIMALNAME"]), "code.animal_media", dbo)
-        return {
-            "media": m,
-            "animal": a,
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, a["ID"])[0],
-            "canwatermark": True and asm3.media.watermark_available(dbo),
-            "showpreferred": True,
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.media.ANIMAL,
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "newmedia": o.post.integer("newmedia") == 1,
-            "name": self.url,
-            "resizeimagespec": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, ""),
-            "templates": asm3.template.get_document_templates(dbo, "email"),
-            "sigtype": ELECTRONIC_SIGNATURES
-        }
-
-class animal_medical(JSONEndpoint):
-    url = "animal_medical"
-    js_module = "medical"
-    get_permissions = asm3.users.VIEW_MEDICAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animal.get_animal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        self.check_animal(a)
-        limit = asm3.configuration.medical_item_display_limit(dbo)
-        med = asm3.medical.get_regimens_treatments(dbo, o.post.integer("id"), limit=limit)
-        profiles = asm3.medical.get_profiles(dbo)
-        asm3.al.debug("got %d medical entries for animal %s %s" % (len(med), a["CODE"], a["ANIMALNAME"]), "code.animal_medical", dbo)
-        return {
-            "profiles": profiles,
-            "rows": med,
-            "overlimit": len(med) == limit and limit or 0,
-            "name": "animal_medical",
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, a["ID"])[0],
-            "stockitems": asm3.stock.get_stock_items(dbo),
-            "stockusagetypes": asm3.lookups.get_stock_usage_types(dbo),
-            "users": asm3.users.get_users(dbo),
-            "animal": a
-        }
-
-class animal_movements(JSONEndpoint):
-    url = "animal_movements"
-    js_module = "movements"
-    get_permissions = asm3.users.VIEW_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animal.get_animal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        self.check_animal(a)
-        movements = asm3.movement.get_animal_movements(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d movements for animal %s %s" % (len(movements), a["CODE"], a["ANIMALNAME"]), "code.animal_movements", dbo)
-        return {
-            "rows": movements,
-            "animal": a,
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, a["ID"])[0],
-            "logtypes": asm3.lookups.get_log_types(dbo), 
-            "movementtypes": asm3.lookups.get_movement_types(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "returncategories": asm3.lookups.get_entryreasons(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement"),
-            "name": self.url
-        }
-
-class animal_new(JSONEndpoint):
-    url = "animal_new"
-    get_permissions = asm3.users.ADD_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        c = {
-            "autolitters": asm3.animal.get_active_litters_brief(dbo),
-            "additional": asm3.additional.get_additional_fields(dbo, 0, "animal"),
-            "animaltypes": asm3.lookups.get_animal_types(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "breeds": asm3.lookups.get_breeds_by_species(dbo),
-            "coattypes": asm3.lookups.get_coattypes(dbo),
-            "colours": asm3.lookups.get_basecolours(dbo),
-            "flags": asm3.lookups.get_animal_flags(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "entryreasons": asm3.lookups.get_entryreasons(dbo),
-            "jurisdictions": asm3.lookups.get_jurisdictions(dbo),
-            "internallocations": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),
-            "pickuplocations": asm3.lookups.get_pickup_locations(dbo),
-            "sizes": asm3.lookups.get_sizes(dbo)
-        }
-        asm3.al.debug("loaded lookups for new animal", "code.animal_new", dbo)
-        return c
-
-    def post_save(self, o):
-        self.check(asm3.users.ADD_ANIMAL)
-        animalid, code = asm3.animal.insert_animal_from_form(o.dbo, o.post, o.user)
-        return "%s %s" % (animalid, code)
-
-    def post_recentnamecheck(self, o):
-        rows = asm3.animal.get_recent_with_name(o.dbo, o.post["animalname"])
-        asm3.al.debug("recent names found %d rows for '%s'" % (len(rows), o.post["animalname"]), "code.animal_new.recentnamecheck", o.dbo)
-        if len(rows) > 0:
-            return "|".join((str(rows[0]["ANIMALID"]), rows[0]["SHELTERCODE"], rows[0]["ANIMALNAME"]))
-
-    def post_units(self, o):
-        return "&&".join(asm3.animal.get_units_with_availability(o.dbo, o.post.integer("locationid")))
-
-class animal_test(JSONEndpoint):
-    url = "animal_test"
-    js_module = "test"
-    get_permissions = asm3.users.VIEW_TEST
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animal.get_animal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        self.check_animal(a)
-        test = asm3.medical.get_tests(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d tests" % len(test), "code.animal_test", dbo)
-        return {
-            "name": "animal_test",
-            "animal": a,
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, a["ID"])[0],
-            "rows": test,
-            "stockitems": asm3.stock.get_stock_items(dbo),
-            "stockusagetypes": asm3.lookups.get_stock_usage_types(dbo),
-            "testtypes": asm3.lookups.get_test_types(dbo),
-            "testresults": asm3.lookups.get_test_results(dbo)
-        }
-
-class animal_transport(JSONEndpoint):
-    url = "animal_transport"
-    js_module = "transport"
-    get_permissions = asm3.users.VIEW_TRANSPORT
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animal.get_animal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        self.check_animal(a)
-        transports = asm3.movement.get_animal_transports(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d transports" % len(transports), "code.animal_transport", dbo)
-        return {
-            "name": "animal_transport",
-            "animal": a,
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, a["ID"])[0],
-            "statuses": asm3.lookups.get_transport_statuses(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "transport"),
-            "transporttypes": asm3.lookups.get_transport_types(dbo),
-            "rows": transports
-        }
-
-class animal_vaccination(JSONEndpoint):
-    url = "animal_vaccination"
-    js_module = "vaccination"
-    get_permissions = asm3.users.VIEW_VACCINATION
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animal.get_animal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        self.check_animal(a)
-        vacc = asm3.medical.get_vaccinations(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d vaccinations" % len(vacc), "code.vaccination", dbo)
-        return {
-            "name": "animal_vaccination",
-            "animal": a,
-            "tabcounts": asm3.animal.get_satellite_counts(dbo, a["ID"])[0],
-            "rows": vacc,
-            "batches": asm3.medical.get_batch_for_vaccination_types(dbo),
-            "manufacturers": "|".join(asm3.medical.get_vacc_manufacturers(dbo)),
-            "stockitems": asm3.stock.get_stock_items(dbo),
-            "stockusagetypes": asm3.lookups.get_stock_usage_types(dbo),
-            "users": asm3.users.get_users(dbo),
-            "vaccinationtypes": asm3.lookups.get_vaccination_types(dbo)
-        }
-
-class batch(JSONEndpoint):
-    url = "batch"
-    get_permissions = asm3.users.TRIGGER_BATCH
-    post_permissions = asm3.users.TRIGGER_BATCH
-
-    def controller(self, o):
-        return {}
-
-    def post_genfigyear(self, o):
-        l = o.locale
-        if o.post.date("taskdate") is None: raise asm3.utils.ASMValidationError("no date parameter")
-        asm3.asynctask.function_task(o.dbo, _("Regenerate annual animal figures for", l), asm3.animal.update_animal_figures_annual, o.dbo, o.post.date("taskdate").year)
-
-    def post_genfigmonth(self, o):
-        l = o.locale
-        if o.post.date("taskdate") is None: raise asm3.utils.ASMValidationError("no date parameter")
-        asm3.asynctask.function_task(o.dbo, _("Regenerate monthly animal figures for", l), asm3.animal.update_animal_figures, o.dbo, o.post.date("taskdate").month, o.post.date("taskdate").year)
-
-    def post_genshelterpos(self, o):
-        l = o.locale
-        asm3.asynctask.function_task(o.dbo, _("Recalculate on-shelter animal locations", l), asm3.animal.update_on_shelter_animal_statuses, o.dbo)
-
-    def post_genallpos(self, o):
-        l = o.locale
-        asm3.asynctask.function_task(o.dbo, _("Recalculate ALL animal locations", l), asm3.animal.update_all_animal_statuses, o.dbo)
-
-    def post_genallvariable(self, o):
-        l = o.locale
-        asm3.asynctask.function_task(o.dbo, _("Recalculate ALL animal ages/times", l), asm3.animal.update_all_variable_animal_data, o.dbo)
-
-    def post_gendiarylinkinfo(self, o):
-        l = o.locale
-        asm3.asynctask.function_task(o.dbo, _("Regenerate diary link info for incomplete notes", l), asm3.diary.update_link_info_incomplete, o.dbo)
-
-    def post_genlookingfor(self, o):
-        l = o.locale
-        asm3.asynctask.function_task(o.dbo, _("Regenerate 'Person looking for' report", l), asm3.person.update_lookingfor_report, o.dbo)
-
-    def post_genownername(self, o):
-        l = o.locale
-        asm3.asynctask.function_task(o.dbo, _("Regenerate person names in selected format", l), asm3.person.update_owner_names, o.dbo)
-
-    def post_genownerflags(self, o):
-        l = o.locale
-        asm3.asynctask.function_task(o.dbo, _("Regenerate person flags column", l), asm3.person.update_check_flags, o.dbo)
-
-    def post_genlostfound(self, o):
-        l = o.locale
-        asm3.asynctask.function_task(o.dbo, _("Regenerate 'Match lost and found animals' report", l), asm3.lostfound.update_match_report, o.dbo)
-
-    def post_resetnnncodes(self, o):
-        l = o.locale
-        asm3.asynctask.function_task(o.dbo, _("Reset NNN animal code counts for this year", l), asm3.animal.maintenance_reset_nnn_codes, o.dbo)
-
-class calendarview(JSONEndpoint):
-    url = "calendarview"
-    get_permissions = asm3.users.VIEW_ANIMAL
-
-    def controller(self, o):
-        return {}
-
-class calendar_events(ASMEndpoint):
-    url = "calendar_events"
-
-    def content(self, o):
-        start = parse_date("%Y-%m-%d", o.post["start"])
-        end = parse_date("%Y-%m-%d", o.post["end"])
-        if not start or not end:
-            return "[]"
-        events = []
-        ev = o.post["ev"]
-        user = o.user
-        dbo = o.dbo
-        l = o.locale
-        if "d" in ev and self.checkb(asm3.users.VIEW_DIARY):
-            # Show all diary notes on the calendar if the user chose to see all
-            # on the home page, or they have permission to view all notes
-            if asm3.configuration.all_diary_home_page(dbo) or self.checkb(asm3.users.EDIT_ALL_DIARY_NOTES):
-                user = ""
-            for d in asm3.diary.get_between_two_dates(dbo, user, start, end):
-                allday = False
-                # If the diary time is midnight, assume all day instead
-                if d["DIARYDATETIME"].hour == 0 and d["DIARYDATETIME"].minute == 0:
-                    allday = True
-                events.append({ 
-                    "title": d["SUBJECT"], 
-                    "allDay": allday, 
-                    "start": d["DIARYDATETIME"], 
-                    "tooltip": "%s %s %s" % (d["SUBJECT"], d["LINKINFO"], d["NOTE"]), 
-                    "icon": "diary",
-                    "link": "diary_edit_my" })
-        if "v" in ev and self.checkb(asm3.users.VIEW_VACCINATION):
-            for v in asm3.medical.get_vaccinations_two_dates(dbo, start, end, o.locationfilter, o.siteid, o.visibleanimalids):
-                sub = "%s - %s" % (v["VACCINATIONTYPE"], v["ANIMALNAME"])
-                tit = "%s - %s %s (%s) %s" % (v["VACCINATIONTYPE"], v["SHELTERCODE"], v["ANIMALNAME"], v["DISPLAYLOCATIONNAME"], v["COMMENTS"])
-                events.append({ 
-                    "title": sub, 
-                    "allDay": True, 
-                    "start": v["DATEREQUIRED"], 
-                    "tooltip": tit, 
-                    "icon": "vaccination",
-                    "link": "animal_vaccination?id=%s" % v["ANIMALID"] })
-            for v in asm3.medical.get_vaccinations_expiring_two_dates(dbo, start, end, o.locationfilter, o.siteid, o.visibleanimalids):
-                sub = "%s - %s" % (v["VACCINATIONTYPE"], v["ANIMALNAME"])
-                tit = "%s - %s %s (%s) %s" % (v["VACCINATIONTYPE"], v["SHELTERCODE"], v["ANIMALNAME"], v["DISPLAYLOCATIONNAME"], v["COMMENTS"])
-                events.append({ 
-                    "title": sub, 
-                    "allDay": True, 
-                    "start": v["DATEEXPIRES"], 
-                    "tooltip": tit, 
-                    "icon": "vaccination",
-                    "link": "animal_vaccination?id=%s" % v["ANIMALID"] })
-        if "m" in ev and self.checkb(asm3.users.VIEW_MEDICAL):
-            for m in asm3.medical.get_treatments_two_dates(dbo, start, end, o.locationfilter, o.siteid, o.visibleanimalids):
-                sub = "%s - %s" % (m["TREATMENTNAME"], m["ANIMALNAME"])
-                tit = "%s - %s %s (%s) %s %s" % (m["TREATMENTNAME"], m["SHELTERCODE"], m["ANIMALNAME"], m["DISPLAYLOCATIONNAME"], m["DOSAGE"], m["COMMENTS"])
-                events.append({ 
-                    "title": sub, 
-                    "allDay": True, 
-                    "start": m["DATEREQUIRED"], 
-                    "tooltip": tit, 
-                    "icon": "medical",
-                    "link": "animal_medical?id=%s" % m["ANIMALID"] })
-        if "t" in ev and self.checkb(asm3.users.VIEW_TEST):
-            for t in asm3.medical.get_tests_two_dates(dbo, start, end, o.locationfilter, o.siteid, o.visibleanimalids):
-                sub = "%s - %s" % (t["TESTNAME"], t["ANIMALNAME"])
-                tit = "%s - %s %s (%s) %s" % (t["TESTNAME"], t["SHELTERCODE"], t["ANIMALNAME"], t["DISPLAYLOCATIONNAME"], t["COMMENTS"])
-                events.append({ 
-                    "title": sub, 
-                    "allDay": True, 
-                    "start": t["DATEREQUIRED"], 
-                    "tooltip": tit, 
-                    "icon": "test",
-                    "link": "animal_test?id=%s" % t["ANIMALID"] })
-        if "c" in ev and self.checkb(asm3.users.VIEW_CLINIC):
-            for c in asm3.clinic.get_appointments_two_dates(dbo, start, end, o.post["apptfor"], o.siteid):
-                if c.OWNERNAME is not None:
-                    sub = "%s - %s" % (c.OWNERNAME, c.ANIMALNAME)
-                    tit = "%s - %s (%s) %s" % (c.OWNERNAME, c.ANIMALNAME, c.APPTFOR, c.REASONFORAPPOINTMENT)
-                    link = "person_clinic?id=%s" % c.OWNERID
-                else:
-                    sub = "%s" % c.ANIMALNAME
-                    tit = "%s (%s) %s" % (c.ANIMALNAME, c.APPTFOR, c.REASONFORAPPOINTMENT)
-                    link = "animal_clinic?id=%s" % c.ANIMALID
-                events.append({ 
-                    "title": sub, 
-                    "allDay": False, 
-                    "start": c.DATETIME,
-                    "end": add_minutes(c.DATETIME, 20),
-                    "tooltip": tit, 
-                    "icon": "health",
-                    "link": link })
-        if "p" in ev and self.checkb(asm3.users.VIEW_DONATION):
-            for p in asm3.financial.get_donations_due_two_dates(dbo, start, end):
-                sub = "%s - %s" % (p["DONATIONNAME"], p["OWNERNAME"])
-                tit = "%s - %s %s %s" % (p["DONATIONNAME"], p["OWNERNAME"], asm3.html.format_currency(l, p["DONATION"]), p["COMMENTS"])
-                events.append({ 
-                    "title": sub, 
-                    "allDay": True, 
-                    "start": p["DATEDUE"], 
-                    "tooltip": tit, 
-                    "icon": "donation",
-                    "link": "person_donations?id=%s" % p["OWNERID"] })
-        if "o" in ev and self.checkb(asm3.users.VIEW_INCIDENT):
-            for o in asm3.animalcontrol.get_followup_two_dates(dbo, start, end):
-                sub = "%s - %s" % (o["INCIDENTNAME"], o["OWNERNAME"])
-                tit = "%s - %s %s, %s" % (o["INCIDENTNAME"], o["OWNERNAME"], o["DISPATCHADDRESS"], o["CALLNOTES"])
-                events.append({ 
-                    "title": sub, 
-                    "allDay": False, 
-                    "start": o["FOLLOWUPDATETIME"], 
-                    "tooltip": tit, 
-                    "icon": "call",
-                    "link": "incident?id=%s" % o["ACID"] })
-        if "r" in ev and self.checkb(asm3.users.VIEW_TRANSPORT):
-            for r in asm3.movement.get_transport_two_dates(dbo, start, end):
-                sub = "%s - %s" % (r["ANIMALNAME"], r["SHELTERCODE"])
-                tit = "%s %s, %s - %s :: %s, %s" % (r["ANIMALNAME"], r["SHELTERCODE"], r["DRIVEROWNERNAME"], r["PICKUPOWNERADDRESS"], r["DROPOFFOWNERADDRESS"], r["COMMENTS"])
-                allday = False
-                if r["PICKUPDATETIME"].hour == 0 and r["PICKUPDATETIME"].minute == 0:
-                    allday = True
-                events.append({ 
-                    "title": sub, 
-                    "allDay": allday, 
-                    "start": r["PICKUPDATETIME"], 
-                    "end": r["DROPOFFDATETIME"],
-                    "tooltip": tit, 
-                    "icon": "transport",
-                    "link": "animal_transport?id=%s" % r["ANIMALID"]})
-        if "l" in ev and self.checkb(asm3.users.VIEW_TRAPLOAN):
-            for l in asm3.animalcontrol.get_traploan_two_dates(dbo, start, end):
-                sub = "%s - %s" % (l["TRAPTYPENAME"], l["OWNERNAME"])
-                tit = "%s - %s %s, %s" % (l["TRAPTYPENAME"], l["OWNERNAME"], l["TRAPNUMBER"], l["COMMENTS"])
-                events.append({ 
-                    "title": sub, 
-                    "allDay": True, 
-                    "start": l["RETURNDUEDATE"], 
-                    "tooltip": tit, 
-                    "icon": "traploan",
-                    "link": "person_traploan?id=%s" % l["OWNERID"]})
-        asm3.al.debug("calendarview found %d events (%s->%s)" % (len(events), start, end), "code.calendarview", dbo)
-        self.content_type("application/json")
-        return asm3.utils.json(events)
-
-class change_password(JSONEndpoint):
-    url = "change_password"
-
-    def controller(self, o):
-        asm3.al.debug("%s change password screen" % o.user, "code.change_password", o.dbo)
-        return {
-            "ismaster": asm3.smcom.active() and o.dbo.database == o.user,
-            "username": o.user
-        }
-
-    def post_all(self, o):
-        oldpass = o.post["oldpassword"]
-        newpass = o.post["newpassword"]
-        asm3.al.debug("%s changed password" % (o.user), "code.change_password", o.dbo)
-        asm3.users.change_password(o.dbo, o.user, oldpass, newpass)
-
-class change_user_settings(JSONEndpoint):
-    url = "change_user_settings"
-
-    def controller(self, o):
-        asm3.al.debug("%s change user settings screen" % o.user, "code.change_user_settings", o.dbo)
-        return {
-            "user": asm3.users.get_users(o.dbo, o.user),
-            "locales": get_locales(),
-            "sigtype": ELECTRONIC_SIGNATURES,
-            "themes": asm3.lookups.VISUAL_THEMES
-        }
-
-    def post_all(self, o):
-        post = o.post
-        theme = post["theme"]
-        locale = post["locale"]
-        realname = post["realname"]
-        email = post["email"]
-        signature = post["signature"]
-        asm3.al.debug("%s changed settings: theme=%s, locale=%s, realname=%s, email=%s" % (o.user, theme, locale, realname, email), "code.change_password", o.dbo)
-        asm3.users.update_user_settings(o.dbo, o.user, email, realname, locale, theme, signature)
-        self.reload_config()
-
-class citations(JSONEndpoint):
-    url = "citations"
-    get_permissions = asm3.users.VIEW_CITATION
-
-    def controller(self, o):
-        # this screen only supports one mode at present - unpaid fines
-        # if o.post["filter"] == "unpaid" or o.post["filter"] == "":
-        citations = asm3.financial.get_unpaid_fines(o.dbo)
-        asm3.al.debug("got %d citations" % len(citations), "code.citations", o.dbo)
-        return {
-            "name": "citations",
-            "rows": citations,
-            "citationtypes": asm3.lookups.get_citation_types(o.dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_CITATION)
-        return asm3.financial.insert_citation_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_CITATION)
-        asm3.financial.update_citation_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_CITATION)
-        for lid in o.post.integer_list("ids"):
-            asm3.financial.delete_citation(o.dbo, o.user, lid)
-
-class clinic_appointment(ASMEndpoint):
-    url = "clinic_appointment"
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_CLINIC)
-        return asm3.clinic.insert_appointment_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_CLINIC)
-        asm3.clinic.update_appointment_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_CLINIC)
-        for cid in o.post.integer_list("ids"):
-            asm3.clinic.delete_appointment(o.dbo, o.user, cid)
-
-    def post_payment(self, o):
-        self.check(asm3.users.ADD_DONATION)
-        for cid in o.post.integer_list("ids"):
-            asm3.clinic.insert_payment_from_appointment(o.dbo, o.user, cid, o.post)
-
-    def post_personanimals(self, o):
-        self.check(asm3.users.VIEW_ANIMAL)
-        return asm3.utils.json(asm3.animal.get_animals_owned_by(o.dbo, o.post.integer("personid")))
-
-    def post_towaiting(self, o):
-        self.check(asm3.users.CHANGE_CLINIC)
-        for cid in o.post.integer_list("ids"):
-            asm3.clinic.update_appointment_to_waiting(o.dbo, o.user, cid, o.post.datetime("date", "time"))
-
-    def post_towithvet(self, o):
-        self.check(asm3.users.CHANGE_CLINIC)
-        for cid in o.post.integer_list("ids"):
-            asm3.clinic.update_appointment_to_with_vet(o.dbo, o.user, cid, o.post.datetime("date", "time"))
-
-    def post_tocomplete(self, o):
-        self.check(asm3.users.CHANGE_CLINIC)
-        for cid in o.post.integer_list("ids"):
-            asm3.clinic.update_appointment_to_complete(o.dbo, o.user, cid, o.post.datetime("date", "time"))
-
-class clinic_calendar(JSONEndpoint):
-    url = "clinic_calendar"
-    get_permissions = asm3.users.VIEW_CLINIC
-
-    def controller(self, o):
-        return {
-            "forlist": asm3.users.get_users(o.dbo)
-        }
-
-class clinic_invoice(JSONEndpoint):
-    url = "clinic_invoice"
-    get_permissions = asm3.users.VIEW_CLINIC
-
-    def controller(self, o):
-        dbo = o.dbo
-        appointmentid = o.post.integer("appointmentid")
-        appointment = asm3.clinic.get_appointment(dbo, appointmentid)
-        if appointment is None: self.notfound()
-        rows = asm3.clinic.get_invoice_items(dbo, appointmentid)
-        asm3.al.debug("got %d invoice items for appointment %d" % (len(rows), appointmentid), "code.clinic_invoice", dbo)
-        return {
-            "appointment": appointment,
-            "appointmentid": appointmentid,
-            "rows": rows
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_CLINIC)
-        return asm3.clinic.insert_invoice_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_CLINIC)
-        asm3.clinic.update_invoice_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_CLINIC)
-        for iid in o.post.integer_list("ids"):
-            asm3.clinic.delete_invoice(o.dbo, o.user, iid)
-
-class clinic_consultingroom(JSONEndpoint):
-    url = "clinic_consultingroom"
-    js_module = "clinic_appointment"
-    get_permissions = asm3.users.VIEW_CLINIC
-
-    def controller(self, o):
-        dbo = o.dbo
-        sf = o.post.integer("filter")
-        if o.post["filter"] == "": sf = -1
-        rows = asm3.clinic.get_appointments_today(dbo, statusfilter = sf, userfilter = o.user, siteid = o.siteid)
-        asm3.al.debug("got %d appointments" % (len(rows)), "code.clinic_consultingroom", dbo)
-        return {
-            "name": self.url,
-            "filter": sf,
-            "clinicstatuses": asm3.lookups.get_clinic_statuses(dbo),
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "forlist": asm3.users.get_users(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "clinic"),
-            "rows": rows
-        }
-
-class clinic_waitingroom(JSONEndpoint):
-    url = "clinic_waitingroom"
-    js_module = "clinic_appointment"
-    get_permissions = asm3.users.VIEW_CLINIC
-
-    def controller(self, o):
-        dbo = o.dbo
-        sf = o.post.integer("filter")
-        if o.post["filter"] == "": sf = -1
-        rows = asm3.clinic.get_appointments_today(dbo, statusfilter = sf, siteid = o.siteid)
-        asm3.al.debug("got %d appointments" % (len(rows)), "code.clinic_waitingroom", dbo)
-        return {
-            "name": self.url,
-            "filter": sf,
-            "clinicstatuses": asm3.lookups.get_clinic_statuses(dbo),
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "forlist": asm3.users.get_users(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "clinic"),
-            "rows": rows
-        }
-
-class csvexport(JSONEndpoint):
-    url = "csvexport"
-    get_permissions = asm3.users.EXPORT_REPORT
-
-class csvexport_animals(ASMEndpoint):
-    url = "csvexport_animals"
-    get_permissions = asm3.users.EXPORT_REPORT
-
-    def content(self, o):
-        # If we're retrieving an already saved export, serve it.
-        if o.post["get"] != "":
-            self.content_type("text/csv")
-            self.header("Content-Disposition", "attachment; filename=export.csv")
-            v = asm3.cachedisk.get(o.post["get"], o.dbo.database)
-            if v is None: self.notfound()
-            return v
-        else:
-            l = o.locale
-            asm3.asynctask.function_task(o.dbo, _("Export Animals as CSV", l), asm3.csvimport.csvexport_animals, 
-                o.dbo, o.post["filter"], o.post["animals"], o.post.boolean("includeimage") == 1)
-            self.redirect("task")
-
-class csvimport(JSONEndpoint):
-    url = "csvimport"
-    get_permissions = asm3.users.IMPORT_CSV_FILE
-    post_permissions = asm3.users.IMPORT_CSV_FILE
-
-    def controller(self, o):
-        return {}
-
-    def post_all(self, o):
-        l = o.locale
-        asm3.asynctask.function_task(o.dbo, _("Import a CSV file", l), asm3.csvimport.csvimport, 
-            o.dbo, o.post.filedata(), o.post["encoding"], o.user, 
-            o.post.boolean("createmissinglookups") == 1, o.post.boolean("cleartables") == 1, 
-            o.post.boolean("checkduplicates") == 1, o.post.boolean("prefixanimalcodes") == 1)
-        self.redirect("task")
-
-class csvimport_paypal(JSONEndpoint):
-    url = "csvimport_paypal"
-    get_permissions = asm3.users.IMPORT_CSV_FILE
-    post_permissions = asm3.users.IMPORT_CSV_FILE
-
-    def controller(self, o):
-        return { 
-            "donationtypes": asm3.lookups.get_donation_types(o.dbo),
-            "paymentmethods": asm3.lookups.get_payment_methods(o.dbo),
-            "flags": asm3.lookups.get_person_flags(o.dbo)
-        }
-
-    def post_all(self, o):
-        l = o.locale
-        asm3.asynctask.function_task(o.dbo, _("Import a PayPal CSV file", l), asm3.csvimport.csvimport_paypal, o.dbo, \
-            o.post.filedata(), o.post.integer("type"), o.post.integer("payment"), o.post["flags"], o.user, o.post["encoding"])
-        self.redirect("task")
-
-class diary(ASMEndpoint):
-    url = "diary"
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_DIARY)
-        return asm3.diary.insert_diary_from_form(o.dbo, o.user, o.post.integer("linktypeid"), o.post.integer("linkid"), o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.EDIT_MY_DIARY_NOTES)
-        asm3.diary.update_diary_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_DIARY)
-        for did in o.post.integer_list("ids"):
-            asm3.diary.delete_diary(o.dbo, o.user, did)
-
-    def post_complete(self, o):
-        self.check(asm3.users.BULK_COMPLETE_NOTES)
-        for did in o.post.integer_list("ids"):
-            asm3.diary.complete_diary_note(o.dbo, o.user, did)
-
-class diary_edit(JSONEndpoint):
-    url = "diary_edit"
-    js_module = "diary"
-    get_permissions = asm3.users.EDIT_ALL_DIARY_NOTES
-
-    def controller(self, o):
-        dbo = o.dbo
-        dfilter = o.post["filter"]
-        if dfilter == "uncompleted" or dfilter == "":
-            diaries = asm3.diary.get_uncompleted_upto_today(dbo)
-        elif dfilter == "completed":
-            diaries = asm3.diary.get_completed_upto_today(dbo)
-        elif dfilter == "future":
-            diaries = asm3.diary.get_future(dbo)
-        elif dfilter == "all":
-            diaries = asm3.diary.get_all_upto_today(dbo)
-        asm3.al.debug("got %d diaries, filter was %s" % (len(diaries), dfilter), "code.diary_edit", dbo)
-        return {
-            "rows": diaries,
-            "newnote": o.post.integer("newnote") == 1,
-            "name": "diary_edit",
-            "linkid": 0,
-            "linktypeid": asm3.diary.NO_LINK,
-            "forlist": asm3.users.get_users_and_roles(dbo)
-        }
-
-class diary_edit_my(JSONEndpoint):
-    url = "diary_edit_my"
-    js_module = "diary"
-    get_permissions = asm3.users.EDIT_MY_DIARY_NOTES
-
-    def controller(self, o):
-        dbo = o.dbo
-        userfilter = o.user
-        dfilter = o.post["filter"]
-        if dfilter == "uncompleted" or dfilter == "":
-            diaries = asm3.diary.get_uncompleted_upto_today(dbo, userfilter)
-        elif dfilter == "completed":
-            diaries = asm3.diary.get_completed_upto_today(dbo, userfilter)
-        elif dfilter == "future":
-            diaries = asm3.diary.get_future(dbo, userfilter)
-        elif dfilter == "all":
-            diaries = asm3.diary.get_all_upto_today(dbo, userfilter)
-        asm3.al.debug("got %d diaries (%s), filter was %s" % (len(diaries), userfilter, dfilter), "code.diary_edit_my", dbo)
-        return {
-            "rows": diaries,
-            "newnote": o.post.integer("newnote") == 1,
-            "name": "diary_edit_my",
-            "linkid": 0,
-            "linktypeid": asm3.diary.NO_LINK,
-            "forlist": asm3.users.get_users_and_roles(dbo)
-        }
-
-class diarytask(JSONEndpoint):
-    url = "diarytask"
-    get_permissions = asm3.users.EDIT_DIARY_TASKS
-    post_permissions = asm3.users.EDIT_DIARY_TASKS
-
-    def controller(self, o):
-        dbo = o.dbo
-        taskid = o.post.integer("taskid")
-        taskname = asm3.diary.get_diarytask_name(dbo, taskid)
-        diarytaskdetail = asm3.diary.get_diarytask_details(dbo, taskid)
-        asm3.al.debug("got %d diary task details" % len(diarytaskdetail), "code.diarytask", dbo)
-        return {
-            "rows": diarytaskdetail,
-            "taskid": taskid,
-            "taskname": taskname,
-            "forlist": asm3.users.get_users_and_roles(dbo)
-        }
-
-    def post_create(self, o):
-        return asm3.diary.insert_diarytaskdetail_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        asm3.diary.update_diarytaskdetail_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        for did in o.post.integer_list("ids"):
-            asm3.diary.delete_diarytaskdetail(o.dbo, o.user, did)
-    
-    def post_exec(self, o):
-        self.check(asm3.users.ADD_DIARY)
-        asm3.diary.execute_diary_task(o.dbo, o.user, o.post["tasktype"], o.post.integer("taskid"), o.post.integer("id"), o.post.date("seldate"))
-
-class diarytasks(JSONEndpoint):
-    url = "diarytasks"
-    get_permissions = asm3.users.EDIT_DIARY_TASKS
-    post_permissions = asm3.users.EDIT_DIARY_TASKS
-
-    def controller(self, o):
-        dbo = o.dbo
-        diarytaskhead = asm3.diary.get_diarytasks(dbo)
-        asm3.al.debug("got %d diary tasks" % len(diarytaskhead), "code.diarytasks", dbo)
-        return {
-            "rows": diarytaskhead
-        }
-
-    def post_create(self, o):
-        return asm3.diary.insert_diarytaskhead_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        asm3.diary.update_diarytaskhead_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        for did in o.post.integer_list("ids"):
-            asm3.diary.delete_diarytask(o.dbo, o.user, did)
-
-class document_gen(ASMEndpoint):
-    url = "document_gen"
-    get_permissions = asm3.users.GENERATE_DOCUMENTS
-
-    def content(self, o):
-        dbo = o.dbo
-        post = o.post
-        linktype = post["linktype"]
-        if post["id"] == "" or post["id"] == "0": raise asm3.utils.ASMValidationError("no id parameter")
-        dtid = post.integer("dtid")
-        templatename = asm3.template.get_document_template_name(dbo, dtid)
-        title = templatename
-        loglinktype = asm3.log.ANIMAL
-        asm3.al.debug("generating %s document for %d, template '%s'" % (linktype, post.integer("id"), templatename), "code.document_gen", dbo)
-        logid = post.integer("id")
-        if linktype == "ANIMAL" or linktype == "":
-            loglinktype = asm3.log.ANIMAL
-            content = asm3.wordprocessor.generate_animal_doc(dbo, dtid, post.integer("id"), o.user)
-        elif linktype == "ANIMALCONTROL":
-            loglinktype = asm3.log.ANIMALCONTROL
-            content = asm3.wordprocessor.generate_animalcontrol_doc(dbo, dtid, post.integer("id"), o.user)
-        elif linktype == "CLINIC":
-            loglinktype = asm3.log.PERSON
-            content = asm3.wordprocessor.generate_clinic_doc(dbo, dtid, post.integer("id"), o.user)
-        elif linktype == "PERSON":
-            loglinktype = asm3.log.PERSON
-            content = asm3.wordprocessor.generate_person_doc(dbo, dtid, post.integer("id"), o.user)
-        elif linktype == "DONATION":
-            loglinktype = asm3.log.PERSON
-            logid = asm3.financial.get_donation(dbo, post.integer_list("id")[0])["OWNERID"]
-            content = asm3.wordprocessor.generate_donation_doc(dbo, dtid, post.integer_list("id"), o.user)
-        elif linktype == "FOUNDANIMAL":
-            loglinktype = asm3.log.FOUNDANIMAL
-            logid = asm3.lostfound.get_foundanimal(dbo, post.integer("id"))["OWNERID"]
-            content = asm3.wordprocessor.generate_foundanimal_doc(dbo, dtid, post.integer("id"), o.user)
-        elif linktype == "LOSTANIMAL":
-            loglinktype = asm3.log.LOSTANIMAL
-            logid = asm3.lostfound.get_lostanimal(dbo, post.integer("id"))["OWNERID"]
-            content = asm3.wordprocessor.generate_lostanimal_doc(dbo, dtid, post.integer("id"), o.user)
-        elif linktype == "LICENCE":
-            loglinktype = asm3.log.PERSON
-            logid = asm3.financial.get_licence(dbo, post.integer("id"))["OWNERID"]
-            content = asm3.wordprocessor.generate_licence_doc(dbo, dtid, post.integer("id"), o.user)
-        elif linktype == "MOVEMENT":
-            loglinktype = asm3.log.PERSON
-            logid = asm3.movement.get_movement(dbo, post.integer("id"))["OWNERID"]
-            content = asm3.wordprocessor.generate_movement_doc(dbo, dtid, post.integer("id"), o.user)
-        elif linktype == "TRANSPORT":
-            loglinktype = asm3.log.ANIMAL
-            logid = asm3.movement.get_transport(dbo, post.integer_list("id")[0])["ANIMALID"]
-            content = asm3.wordprocessor.generate_transport_doc(dbo, dtid, post.integer_list("id"), o.user)
-        elif linktype == "VOUCHER":
-            loglinktype = asm3.log.PERSON
-            logid = asm3.financial.get_voucher(dbo, post.integer("id"))["OWNERID"]
-            content = asm3.wordprocessor.generate_voucher_doc(dbo, dtid, post.integer("id"), o.user)
-        elif linktype == "WAITINGLIST":
-            loglinktype = asm3.log.WAITINGLIST
-            logid = asm3.waitinglist.get_waitinglist_by_id(dbo, post.integer("id"))["OWNERID"]
-            content = asm3.wordprocessor.generate_waitinglist_doc(dbo, dtid, post.integer("id"), o.user)
-        if asm3.configuration.generate_document_log(dbo) and asm3.configuration.generate_document_log_type(dbo) > 0:
-            asm3.log.add_log(dbo, o.user, loglinktype, logid, asm3.configuration.generate_document_log_type(dbo), _("Generated document '{0}'").format(templatename))
-        if templatename.endswith(".html"):
-            self.content_type("text/html")
-            self.cache_control(0)
-            return asm3.html.tinymce_header(title, "document_edit.js", visualaids=False, jswindowprint=asm3.configuration.js_window_print(dbo)) + \
-                asm3.html.tinymce_main(dbo.locale, "document_gen", recid=post["id"], linktype=post["linktype"], \
-                    dtid=dtid, content=asm3.utils.escape_tinymce(content))
-        elif templatename.endswith(".odt"):
-            self.content_type("application/vnd.oasis.opendocument.text")
-            self.header("Content-Disposition", "attach; filename=\"%s\"" % templatename)
-            self.cache_control(0)
-            return content
-
-    def post_save(self, o):
-        self.check(asm3.users.ADD_MEDIA)
-        dbo = o.dbo
-        post = o.post
-        linktype = post["linktype"]
-        dtid = post.integer("dtid")
-        tempname = asm3.template.get_document_template_name(dbo, dtid)
-        recid = post.integer("recid")
-        if linktype == "ANIMAL":
-            tempname += " - " + asm3.animal.get_animal_namecode(dbo, recid)
-            asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMAL, recid, tempname, post["document"])
-            self.redirect("animal_media?id=%d" % recid)
-        elif linktype == "ANIMALCONTROL":
-            tempname += " - " + asm3.utils.padleft(recid, 6)
-            asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMALCONTROL, recid, tempname, post["document"])
-            self.redirect("incident_media?id=%d" % recid)
-        elif linktype == "CLINIC":
-            c = asm3.clinic.get_appointment(dbo, recid)
-            if c is None:
-                raise asm3.utils.ASMValidationError("%d is not a valid clinic id" % recid)
-            animalid = c["ANIMALID"]
-            ownerid = c["OWNERID"]
-            if ownerid: 
-                tempname = "%s - %s" % (tempname, asm3.person.get_person_name(dbo, ownerid))
-                asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, ownerid, tempname, post["document"])
-                self.redirect("person_media?id=%d" % ownerid)
-            else:
-                tempname = "%s - %s" % (tempname, asm3.animal.get_animal_namecode(dbo, animalid))
-                asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMAL, animalid, tempname, post["document"])
-                self.redirect("animal_media?id=%d" % animalid)
-        elif linktype == "FOUNDANIMAL":
-            tempname += " - " + asm3.utils.padleft(recid, 6)
-            asm3.media.create_document_media(dbo, o.user, asm3.media.FOUNDANIMAL, recid, tempname, post["document"])
-            self.redirect("foundanimal_media?id=%d" % recid)
-        elif linktype == "LOSTANIMAL":
-            tempname += " - " + asm3.utils.padleft(recid, 6)
-            asm3.media.create_document_media(dbo, o.user, asm3.media.LOSTANIMAL, recid, tempname, post["document"])
-            self.redirect("lostanimal_media?id=%d" % recid)
-        elif linktype == "PERSON":
-            tempname += " - " + asm3.person.get_person_name(dbo, recid)
-            asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, recid, tempname, post["document"])
-            self.redirect("person_media?id=%d" % recid)
-        elif linktype == "WAITINGLIST":
-            tempname += " - " + asm3.utils.padleft(recid, 6)
-            asm3.media.create_document_media(dbo, o.user, asm3.media.WAITINGLIST, recid, tempname, post["document"])
-            self.redirect("waitinglist_media?id=%d" % recid)
-        elif linktype == "DONATION":
-            d = asm3.financial.get_donations_by_ids(dbo, post.integer_list("recid"))
-            if len(d) == 0:
-                raise asm3.utils.ASMValidationError("list '%s' does not contain valid ids" % recid)
-            ownerid = d[0]["OWNERID"]
-            tempname += " - " + asm3.person.get_person_name(dbo, ownerid)
-            asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, ownerid, tempname, post["document"])
-            self.redirect("person_media?id=%d" % ownerid)
-        elif linktype == "TRANSPORT":
-            t = asm3.movement.get_transports_by_ids(dbo, post.integer_list("recid"))
-            if len(t) == 0:
-                raise asm3.utils.ASMValidationError("list '%s' does not contain valid ids" % recid)
-            animalid = t[0]["ANIMALID"]
-            tempname += " - " + asm3.animal.get_animal_namecode(dbo, animalid)
-            asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMAL, animalid, tempname, post["document"])
-            self.redirect("animal_media?id=%d" % animalid)
-        elif linktype == "VOUCHER":
-            v = asm3.financial.get_voucher(dbo, recid)
-            if v is None:
-                raise asm3.utils.ASMValidationError("%d is not a valid voucher id" % recid)
-            ownerid = v["OWNERID"]
-            tempname += " - " + asm3.person.get_person_name(dbo, ownerid)
-            asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, ownerid, tempname, post["document"])
-            self.redirect("person_media?id=%d" % ownerid)
-        elif linktype == "LICENCE":
-            l = asm3.financial.get_licence(dbo, recid)
-            if l is None:
-                raise asm3.utils.ASMValidationError("%d is not a valid licence id" % recid)
-            animalid = l["ANIMALID"]
-            ownerid = l["OWNERID"]
-            tempname += " - " + asm3.person.get_person_name(dbo, ownerid)
-            if animalid: asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMAL, animalid, tempname, post["document"])
-            if ownerid: asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, ownerid, tempname, post["document"])
-            self.redirect("person_media?id=%d" % ownerid)
-        elif linktype == "MOVEMENT":
-            m = asm3.movement.get_movement(dbo, recid)
-            if m is None:
-                raise asm3.utils.ASMValidationError("%d is not a valid movement id" % recid)
-            animalid = m["ANIMALID"]
-            ownerid = m["OWNERID"]
-            tempname = "%s - %s::%s" % (tempname, asm3.animal.get_animal_namecode(dbo, animalid), asm3.person.get_person_name(dbo, ownerid))
-            if ownerid: asm3.media.create_document_media(dbo, o.user, asm3.media.PERSON, ownerid, tempname, post["document"])
-            if animalid: asm3.media.create_document_media(dbo, o.user, asm3.media.ANIMAL, animalid, tempname, post["document"])
-            self.redirect("person_media?id=%d" % ownerid)
-        else:
-            raise asm3.utils.ASMValidationError("Linktype '%s' is invalid, cannot save" % linktype)
-
-    def post_emailtemplate(self, o):
-        self.content_type("text/html")
-        if o.post["donationids"] != "":
-            return asm3.wordprocessor.generate_donation_doc(o.dbo, o.post.integer("dtid"), o.post.integer_list("donationids"), o.user)
-        elif o.post.integer("personid") != 0:
-            return asm3.wordprocessor.generate_person_doc(o.dbo, o.post.integer("dtid"), o.post.integer("personid"), o.user)
-        elif o.post.integer("animalid") != 0:
-            return asm3.wordprocessor.generate_animal_doc(o.dbo, o.post.integer("dtid"), o.post.integer("animalid"), o.user)
-        else:
-            return asm3.template.get_document_template_content(o.dbo, o.post.integer("dtid"))
-
-    def post_pdf(self, o):
-        self.check(asm3.users.VIEW_MEDIA)
-        dbo = o.dbo
-        post = o.post
-        disposition = asm3.configuration.pdf_inline(dbo) and "inline; filename=\"doc.pdf\"" or "attachment; filename=\"doc.pdf\""
-        self.content_type("application/pdf")
-        self.header("Content-Disposition", disposition)
-        return asm3.utils.html_to_pdf(dbo, post["document"])
-
-    def post_print(self, o):
-        self.check(asm3.users.VIEW_MEDIA)
-        l = o.locale
-        post = o.post
-        self.content_type("text/html")
-        return "%s%s%s" % (asm3.html.tinymce_print_header(_("Print Preview", l)), post["document"], "</body></html>")
-
-class document_template_edit(ASMEndpoint):
-    url = "document_template_edit"
-    get_permissions = asm3.users.MODIFY_DOCUMENT_TEMPLATES
-    post_permissions = asm3.users.MODIFY_DOCUMENT_TEMPLATES
-
-    def content(self, o):
-        dbo = o.dbo
-        post = o.post
-        dtid = post.integer("dtid")
-        templatename = asm3.template.get_document_template_name(dbo, dtid)
-        if templatename == "": self.notfound()
-        title = templatename
-        asm3.al.debug("editing %s" % templatename, "code.document_template_edit", dbo)
-        if templatename.endswith(".html"):
-            content = asm3.utils.escape_tinymce(asm3.template.get_document_template_content(dbo, dtid))
-            self.content_type("text/html")
-            self.cache_control(0)
-            return asm3.html.tinymce_header(title, "document_edit.js", jswindowprint=asm3.configuration.js_window_print(dbo)) + \
-                asm3.html.tinymce_main(dbo.locale, "document_template_edit", dtid=dtid, content=content)
-        elif templatename.endswith(".odt"):
-            content = asm3.template.get_document_template_content(dbo, dtid)
-            self.content_type("application/vnd.oasis.opendocument.text")
-            self.cache_control(0)
-            return content
-
-    def post_save(self, o):
-        dbo = o.dbo
-        post = o.post
-        dtid = post.integer("dtid")
-        asm3.template.update_document_template_content(dbo, dtid, post["document"])
-        self.redirect("document_templates")
-
-    def post_pdf(self, o):
-        dbo = o.dbo
-        post = o.post
-        disposition = asm3.configuration.pdf_inline(dbo) and "inline; filename=\"doc.pdf\"" or "attachment; filename=\"doc.pdf\""
-        self.content_type("application/pdf")
-        self.header("Content-Disposition", disposition)
-        return asm3.utils.html_to_pdf(dbo, post["document"])
-
-    def post_print(self, o):
-        post = o.post
-        l = o.locale
-        self.content_type("text/html")
-        return "%s%s%s" % (asm3.html.tinymce_print_header(_("Print Preview", l)), post["document"], "</body></html>")
-
-class document_media_edit(ASMEndpoint):
-    url = "document_media_edit"
-    get_permissions = asm3.users.VIEW_MEDIA
-
-    def content(self, o):
-        dbo = o.dbo
-        post = o.post
-        lastmod, medianame, mimetype, filedata = asm3.media.get_media_file_data(dbo, post.integer("id"))
-        asm3.al.debug("editing media %d" % post.integer("id"), "code.document_media_edit", dbo)
-        title = medianame
-        self.content_type("text/html")
-        return asm3.html.tinymce_header(title, "document_edit.js", jswindowprint=asm3.configuration.js_window_print(dbo), \
-            onlysavewhendirty=False, readonly=asm3.media.has_signature(dbo, post.integer("id"))) + \
-            asm3.html.tinymce_main(dbo.locale, "document_media_edit", mediaid=post.integer("id"), redirecturl=post["redirecturl"], \
-                content=asm3.utils.escape_tinymce(filedata))
-
-    def post_save(self, o):
-        self.check(asm3.users.CHANGE_MEDIA)
-        post = o.post
-        asm3.media.update_file_content(o.dbo, o.user, post.integer("mediaid"), post["document"])
-        raise self.redirect(post["redirecturl"])
-
-    def post_pdf(self, o):
-        self.check(asm3.users.VIEW_MEDIA)
-        dbo = o.dbo
-        disposition = asm3.configuration.pdf_inline(dbo) and "inline; filename=\"doc.pdf\"" or "attachment; filename=\"doc.pdf\""
-        self.content_type("application/pdf")
-        self.header("Content-Disposition", disposition)
-        return asm3.utils.html_to_pdf(dbo, o.post["document"])
-
-    def post_print(self, o):
-        self.check(asm3.users.VIEW_MEDIA)
-        l = o.locale
-        self.content_type("text/html")
-        return "%s%s%s" % (asm3.html.tinymce_print_header(_("Print Preview", l)), o.post["document"], "</body></html>")
-
-class document_repository(JSONEndpoint):
-    url = "document_repository"
-    get_permissions = asm3.users.VIEW_REPO_DOCUMENT
-
-    def controller(self, o):
-        documents = asm3.dbfs.get_document_repository(o.dbo)
-        asm3.al.debug("got %d documents in repository" % len(documents), "code.document_repository", o.dbo)
-        return { 
-            "rows": documents,
-            "templates": asm3.template.get_document_templates(o.dbo, "email")
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_REPO_DOCUMENT)
-        if o.post["filename"] != "":
-            # If filename is supplied it's an HTML5 upload
-            filename = o.post["filename"]
-            filedata = o.post["filedata"]
-            # Strip the data URL and decode
-            if filedata.startswith("data:"):
-                filedata = filedata[filedata.find(",")+1:]
-                filedata = filedata.replace(" ", "+") # Unescape turns pluses back into spaces, which breaks base64
-            filedata = asm3.utils.base64decode(filedata)
-        else:
-            # Otherwise it's an old style file input
-            filename = asm3.utils.filename_only(o.post.data.filechooser.filename)
-            filedata = o.post.data.filechooser.value
-        asm3.dbfs.upload_document_repository(o.dbo, o.post["path"], filename, filedata)
-        self.redirect("document_repository")
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_REPO_DOCUMENT)
-        for i in o.post.integer_list("ids"):
-            asm3.dbfs.delete_id(o.dbo, i)
-
-    def post_email(self, o):
-        self.check(asm3.users.EMAIL_PERSON)
-        dbo = o.dbo
-        post = o.post
-        attachments = []
-        for dbfsid in post.integer_list("ids"):
-            name = asm3.dbfs.get_name_for_id(dbo, dbfsid)
-            content = asm3.dbfs.get_string_id(dbo, dbfsid)
-            attachments.append(( name, asm3.media.mime_type(name), content ))
-        asm3.utils.send_email(dbo, post["from"], post["to"], post["cc"], post["bcc"], post["subject"], post["body"], "html", attachments)
-        if asm3.configuration.audit_on_send_email(dbo): 
-            asm3.audit.email(dbo, o.user, post["from"], post["to"], post["cc"], post["bcc"], post["subject"], post["body"])
-        return post["to"]
-
-class document_repository_file(ASMEndpoint):
-    url = "document_repository_file"
-    get_permissions = asm3.users.VIEW_REPO_DOCUMENT
-
-    def content(self, o):
-        if o.post.integer("dbfsid") != 0:
-            name = asm3.dbfs.get_name_for_id(o.dbo, o.post.integer("dbfsid"))
-            mimetype = asm3.media.mime_type(name)
-            disp = "attachment"
-            if mimetype == "application/pdf": disp = "inline" # Try to show PDFs in place
-            self.content_type(mimetype)
-            self.header("Content-Disposition", "%s; filename=\"%s\"" % (disp, name))
-            return asm3.dbfs.get_string_id(o.dbo, o.post.integer("dbfsid"))
-
-class document_templates(JSONEndpoint):
-    url = "document_templates"
-    get_permissions = asm3.users.MODIFY_DOCUMENT_TEMPLATES
-    post_permissions = asm3.users.MODIFY_DOCUMENT_TEMPLATES
-
-    def controller(self, o):
-        templates = asm3.template.get_document_templates(o.dbo)
-        asm3.al.debug("got %d document templates" % len(templates), "code.document_templates", o.dbo)
-        return {
-            "rows": templates
-        }
-
-    def post_create(self, o):
-        return asm3.template.create_document_template(o.dbo, o.user, o.post["template"], show = o.post["show"])
-
-    def post_createodt(self, o):
-        post = o.post
-        fn = post.filename()
-        if post["path"] != "": fn = post["path"] + "/" + fn
-        asm3.template.create_document_template(o.dbo, o.user, fn, ".odt", post.filedata(), show = o.post["odtshow"])
-        self.redirect("document_templates")
-
-    def post_clone(self, o):
-        for t in o.post.integer_list("ids"):
-            return asm3.template.clone_document_template(o.dbo, o.user, t, o.post["template"])
-
-    def post_delete(self, o):
-        for t in o.post.integer_list("ids"):
-            asm3.template.delete_document_template(o.dbo, o.user, t)
-
-    def post_rename(self, o):
-        asm3.template.rename_document_template(o.dbo, o.user, o.post.integer("dtid"), o.post["newname"])
-
-    def post_show(self, o):
-        for t in o.post.integer_list("ids"):
-            asm3.template.update_document_template_show(o.dbo, o.user, t, o.post["newshow"])
-
-class donation(JSONEndpoint):
-    url = "donation"
-    js_module = "donations"
-    get_permissions = asm3.users.VIEW_DONATION
-
-    def controller(self, o):
-        dbo = o.dbo
-        offset = o.post["offset"]
-        if offset == "": offset = "m0"
-        donations = asm3.financial.get_donations(dbo, offset)
-        asm3.al.debug("got %d donations" % (len(donations)), "code.donation", dbo)
-        return {
-            "name": "donation",
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "accounts": asm3.financial.get_accounts(dbo, onlybank=True),
-            "logtypes": asm3.lookups.get_log_types(dbo), 
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "frequencies": asm3.lookups.get_donation_frequencies(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "payment"),
-            "rows": donations
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_DONATION)
-        return "%s|%s" % (asm3.financial.insert_donation_from_form(o.dbo, o.user, o.post), o.post["receiptnumber"])
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_DONATION)
-        asm3.financial.update_donation_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_DONATION)
-        for did in o.post.integer_list("ids"):
-            asm3.financial.delete_donation(o.dbo, o.user, did)
-
-    def post_tokencharge(self, o):
-        self.check(asm3.users.CHANGE_DONATION)
-        dbo = o.dbo
-        post = o.post
-        title = post["title"]
-        installments = post["installments"] # number of payments to pass to cardcom
-        processor = asm3.financial.get_payment_processor(dbo, post["processor"])
-        if not processor.validatePaymentReference(post["payref"]):
-            return (asm3.utils.json({"error": "Invalid payref"}))
-        if processor.isPaymentReceived(post["payref"]):
-            return (asm3.utils.json({"error": "Expired payref"}))
-        try:
-            processor.tokenCharge(post["payref"], title, installments)
-            return (asm3.utils.json({"message": _("Successful token charge.")}))
-        except Exception as e:
-            return (asm3.utils.json({"error": str(e)}))
-
-    def post_popuprequest(self, o):
-        self.check(asm3.users.CHANGE_DONATION)
-        dbo = o.dbo
-        post = o.post
-        title = post["title"]
-        processor = asm3.financial.get_payment_processor(dbo, post["processor"])
-        if not processor.validatePaymentReference(post["payref"]):
-            return (asm3.utils.json({"error": "Invalid payref"}))
-        if processor.isPaymentReceived(post["payref"]):
-            return (asm3.utils.json({"error": "Expired payref"}))
-        return_url = post["return"] or asm3.configuration.payment_return_url(dbo)
-        try:
-            url = processor.checkoutUrl(post["payref"], return_url, title)
-            return (asm3.utils.json({"url": url}))
-        except Exception as e:
-            return (asm3.utils.json({"error": str(e)}))
-
-    def post_emailrequest(self, o):
-        self.check(asm3.users.EMAIL_PERSON)
-        dbo = o.dbo
-        post = o.post
-        emailadd = post["to"]
-        body = post["body"]
-        params = { 
-            "account": dbo.database, 
-            "method": "checkout",
-            "processor": post["processor"],
-            "payref": post["payref"],
-            "title": post["subject"] 
-        }
-        url = "%s?%s" % (SERVICE_URL, asm3.utils.urlencode(params))
-        body = asm3.utils.replace_url_token(body, url, post["payref"])
-        if post.boolean("addtolog"):
-            asm3.log.add_log_email(dbo, o.user, asm3.log.PERSON, post.integer("person"), post.integer("logtype"), 
-                emailadd, post["subject"], body)
-        asm3.utils.send_email(dbo, post["from"], emailadd, post["cc"], post["bcc"], post["subject"], body, "html")
-        if asm3.configuration.audit_on_send_email(dbo): 
-            asm3.audit.email(dbo, o.user, post["from"], emailadd, post["cc"], post["bcc"], post["subject"], body)
-        return emailadd
-
-    def post_nextreceipt(self, o):
-        return asm3.financial.get_next_receipt_number(o.dbo)
-
-    def post_receive(self, o):
-        self.check( asm3.users.CHANGE_DONATION)
-        for did in o.post.integer_list("ids"):
-            asm3.financial.receive_donation(o.dbo, o.user, did)
-
-    def post_personmovements(self, o):
-        self.check(asm3.users.VIEW_MOVEMENT)
-        self.content_type("application/json")
-        return asm3.utils.json(asm3.movement.get_person_movements(o.dbo, o.post.integer("personid")))
-
-class donation_receive(JSONEndpoint):
-    url = "donation_receive"
-    get_permissions = asm3.users.ADD_DONATION
-
-    def controller(self, o):
-        dbo = o.dbo
-        asm3.al.debug("receiving donation", "code.donation_receive", dbo)
-        return {
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "accounts": asm3.financial.get_accounts(dbo, onlybank=True)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_DONATION)
-        return asm3.financial.insert_donations_from_form(o.dbo, o.user, o.post, o.post["received"], True, o.post["person"], o.post["animal"], o.post["movement"], False)
-
-class foundanimal(JSONEndpoint):
-    url = "foundanimal"
-    js_module = "lostfound"
-    get_permissions = asm3.users.VIEW_FOUND_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.lostfound.get_foundanimal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        recname = "%s %s %s" % (a.AGEGROUP, a.SPECIESNAME, a.OWNERNAME)
-        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, "animalfound", a["ID"], recname)
-        asm3.al.debug("open found animal %s" % recname, "code.foundanimal", dbo)
-        return {
-            "animal": a,
-            "name": "foundanimal",
-            "additional": asm3.additional.get_additional_fields(dbo, a["ID"], "foundanimal"),
-            "agegroups": asm3.configuration.age_groups(dbo),
-            "audit": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, "animalfound", a["ID"]) or [],
-            "breeds": asm3.lookups.get_breeds_by_species(dbo),
-            "colours": asm3.lookups.get_basecolours(dbo),
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "foundanimal"),
-            "templatesemail": asm3.template.get_document_templates(dbo, "email"),
-            "tabcounts": asm3.lostfound.get_foundanimal_satellite_counts(dbo, a["LFID"])[0]
-        }
-
-    def post_save(self, o):
-        self.check(asm3.users.CHANGE_FOUND_ANIMAL)
-        asm3.lostfound.update_foundanimal_from_form(o.dbo, o.post, o.user)
-
-    def post_email(self, o):
-        self.check(asm3.users.EMAIL_PERSON)
-        asm3.lostfound.send_email_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_FOUND_ANIMAL)
-        asm3.lostfound.delete_foundanimal(o.dbo, o.user, o.post.integer("id"))
-
-    def post_toanimal(self, o):
-        self.check(asm3.users.ADD_ANIMAL)
-        return str(asm3.lostfound.create_animal_from_found(o.dbo, o.user, o.post.integer("id")))
-
-    def post_towaitinglist(self, o):
-        self.check(asm3.users.ADD_WAITING_LIST)
-        return str(asm3.lostfound.create_waitinglist_from_found(o.dbo, o.user, o.post.integer("id")))
-
-class foundanimal_diary(JSONEndpoint):
-    url = "foundanimal_diary"
-    js_module = "diary"
-    get_permissions = asm3.users.VIEW_DIARY
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.lostfound.get_foundanimal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        diaries = asm3.diary.get_diaries(dbo, asm3.diary.FOUNDANIMAL, o.post.integer("id"))
-        asm3.al.debug("got %d diaries for found animal %s %s %s" % (len(diaries), a["AGEGROUP"], a["SPECIESNAME"], a["OWNERNAME"]), "code.foundanimal_diary", dbo)
-        return {
-            "rows": diaries,
-            "animal": a,
-            "tabcounts": asm3.lostfound.get_foundanimal_satellite_counts(dbo, a["LFID"])[0],
-            "name": "foundanimal_diary",
-            "linkid": a["LFID"],
-            "linktypeid": asm3.diary.FOUNDANIMAL,
-            "forlist": asm3.users.get_users_and_roles(dbo)
-        }
-
-class foundanimal_find(JSONEndpoint):
-    url = "foundanimal_find"
-    js_module = "lostfound_find"
-    get_permissions = asm3.users.VIEW_FOUND_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        return {
-            "agegroups": asm3.configuration.age_groups(dbo),
-            "colours": asm3.lookups.get_basecolours(dbo),
-            "name": "foundanimal_find",
-            "species": asm3.lookups.get_species(dbo),
-            "breeds": asm3.lookups.get_breeds_by_species(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "mode": "found"
-        }
-
-class foundanimal_find_results(JSONEndpoint):
-    url = "foundanimal_find_results"
-    js_module = "lostfound_find_results"
-    get_permissions = asm3.users.VIEW_FOUND_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        results = asm3.lostfound.get_foundanimal_find_advanced(dbo, o.post.data, asm3.configuration.record_search_limit(dbo))
-        add = None
-        if len(results) > 0: 
-            add = asm3.additional.get_additional_fields_ids(dbo, results, "foundanimal")
-        asm3.al.debug("found %d results for %s" % (len(results), self.query()), "code.foundanimal_find_results", dbo)
-        return {
-            "additional": add,
-            "rows": results,
-            "name": "foundanimal_find_results"
-        }
-
-class foundanimal_log(JSONEndpoint):
-    url = "foundanimal_log"
-    js_module = "log"
-    get_permissions = asm3.users.VIEW_LOG
-
-    def controller(self, o):
-        dbo = o.dbo
-        logfilter = o.post.integer("filter")
-        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)
-        a = asm3.lostfound.get_foundanimal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        logs = asm3.log.get_logs(dbo, asm3.log.FOUNDANIMAL, o.post.integer("id"), logfilter)
-        return {
-            "name": "foundanimal_log",
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.log.FOUNDANIMAL,
-            "filter": logfilter,
-            "rows": logs,
-            "animal": a,
-            "tabcounts": asm3.lostfound.get_foundanimal_satellite_counts(dbo, a["LFID"])[0],
-            "logtypes": asm3.lookups.get_log_types(dbo)
-        }
-
-class foundanimal_media(JSONEndpoint):
-    url = "foundanimal_media"
-    js_module = "media"
-    get_permissions = asm3.users.VIEW_MEDIA
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.lostfound.get_foundanimal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        m = asm3.media.get_media(dbo, asm3.media.FOUNDANIMAL, o.post.integer("id"))
-        asm3.al.debug("got %d media for found animal %s %s %s" % (len(m), a["AGEGROUP"], a["SPECIESNAME"], a["OWNERNAME"]), "code.foundanimal_media", dbo)
-        return {
-            "media": m,
-            "animal": a,
-            "tabcounts": asm3.lostfound.get_foundanimal_satellite_counts(dbo, a["LFID"])[0],
-            "showpreferred": True,
-            "canwatermark": False,
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.media.FOUNDANIMAL,
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "name": self.url,
-            "resizeimagespec": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, ""),
-            "templates": asm3.template.get_document_templates(dbo, "email"),
-            "sigtype": ELECTRONIC_SIGNATURES
-        }
-
-class foundanimal_new(JSONEndpoint):
-    url = "foundanimal_new"
-    js_module = "lostfound_new"
-    get_permissions = asm3.users.ADD_FOUND_ANIMAL
-    post_permissions = asm3.users.ADD_FOUND_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        return {
-            "agegroups": asm3.configuration.age_groups(dbo),
-            "additional": asm3.additional.get_additional_fields(dbo, 0, "foundanimal"),
-            "colours": asm3.lookups.get_basecolours(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "breeds": asm3.lookups.get_breeds_by_species(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "name": "foundanimal_new"
-        }
-
-    def post_all(self, o):
-        return str(asm3.lostfound.insert_foundanimal_from_form(o.dbo, o.post, o.user))
-
-class giftaid_hmrc_spreadsheet(JSONEndpoint):
-    url = "giftaid_hmrc_spreadsheet"
-    get_permissions = asm3.users.VIEW_DONATION
-
-    def controller(self, o):
-        return {}
-
-    def post_all(self, o):
-        fromdate = o.post["fromdate"]
-        todate = o.post["todate"]
-        asm3.al.debug("generating HMRC giftaid spreadsheet for %s -> %s" % (fromdate, todate), "code.giftaid_hmrc_spreadsheet", o.dbo)
-        self.content_type("application/vnd.oasis.opendocument.spreadsheet")
-        self.cache_control(0)
-        self.header("Content-Disposition", "attachment; filename=\"giftaid.ods\"")
-        return asm3.financial.giftaid_spreadsheet(o.dbo, PATH, o.post.date("fromdate"), o.post.date("todate"))
-
-class htmltemplates(JSONEndpoint):
-    url = "htmltemplates"
-    get_permissions = asm3.users.PUBLISH_OPTIONS
-    post_permissions = asm3.users.PUBLISH_OPTIONS
-
-    def controller(self, o):
-        templates = asm3.template.get_html_templates(o.dbo)
-        asm3.al.debug("editing %d html templates" % len(templates), "code.htmltemplates", o.dbo)
-        return {
-            "rows": templates
-        }
-
-    def post_create(self, o):
-        if o.post["templatename"] in ( "onlineform", "report" ):
-            raise asm3.utils.ASMValidationError("Illegal name '%s'" % o.post["templatename"])
-        asm3.template.update_html_template(o.dbo, o.user, o.post["templatename"], o.post["header"], o.post["body"], o.post["footer"])
-
-    def post_update(self, o):
-        if o.post["templatename"] in ( "onlineform", "report" ):
-            raise asm3.utils.ASMValidationError("Illegal name '%s'" % o.post["templatename"])
-        asm3.template.update_html_template(o.dbo, o.user, o.post["templatename"], o.post["header"], o.post["body"], o.post["footer"])
-
-    def post_delete(self, o):
-        for name in o.post["names"].split(","):
-            if name != "": asm3.template.delete_html_template(o.dbo, o.user, name)
-
-class htmltemplates_preview(ASMEndpoint):
-    url = "htmltemplates_preview"
-
-    def content(self, o):
-        template = o.post["template"].replace(",", "")
-        rows = asm3.animal.get_animals_ids(o.dbo, "DateBroughtIn", "SELECT ID FROM animal WHERE ID IN (%s)" % o.post["animals"], limit=10)
-        asm3.additional.append_to_results(o.dbo, rows, "animal")
-        self.content_type("text/html")
-        self.cache_control(0)
-        return asm3.publishers.html.animals_to_page(o.dbo, rows, template)
-
-class incident(JSONEndpoint):
-    url = "incident"
-    get_permissions = asm3.users.VIEW_INCIDENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animalcontrol.get_animalcontrol(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        asm3.animalcontrol.check_view_permission(dbo, o.user, o.session, o.post.integer("id"))
-        if o.siteid != 0 and a.SITEID != 0 and o.siteid != a.SITEID:
-            raise asm3.utils.ASMPermissionError("incident not in user site")
-        if (a.DISPATCHLATLONG is None or a.DISPATCHLATLONG == "") and a.DISPATCHADDRESS != "":
-            a.DISPATCHLATLONG = asm3.animalcontrol.update_dispatch_geocode(dbo, a.ID, \
-                a.DISPATCHLATLONG, a.DISPATCHADDRESS, a.DISPATCHTOWN, a.DISPATCHCOUNTY, a.DISPATCHPOSTCODE)
-        recname = "%s %s %s" % (a.ACID, a.INCIDENTNAME, python2display(o.locale, a.INCIDENTDATETIME))
-        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, "animalcontrol", a["ID"], recname)
-        asm3.al.debug("open incident %s" % recname, "code.incident", dbo)
-        return {
-            "agegroups": asm3.configuration.age_groups(dbo),
-            "additional": asm3.additional.get_additional_fields(dbo, a["ACID"], "incident"),
-            "audit": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, "animalcontrol", a["ACID"]) or [],
-            "incident": a,
-            "jurisdictions": asm3.lookups.get_jurisdictions(dbo),
-            "animallinks": asm3.animalcontrol.get_animalcontrol_animals(dbo, o.post.integer("id")),
-            "incidenttypes": asm3.lookups.get_incident_types(dbo),
-            "completedtypes": asm3.lookups.get_incident_completed_types(dbo),
-            "pickuplocations": asm3.lookups.get_pickup_locations(dbo),
-            "roles": asm3.users.get_roles(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "sites": asm3.lookups.get_sites(dbo),
-            "tabcounts": asm3.animalcontrol.get_animalcontrol_satellite_counts(dbo, a["ACID"])[0],
-            "templates": asm3.template.get_document_templates(dbo, "incident"),
-            "users": asm3.users.get_users(dbo)
-        }
-
-    def post_save(self, o):
-        self.check(asm3.users.CHANGE_INCIDENT)
-        asm3.animalcontrol.update_animalcontrol_from_form(o.dbo, o.post, o.user)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_INCIDENT)
-        asm3.animalcontrol.delete_animalcontrol(o.dbo, o.user, o.post.integer("id"))
-
-    def post_latlong(self, o):
-        self.check(asm3.users.CHANGE_INCIDENT)
-        asm3.animalcontrol.update_dispatch_latlong(o.dbo, o.post.integer("incidentid"), o.post["latlong"])
-
-    def post_email(self, o):
-        self.check(asm3.users.EMAIL_PERSON)
-        asm3.person.send_email_from_form(o.dbo, o.user, o.post)
-
-    def post_linkanimaladd(self, o):
-        self.check(asm3.users.CHANGE_INCIDENT)
-        asm3.animalcontrol.update_animalcontrol_addlink(o.dbo, o.user, o.post.integer("id"), o.post.integer("animalid"))
-
-    def post_linkanimaldelete(self, o):
-        self.check(asm3.users.CHANGE_INCIDENT)
-        asm3.animalcontrol.update_animalcontrol_removelink(o.dbo, o.user, o.post.integer("id"), o.post.integer("animalid"))
-
-class incident_citations(JSONEndpoint):
-    url = "incident_citations"
-    js_module = "citations"
-    get_permissions = asm3.users.VIEW_CITATION
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animalcontrol.get_animalcontrol(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        citations = asm3.financial.get_incident_citations(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d citations" % len(citations), "code.incident_citations", dbo)
-        return {
-            "name": "incident_citations",
-            "rows": citations,
-            "incident": a,
-            "tabcounts": asm3.animalcontrol.get_animalcontrol_satellite_counts(dbo, a["ACID"])[0],
-            "citationtypes": asm3.lookups.get_citation_types(dbo)
-        }
-
-class incident_find(JSONEndpoint):
-    url = "incident_find"
-    get_permissions = asm3.users.VIEW_INCIDENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        return {
-            "agegroups": asm3.configuration.age_groups(dbo),
-            "incidenttypes": asm3.lookups.get_incident_types(dbo),
-            "completedtypes": asm3.lookups.get_incident_completed_types(dbo),
-            "citationtypes": asm3.lookups.get_citation_types(dbo),
-            "jurisdictions": asm3.lookups.get_jurisdictions(dbo),
-            "pickuplocations": asm3.lookups.get_pickup_locations(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "users": asm3.users.get_users(dbo)
-        }
-
-class incident_find_results(JSONEndpoint):
-    url = "incident_find_results"
-    get_permissions = asm3.users.VIEW_INCIDENT
-
-    def controller(self, o):
-        results = asm3.animalcontrol.get_animalcontrol_find_advanced(o.dbo, o.post.data, o.user, asm3.configuration.record_search_limit(o.dbo))
-        add = None
-        if len(results) > 0: 
-            add = asm3.additional.get_additional_fields_ids(o.dbo, results, "incident")
-        asm3.al.debug("found %d results for %s" % (len(results), self.query()), "code.incident_find_results", o.dbo)
-        return {
-            "additional": add,
-            "rows": results
-        }
-
-class incident_diary(JSONEndpoint):
-    url = "incident_diary"
-    js_module = "diary"
-    get_permissions = asm3.users.VIEW_DIARY
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animalcontrol.get_animalcontrol(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        diaries = asm3.diary.get_diaries(dbo, asm3.diary.ANIMALCONTROL, o.post.integer("id"))
-        asm3.al.debug("got %d diaries" % len(diaries), "code.incident_diary", dbo)
-        return {
-            "rows": diaries,
-            "incident": a,
-            "tabcounts": asm3.animalcontrol.get_animalcontrol_satellite_counts(dbo, a["ACID"])[0],
-            "name": "incident_diary",
-            "linkid": a["ACID"],
-            "linktypeid": asm3.diary.ANIMALCONTROL,
-            "forlist": asm3.users.get_users_and_roles(dbo)
-        }
-
-class incident_log(JSONEndpoint):
-    url = "incident_log"
-    js_module = "log"
-    get_permissions = asm3.users.VIEW_LOG
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animalcontrol.get_animalcontrol(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        logfilter = o.post.integer("filter")
-        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)
-        logs = asm3.log.get_logs(dbo, asm3.log.ANIMALCONTROL, o.post.integer("id"), logfilter)
-        asm3.al.debug("got %d logs" % len(logs), "code.incident_log", dbo)
-        return {
-            "name": "incident_log",
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.log.ANIMALCONTROL,
-            "filter": logfilter,
-            "rows": logs,
-            "incident": a,
-            "tabcounts": asm3.animalcontrol.get_animalcontrol_satellite_counts(dbo, a["ACID"])[0],
-            "logtypes": asm3.lookups.get_log_types(dbo)
-        }
-
-class incident_map(JSONEndpoint):
-    url = "incident_map"
-    get_permissions = asm3.users.VIEW_INCIDENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        rows = asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { "filter": "incomplete" }, o.user)
-        asm3.al.debug("incident map, %d active" % (len(rows)), "code.incident_map", dbo)
-        return {
-            "rows": rows
-        }
-
-class incident_media(JSONEndpoint):
-    url = "incident_media"
-    js_module = "media"
-    get_permissions = asm3.users.VIEW_MEDIA
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.animalcontrol.get_animalcontrol(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        m = asm3.media.get_media(dbo, asm3.media.ANIMALCONTROL, o.post.integer("id"))
-        asm3.al.debug("got %d media" % len(m), "code.incident_media", dbo)
-        return {
-            "media": m,
-            "incident": a,
-            "tabcounts": asm3.animalcontrol.get_animalcontrol_satellite_counts(dbo, a["ACID"])[0],
-            "showpreferred": True,
-            "canwatermark": False,
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.media.ANIMALCONTROL,
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "name": self.url,
-            "resizeimagespec": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, ""),
-            "templates": asm3.template.get_document_templates(dbo, "email"),
-            "sigtype": ELECTRONIC_SIGNATURES
-        }
-
-class incident_new(JSONEndpoint):
-    url = "incident_new"
-    get_permissions = asm3.users.ADD_INCIDENT
-    post_permissions = asm3.users.ADD_INCIDENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        asm3.al.debug("add incident", "code.incident_new", dbo)
-        return {
-            "incidenttypes": asm3.lookups.get_incident_types(dbo),
-            "jurisdictions": asm3.lookups.get_jurisdictions(dbo),
-            "additional": asm3.additional.get_additional_fields(dbo, 0, "incident"),
-            "pickuplocations": asm3.lookups.get_pickup_locations(dbo),
-            "towns": asm3.person.get_towns(dbo),
-            "counties": asm3.person.get_counties(dbo),
-            "towncounties": asm3.person.get_town_to_county(dbo),
-            "roles": asm3.users.get_roles(dbo),
-            "sites": asm3.lookups.get_sites(dbo),
-            "users": asm3.users.get_users(dbo)
-        }
-
-    def post_all(self, o):
-        incidentid = asm3.animalcontrol.insert_animalcontrol_from_form(o.dbo, o.post, o.user)
-        return str(incidentid)
-
-class licence(JSONEndpoint):
-    url = "licence"
-    get_permissions = asm3.users.VIEW_LICENCE
-
-    def controller(self, o):
-        dbo = o.dbo
-        offset = o.post["offset"]
-        if offset == "": offset = "i31"
-        licences = asm3.financial.get_licences(dbo, offset)
-        asm3.al.debug("got %d licences" % len(licences), "code.licence", dbo)
-        return {
-            "name": "licence",
-            "rows": licences,
-            "templates": asm3.template.get_document_templates(dbo, "licence"),
-            "licencetypes": asm3.lookups.get_licence_types(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_LICENCE)
-        return asm3.financial.insert_licence_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_LICENCE)
-        asm3.financial.update_licence_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_LICENCE)
-        for lid in o.post.integer_list("ids"):
-            asm3.financial.delete_licence(o.dbo, o.user, lid)
-
-class licence_renewal(JSONEndpoint):
-    url = "licence_renewal"
-    get_permissions = asm3.users.ADD_LICENCE
-    post_permissions = asm3.users.ADD_LICENCE
-
-    def controller(self, o):
-        dbo = o.dbo
-        asm3.al.debug("renewing licence", "code.licence_renewal", dbo)
-        return {
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "licencetypes": asm3.lookups.get_licence_types(dbo),
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "accounts": asm3.financial.get_accounts(dbo, onlybank=True)
-        }
-
-    def post_all(self, o):
-        asm3.financial.insert_donations_from_form(o.dbo, o.user, o.post, o.post["issuedate"], False, o.post["person"], o.post["animal"]) 
-        return asm3.financial.insert_licence_from_form(o.dbo, o.user, o.post)
-
-class litters(JSONEndpoint):
-    url = "litters"
-    get_permissions = asm3.users.VIEW_LITTER
-
-    def controller(self, o):
-        dbo = o.dbo
-        offset = o.post["offset"]
-        if offset == "": offset = "m365"
-        litters = asm3.animal.get_litters(dbo, offset)
-        asm3.al.debug("got %d litters" % len(litters), "code.litters", dbo)
-        return {
-            "rows": litters,
-            "species": asm3.lookups.get_species(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_LITTER)
-        return asm3.animal.insert_litter_from_form(o.dbo, o.user, o.post)
-
-    def post_nextlitterid(self, o):
-        nextid = o.dbo.query_int("SELECT MAX(ID) FROM animallitter") + 1
-        return asm3.utils.padleft(nextid, 6)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_LITTER)
-        asm3.animal.update_litter_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_LITTER) 
-        for lid in o.post.integer_list("ids"):
-            asm3.animal.delete_litter(o.dbo, o.user, lid)
-
-class log(ASMEndpoint):
-    url = "log"
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_LOG)
-        return asm3.log.insert_log_from_form(o.dbo, o.user, o.post.integer("linktypeid"), o.post.integer("linkid"), o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_LOG)
-        asm3.log.update_log_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_LOG)
-        for lid in o.post.integer_list("ids"):
-            asm3.log.delete_log(o.dbo, o.user, lid)
-
-class log_new(JSONEndpoint):
-    url = "log_new"
-    get_permissions = asm3.users.ADD_LOG
-    post_permissions = asm3.users.ADD_LOG
-
-    def controller(self, o):
-        dbo = o.dbo
-        mode = o.post["mode"]
-        if mode == "": mode = "animal"
-        return {
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "mode": mode
-        }
-
-    def post_animal(self, o):
-        asm3.log.insert_log_from_form(o.dbo, o.user, asm3.log.ANIMAL, o.post.integer("animal"), o.post)
-
-    def post_person(self, o):
-        asm3.log.insert_log_from_form(o.dbo, o.user, asm3.log.PERSON, o.post.integer("person"), o.post)
-
-class lookups(JSONEndpoint):
-    url = "lookups"
-    get_permissions = asm3.users.MODIFY_LOOKUPS
-    post_permissions = asm3.users.MODIFY_LOOKUPS
-
-    def controller(self, o):
-        dbo = o.dbo
-        l = o.locale
-        tablename = o.post["tablename"]
-        if tablename == "": tablename = "animaltype"
-        table = list(asm3.lookups.LOOKUP_TABLES[tablename])
-        table[0] = translate(table[0], l)
-        table[2] = translate(table[2], l)
-        modifiers = table[4].split(" ")
-        rows = asm3.lookups.get_lookup(dbo, tablename, table[1])
-        asm3.al.debug("edit lookups for %s, got %d rows" % (tablename, len(rows)), "code.lookups", dbo)
-        return {
-            "rows": rows,
-            "adoptapetcolours": asm3.lookups.ADOPTAPET_COLOURS,
-            "petfinderspecies": asm3.lookups.PETFINDER_SPECIES,
-            "petfinderbreeds": asm3.lookups.PETFINDER_BREEDS,
-            "sites": asm3.lookups.get_sites(dbo),
-            "tablename": tablename,
-            "tablelabel": table[0],
-            "namefield": table[1].upper(),
-            "namelabel": table[2],
-            "descfield": table[3].upper(),
-            "hasspecies": "species" in modifiers,
-            "haspfspecies": "pubspec" in modifiers,
-            "haspfbreed": "pubbreed" in modifiers,
-            "hasapcolour": "pubcol" in modifiers,
-            "hasrescheduledays": "sched" in modifiers,
-            "hasaccountid": "acc" in modifiers,
-            "hasdefaultcost": "cost" in modifiers,
-            "hasunits": "units" in modifiers,
-            "hassite": "site" in modifiers,
-            "hasvat": "vat" in modifiers, 
-            "canadd": "add" in modifiers,
-            "candelete": "del" in modifiers,
-            "canretire": "ret" in modifiers,
-            "accounts": asm3.financial.get_accounts(dbo, onlyactive=True),
-            "species": asm3.lookups.get_species(dbo),
-            "tables": asm3.html.json_lookup_tables(l)
-        }
-
-    def post_create(self, o):
-        post = o.post
-        return asm3.lookups.insert_lookup(o.dbo, o.user, post["lookup"], post["lookupname"], post["lookupdesc"], \
-            post.integer("species"), post["pfbreed"], post["pfspecies"], post["apcolour"], post["units"], post.integer("site"), post.integer("rescheduledays"), post.integer("account"), post.integer("defaultcost"), post.integer("vat"), post.integer("retired"))
-
-    def post_update(self, o):
-        post = o.post
-        asm3.lookups.update_lookup(o.dbo, o.user, post.integer("id"), post["lookup"], post["lookupname"], post["lookupdesc"], \
-            post.integer("species"), post["pfbreed"], post["pfspecies"], post["apcolour"], post["units"], post.integer("site"), post.integer("rescheduledays"), post.integer("account"), post.integer("defaultcost"), post.integer("vat"), post.integer("retired"))
-
-    def post_delete(self, o):
-        for lid in o.post.integer_list("ids"):
-            asm3.lookups.delete_lookup(o.dbo, o.user, o.post["lookup"], lid)
-
-    def post_active(self, o):
-        for lid in o.post.integer_list("ids"):
-            asm3.lookups.update_lookup_retired(o.dbo, o.user, o.post["lookup"], lid, 0)
-
-    def post_inactive(self, o):
-        for lid in o.post.integer_list("ids"):
-            asm3.lookups.update_lookup_retired(o.dbo, o.user, o.post["lookup"], lid, 1)
-
-class lostanimal(JSONEndpoint):
-    url = "lostanimal"
-    js_module = "lostfound"
-    get_permissions = asm3.users.VIEW_LOST_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.lostfound.get_lostanimal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        recname = "%s %s %s" % (a.AGEGROUP, a.SPECIESNAME, a.OWNERNAME)
-        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, "animallost", a["ID"], recname)
-        asm3.al.debug("open lost animal %s" % recname, "code.foundanimal", dbo)
-        return {
-            "animal": a,
-            "name": "lostanimal",
-            "additional": asm3.additional.get_additional_fields(dbo, a["ID"], "lostanimal"),
-            "agegroups": asm3.configuration.age_groups(dbo),
-            "audit": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, "animallost", a["ID"]) or [],
-            "breeds": asm3.lookups.get_breeds_by_species(dbo),
-            "colours": asm3.lookups.get_basecolours(dbo),
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "lostanimal"),
-            "templatesemail": asm3.template.get_document_templates(dbo, "email"),
-            "tabcounts": asm3.lostfound.get_lostanimal_satellite_counts(dbo, a["LFID"])[0]
-        }
-
-    def post_save(self, o):
-        self.check(asm3.users.CHANGE_LOST_ANIMAL)
-        asm3.lostfound.update_lostanimal_from_form(o.dbo, o.post, o.user)
-
-    def post_email(self, o):
-        self.check(asm3.users.EMAIL_PERSON)
-        asm3.lostfound.send_email_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_LOST_ANIMAL)
-        asm3.lostfound.delete_lostanimal(o.dbo, o.user, o.post.integer("id"))
-
-class lostanimal_diary(JSONEndpoint):
-    url = "lostanimal_diary"
-    js_module = "diary"
-    get_permissions = asm3.users.VIEW_DIARY
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.lostfound.get_lostanimal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        diaries = asm3.diary.get_diaries(dbo, asm3.diary.LOSTANIMAL, o.post.integer("id"))
-        asm3.al.debug("got %d diaries for lost animal %s %s %s" % (len(diaries), a["AGEGROUP"], a["SPECIESNAME"], a["OWNERNAME"]), "code.foundanimal_diary", dbo)
-        return {
-            "rows": diaries,
-            "animal": a,
-            "tabcounts": asm3.lostfound.get_lostanimal_satellite_counts(dbo, a["LFID"])[0],
-            "name": "lostanimal_diary",
-            "linkid": a["LFID"],
-            "linktypeid": asm3.diary.LOSTANIMAL,
-            "forlist": asm3.users.get_users_and_roles(dbo)
-        }
-
-class lostanimal_find(JSONEndpoint):
-    url = "lostanimal_find"
-    js_module = "lostfound_find"
-    get_permissions = asm3.users.VIEW_LOST_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        return {
-            "agegroups": asm3.configuration.age_groups(dbo),
-            "name": "lostanimal_find",
-            "colours": asm3.lookups.get_basecolours(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "breeds": asm3.lookups.get_breeds_by_species(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "mode": "lost"
-        }
-
-class lostanimal_find_results(JSONEndpoint):
-    url = "lostanimal_find_results"
-    js_module = "lostfound_find_results"
-    get_permissions = asm3.users.VIEW_LOST_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        results = asm3.lostfound.get_lostanimal_find_advanced(dbo, o.post.data, asm3.configuration.record_search_limit(dbo))
-        add = None
-        if len(results) > 0: 
-            add = asm3.additional.get_additional_fields_ids(dbo, results, "lostanimal")
-        asm3.al.debug("found %d results for %s" % (len(results), self.query()), "code.lostanimal_find_results", dbo)
-        return {
-            "additional": add,
-            "rows": results,
-            "name": "lostanimal_find_results"
-        }
-
-class lostanimal_log(JSONEndpoint):
-    url = "lostanimal_log"
-    js_module = "log"
-    get_permissions = asm3.users.VIEW_LOG
-
-    def controller(self, o):
-        dbo = o.dbo
-        logfilter = o.post.integer("filter")
-        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)
-        a = asm3.lostfound.get_lostanimal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        logs = asm3.log.get_logs(dbo, asm3.log.LOSTANIMAL, o.post.integer("id"), logfilter)
-        return {
-            "name": "lostanimal_log",
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.log.LOSTANIMAL,
-            "filter": logfilter,
-            "rows": logs,
-            "animal": a,
-            "tabcounts": asm3.lostfound.get_lostanimal_satellite_counts(dbo, a["LFID"])[0],
-            "logtypes": asm3.lookups.get_log_types(dbo)
-        }
-
-class lostanimal_media(JSONEndpoint):
-    url = "lostanimal_media"
-    js_module = "media"
-    get_permissions = asm3.users.VIEW_MEDIA
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.lostfound.get_lostanimal(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        m = asm3.media.get_media(dbo, asm3.media.LOSTANIMAL, o.post.integer("id"))
-        asm3.al.debug("got %d media for lost animal %s %s %s" % (len(m), a["AGEGROUP"], a["SPECIESNAME"], a["OWNERNAME"]), "code.foundanimal_media", dbo)
-        return {
-            "media": m,
-            "animal": a,
-            "tabcounts": asm3.lostfound.get_lostanimal_satellite_counts(dbo, a["LFID"])[0],
-            "showpreferred": True,
-            "canwatermark": False,
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.media.LOSTANIMAL,
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "name": self.url, 
-            "resizeimagespec": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, ""),
-            "templates": asm3.template.get_document_templates(dbo, "email"),
-            "sigtype": ELECTRONIC_SIGNATURES
-        }
-
-class lostanimal_new(JSONEndpoint):
-    url = "lostanimal_new"
-    js_module = "lostfound_new"
-    get_permissions = asm3.users.ADD_LOST_ANIMAL
-    post_permissions = asm3.users.ADD_LOST_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        return {
-            "agegroups": asm3.configuration.age_groups(dbo),
-            "additional": asm3.additional.get_additional_fields(dbo, 0, "lostanimal"),
-            "colours": asm3.lookups.get_basecolours(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "breeds": asm3.lookups.get_breeds_by_species(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "name": "lostanimal_new"
-        }
-
-    def post_all(self, o):
-        return str(asm3.lostfound.insert_lostanimal_from_form(o.dbo, o.post, o.user))
-
-class lostfound_match(ASMEndpoint):
-    url = "lostfound_match"
-    get_permissions = ( asm3.users.VIEW_LOST_ANIMAL, asm3.users.VIEW_FOUND_ANIMAL, asm3.users.VIEW_PERSON )
-
-    def content(self, o):
-        dbo = o.dbo
-        post = o.post
-        lostanimalid = post.integer("lostanimalid")
-        foundanimalid = post.integer("foundanimalid")
-        animalid = post.integer("animalid")
-        self.content_type("text/html")
-        self.cache_control(0)
-        # If no parameters have been given, use the cached daily copy of the match report
-        if lostanimalid == 0 and foundanimalid == 0 and animalid == 0:
-            asm3.al.debug("no parameters given, using cached report", "code.lostfound_match", dbo)
-            return asm3.cachedisk.get("lostfound_report", dbo.database)
-        else:
-            asm3.al.debug("match lost=%d, found=%d, animal=%d" % (lostanimalid, foundanimalid, animalid), "code.lostfound_match", dbo)
-            return asm3.lostfound.match_report(dbo, o.user, lostanimalid, foundanimalid, animalid)
-
-class mailmerge(JSONEndpoint):
-    url = "mailmerge"
-    get_permissions = asm3.users.MAIL_MERGE
-    post_permissions = asm3.users.MAIL_MERGE
-
-    def controller(self, o):
-        l = o.locale
-        dbo = o.dbo
-        post = o.post
-        crid = post.integer("id")
-        crit = asm3.reports.get_criteria(dbo, crid)
-        title = asm3.reports.get_title(dbo, crid)
-        # If this mail merge takes criteria and none were supplied, go to the criteria screen to get them
-        if len(crit) != 0 and post["hascriteria"] == "": self.redirect("report_criteria?id=%s&target=mailmerge" % crid)
-        asm3.al.debug("entering mail merge selection mode for %d" % post.integer("id"), "code.mailmerge", dbo)
-        p = asm3.reports.get_criteria_params(dbo, crid, post)
-        rows, cols = asm3.reports.execute_query(dbo, crid, o.user, p)
-        if rows is None: rows = []
-        asm3.al.debug("got merge rows (%d items)" % len(rows), "code.mailmerge", dbo)
-        # construct a list of field tokens for the email helper
-        fields = []
-        if len(rows) > 0:
-            for fname in sorted(rows[0].keys()):
-                fields.append(fname)
-        # send the selection form
-        title = _("Mail Merge - {0}", l).format(title)
-        return {
-            "title": title,
-            "fields": fields,
-            "mergeparams": asm3.utils.json(p),
-            "mergereport": crid,
-            "mergetitle": title.replace(" ", "_").replace("\"", "").replace("'", "").lower(),
-            "numrows": len(rows),
-            "hasemail": "EMAILADDRESS" in fields,
-            "hasaddress": "OWNERNAME" in fields and "OWNERADDRESS" in fields and "OWNERTOWN" in fields and "OWNERCOUNTY" in fields and "OWNERPOSTCODE" in fields,
-            "templates": asm3.template.get_document_templates(dbo, "mailmerge")
-        }
-   
-    def post_email(self, o):
-        dbo = o.dbo
-        post = o.post
-        mergeparams = ""
-        if post["mergeparams"] != "": mergeparams = asm3.utils.json_parse(post["mergeparams"])
-        rows, cols = asm3.reports.execute_query(dbo, post.integer("mergereport"), o.user, mergeparams)
-        fromadd = post["from"]
-        subject = post["subject"]
-        body = post["body"]
-        if asm3.configuration.audit_on_send_email(dbo):
-            addresses = [r["EMAILADDRESS"] for r in rows]
-            asm3.audit.email(dbo, o.user, fromadd, addresses, "", "", subject, body)
-        asm3.utils.send_bulk_email(dbo, fromadd, subject, body, rows, "html")
-
-    def post_document(self, o):
-        dbo = o.dbo
-        post = o.post
-        mergeparams = ""
-        if post["mergeparams"] != "": mergeparams = asm3.utils.json_parse(post["mergeparams"])
-        rows, cols = asm3.reports.execute_query(dbo, post.integer("mergereport"), o.user, mergeparams)
-        templateid = post.integer("templateid")
-        templatecontent = asm3.template.get_document_template_content(dbo, templateid)
-        templatename = asm3.template.get_document_template_name(dbo, templateid)
-        if not templatename.endswith(".html"):
-            raise asm3.utils.ASMValidationError("Only html templates are allowed")
-        # Generate a document from the template for each row
-        org_tags = asm3.wordprocessor.org_tags(dbo, o.user)
-        c = []
-        for d in rows:
-            c.append( asm3.wordprocessor.substitute_tags(asm3.utils.bytes2str(templatecontent), asm3.wordprocessor.append_tags(d, org_tags)) )
-        content = '<div class="mce-pagebreak" style="page-break-before: always; clear: both; border: 0">&nbsp;</div>'.join(c)
-        self.content_type("text/html")
-        self.cache_control(0)
-        return asm3.html.tinymce_header(templatename, "document_edit.js", jswindowprint=True, pdfenabled=False, readonly=True) + \
-            asm3.html.tinymce_main(o.locale, "", recid=0, linktype="", \
-                dtid="", content=asm3.utils.escape_tinymce(content))
-
-    def post_labels(self, o):
-        dbo = o.dbo
-        post = o.post
-        mergeparams = ""
-        if post["mergeparams"] != "": mergeparams = asm3.utils.json_parse(post["mergeparams"])
-        rows, cols = asm3.reports.execute_query(dbo, post.integer("mergereport"), o.user, mergeparams)
-        self.content_type("application/pdf")
-        disposition = asm3.configuration.pdf_inline(dbo) and "inline; filename=%s" or "attachment; filename=%s"
-        self.header("Content-Disposition", disposition % post["mergetitle"] + ".pdf")
-        return asm3.utils.generate_label_pdf(dbo, o.locale, rows, post["papersize"], post["units"], post["fontpt"], 
-            post.floating("hpitch"), post.floating("vpitch"), 
-            post.floating("width"), post.floating("height"), 
-            post.floating("lmargin"), post.floating("tmargin"),
-            post.integer("cols"), post.integer("rows"))
-
-    def post_csv(self, o):
-        dbo = o.dbo
-        post = o.post
-        mergeparams = ""
-        if post["mergeparams"] != "": mergeparams = asm3.utils.json_parse(post["mergeparams"])
-        rows, cols = asm3.reports.execute_query(dbo, post.integer("mergereport"), o.user, mergeparams)
-        self.content_type("text/csv")
-        self.header("Content-Disposition", "attachment; filename=" + post["mergetitle"] + ".csv")
-        includeheader = 1 == post.boolean("includeheader")
-        return asm3.utils.csv(o.locale, rows, cols, includeheader)
-
-    def post_preview(self, o):
-        dbo = o.dbo
-        post = o.post
-        mergeparams = ""
-        if post["mergeparams"] != "": mergeparams = asm3.utils.json_parse(post["mergeparams"])
-        rows, cols = asm3.reports.execute_query(dbo, post.integer("mergereport"), o.user, mergeparams)
-        asm3.al.debug("returning preview rows for %d [%s]" % (post.integer("mergereport"), post["mergetitle"]), "code.mailmerge", dbo)
-        return asm3.utils.json(rows)
-
-    def post_recipients(self, o):
-        dbo = o.dbo
-        post = o.post
-        mergeparams = ""
-        if post["mergeparams"] != "": mergeparams = asm3.utils.json_parse(post["mergeparams"])
-        rows, cols = asm3.reports.execute_query(dbo, post.integer("mergereport"), o.user, mergeparams)
-        emails = [ x.EMAILADDRESS for x in rows if x and x.EMAILADDRESS is not None and x.EMAILADDRESS != "" ]
-        return ", ".join(emails)
-
-class maint_db_stats(ASMEndpoint):
-    url = "maint_db_stats"
-
-    def content(self, o):
-        self.content_type("text/plain")
-        self.cache_control(0)
-        s = o.dbo.stats()
-        return "first record added on %s\n" \
-            "%s shelter animals\n" \
-            "%s animals\n" \
-            "%s people\n" \
-            "%s movements\n" \
-            "%s media (%s MB)\n" \
-            "%s jpg (%s MB)\n" \
-            "%s pdf (%s MB)\n" % (
-                s.firstrecord,
-                s.shelteranimals,
-                s.totalanimals,
-                s.totalpeople,
-                s.totalmovements,
-                s.totalmedia, s.mediasize,
-                s.totaljpg, s.jpgsize,
-                s.totalpdf, s.pdfsize
-            )
-
-class maint_deps(ASMEndpoint):
-    url = "maint_deps"
-
-    def content(self, o):
-        self.content_type("text/plain")
-        self.cache_control(0)
-        return "web.py %s" % web.__version__
-
-class maint_error(ASMEndpoint):
-    url = "maint_error"
-
-    def content(self, o):
-        return 1 / 0 # Test error handling
-
-class maint_latency(JSONEndpoint):
-    url = "maint_latency"
-
-    def controller(self, o):
-        return {}
-
-    def post_all(self, o):
-        self.content_type("text/plain")
-        self.cache_control(0)
-        return "pong"
-
-class maint_petfinder(ASMEndpoint):
-    url = "maint_petfinder"
-
-    def content(self, o):
-        """ Clears all PetFinder listings """
-        self.content_type("text/plain")
-        self.cache_control(0)
-        try:
-            pc = asm3.publishers.base.PublishCriteria(asm3.configuration.publisher_presets(o.dbo))
-            p = asm3.publishers.petfinder.PetFinderPublisher(o.dbo, pc)
-            return p.clearListings()
-        except Exception as err:
-            return str(err)
-
-class maint_time(ASMEndpoint):
-    url = "maint_time"
-
-    def content(self, o):
-        self.content_type("text/plain")
-        self.cache_control(0)
-        return "Time now is %s. TZ=%s DST=%s (%s)" % \
-            ( o.dbo.now(), o.dbo.timezone, o.dbo.timezone_dst == 1 and "ON" or "OFF", get_dst(o.locale) )
-
-class maint_undelete(JSONEndpoint):
-    url = "maint_undelete"
-    get_permissions = asm3.users.USE_SQL_INTERFACE
-
-    def controller(self, o):
-        d = asm3.audit.get_deletions(o.dbo)
-        asm3.al.debug("got %d deleted top level records" % len(d), "code.undelete", o.dbo)
-        return { "rows": d }
-
-    def post_undelete(self, o):
-        self.check(asm3.users.USE_SQL_INTERFACE)
-        for i in o.post["ids"].split(","):
-            if i == "": continue
-            tablename, iid = i.split(":")
-            asm3.audit.undelete(o.dbo, asm3.utils.cint(iid), tablename)
-
-class medical(JSONEndpoint):
-    url = "medical"
-    get_permissions = asm3.users.VIEW_MEDICAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        offset = o.post["offset"]
-        if offset == "": offset = "m365"
-        med = asm3.medical.get_treatments_outstanding(dbo, offset, o.locationfilter, o.siteid, o.visibleanimalids)
-        profiles = asm3.medical.get_profiles(dbo)
-        asm3.al.debug("got %d medical treatments" % len(med), "code.medical", dbo)
-        return {
-            "profiles": profiles,
-            "rows": med,
-            "overlimit": 0,
-            "newmed": o.post.integer("newmed") == 1,
-            "name": "medical",
-            "stockitems": asm3.stock.get_stock_items(dbo),
-            "stockusagetypes": asm3.lookups.get_stock_usage_types(dbo),
-            "users": asm3.users.get_users(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_MEDICAL)
-        asm3.medical.insert_regimen_from_form(o.dbo, o.user, o.post)
-
-    def post_createbulk(self, o):
-        self.check(asm3.users.ADD_MEDICAL)
-        for animalid in o.post.integer_list("animals"):
-            o.post.data["animal"] = str(animalid)
-            asm3.medical.insert_regimen_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_MEDICAL)
-        asm3.medical.update_regimen_from_form(o.dbo, o.user, o.post)
-
-    def post_delete_regimen(self, o):
-        self.check(asm3.users.DELETE_MEDICAL)
-        for mid in o.post.integer_list("ids"):
-            asm3.medical.delete_regimen(o.dbo, o.user, mid)
-
-    def post_delete_treatment(self, o):
-        self.check(asm3.users.DELETE_MEDICAL)
-        for mid in o.post.integer_list("ids"):
-            asm3.medical.delete_treatment(o.dbo, o.user, mid)
-
-    def post_get_profile(self, o):
-        return asm3.utils.json([asm3.medical.get_profile(o.dbo, o.post.integer("profileid"))])
-
-    def post_given(self, o):
-        self.check(asm3.users.BULK_COMPLETE_MEDICAL)
-        post = o.post
-        newdate = post.date("newdate")
-        vet = post.integer("givenvet")
-        by = post["givenby"]
-        comments = post["treatmentcomments"]
-        for mid in post.integer_list("ids"):
-            asm3.medical.update_treatment_given(o.dbo, o.user, mid, newdate, by, vet, comments)
-        if post.integer("item") != -1:
-            asm3.stock.deduct_stocklevel_from_form(o.dbo, o.user, post)
-
-    def post_undo(self, o):
-        self.check(asm3.users.BULK_COMPLETE_MEDICAL)
-        for mid in o.post.integer_list("ids"):
-            asm3.medical.update_treatment_given(o.dbo, o.user, mid, None)
-
-    def post_required(self, o):
-        self.check(asm3.users.BULK_COMPLETE_MEDICAL)
-        newdate = o.post.date("newdate")
-        for mid in o.post.integer_list("ids"):
-            asm3.medical.update_treatment_required(o.dbo, o.user, mid, newdate)
-
-class medicalprofile(JSONEndpoint):
-    url = "medicalprofile"
-    get_permissions = asm3.users.VIEW_MEDICAL
-
-    def controller(self, o):
-        med = asm3.medical.get_profiles(o.dbo)
-        asm3.al.debug("got %d medical profiles" % len(med), "code.medical_profile", o.dbo)
-        return {
-            "rows": med
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_MEDICAL)
-        asm3.medical.insert_profile_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_MEDICAL)
-        asm3.medical.update_profile_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_MEDICAL)
-        for mid in o.post.integer_list("ids"):
-            asm3.medical.delete_profile(o.dbo, o.user, mid)
-
-class move_adopt(JSONEndpoint):
-    url = "move_adopt"
-    get_permissions = asm3.users.ADD_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        return {
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "accounts": asm3.financial.get_accounts(dbo, onlybank=True),
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement"),
-            "templatesemail": asm3.template.get_document_templates(dbo, "email")
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_MOVEMENT)
-        checkout = o.post.boolean("checkoutcreate")
-        movementid = str(asm3.movement.insert_adoption_from_form(o.dbo, o.user, o.post, create_payments = not checkout))
-        if checkout:
-            l = o.dbo.locale
-            body = asm3.wordprocessor.generate_movement_doc(o.dbo, o.post.integer("emailtemplateid"), asm3.utils.cint(movementid), o.user)
-            d = {
-                "id":       movementid,
-                "animalid": o.post["animal"],
-                "personid": o.post["person"],
-                "templateid": o.post["templateid"],
-                "feetypeid": o.post["feetypeid"],
-                "from":     asm3.configuration.email(o.dbo),
-                "to":       o.post["emailaddress"],
-                "subject":  _("Adoption Checkout", l),
-                "body":     body
-            }
-            asm3.movement.send_adoption_checkout(o.dbo, o.user, asm3.utils.PostedData(d, o.dbo.locale))
-        return movementid
-
-    def post_cost(self, o):
-        dbo = o.dbo
-        post = o.post
-        l = o.locale
-        self.check(asm3.users.VIEW_COST)
-        dailyboardcost = asm3.animal.get_daily_boarding_cost(dbo, post.integer("id"))
-        dailyboardcostdisplay = format_currency(l, dailyboardcost)
-        daysonshelter = asm3.animal.get_days_on_shelter(dbo, post.integer("id"))
-        totaldisplay = format_currency(l, dailyboardcost * daysonshelter)
-        return totaldisplay + "||" + \
-            _("On shelter for {0} days, daily cost {1}, cost record total <b>{2}</b>", l).format(daysonshelter, dailyboardcostdisplay, totaldisplay)
-    
-    def post_donationdefault(self, o):
-        return asm3.lookups.get_donation_default(o.dbo, o.post.integer("donationtype"))
-
-    def post_insurance(self, o):
-        return asm3.movement.generate_insurance_number(o.dbo)
-
-class move_book_foster(JSONEndpoint):
-    url = "move_book_foster"
-    js_module = "movements"
-    get_permissions = asm3.users.VIEW_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        movements = asm3.movement.get_movements(dbo, asm3.movement.FOSTER)
-        movements = asm3.animal.remove_nonvisible_animals(movements, o.visibleanimalids)
-        asm3.al.debug("got %d movements" % len(movements), "code.move_book_foster", dbo)
-        return {
-            "name": "move_book_foster",
-            "rows": movements,
-            "movementtypes": asm3.lookups.get_movement_types(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "returncategories": asm3.lookups.get_entryreasons(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement")
-        }
-
-class move_book_recent_adoption(JSONEndpoint):
-    url = "move_book_recent_adoption"
-    js_module = "movements"
-    get_permissions = asm3.users.VIEW_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        movements = asm3.movement.get_recent_adoptions(dbo)
-        asm3.al.debug("got %d movements" % len(movements), "code.move_book_recent_adoption", dbo)
-        return {
-            "name": "move_book_recent_adoption",
-            "rows": movements,
-            "logtypes": asm3.lookups.get_log_types(dbo), 
-            "movementtypes": asm3.lookups.get_movement_types(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "returncategories": asm3.lookups.get_entryreasons(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement")
-        }
-
-class move_book_recent_other(JSONEndpoint):
-    url = "move_book_recent_other"
-    js_module = "movements"
-    get_permissions = asm3.users.VIEW_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        movements = asm3.movement.get_recent_nonfosteradoption(dbo)
-        asm3.al.debug("got %d movements" % len(movements), "code.move_book_recent_other", dbo)
-        return {
-            "name": "move_book_recent_other",
-            "rows": movements,
-            "movementtypes": asm3.lookups.get_movement_types(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "returncategories": asm3.lookups.get_entryreasons(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement")
-        }
-
-class move_book_recent_transfer(JSONEndpoint):
-    url = "move_book_recent_transfer"
-    js_module = "movements"
-    get_permissions = asm3.users.VIEW_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        movements = asm3.movement.get_recent_transfers(dbo)
-        asm3.al.debug("got %d movements" % len(movements), "code.move_book_recent_transfer", dbo)
-        return {
-            "name": "move_book_recent_transfer",
-            "rows": movements,
-            "movementtypes": asm3.lookups.get_movement_types(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "returncategories": asm3.lookups.get_entryreasons(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement")
-        }
-
-class move_book_reservation(JSONEndpoint):
-    url = "move_book_reservation"
-    js_module = "movements"
-    get_permissions = asm3.users.VIEW_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        movements = asm3.movement.get_active_reservations(dbo)
-        asm3.al.debug("got %d movements" % len(movements), "code.move_book_reservation", dbo)
-        return {
-            "name": "move_book_reservation",
-            "rows": movements,
-            "movementtypes": asm3.lookups.get_movement_types(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "returncategories": asm3.lookups.get_entryreasons(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement")
-        }
-
-class move_book_retailer(JSONEndpoint):
-    url = "move_book_retailer"
-    js_module = "movements"
-    get_permissions = asm3.users.VIEW_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        movements = asm3.movement.get_movements(dbo, asm3.movement.RETAILER)
-        asm3.al.debug("got %d movements" % len(movements), "code.move_book_retailer", dbo)
-        return {
-            "name": "move_book_retailer",
-            "rows": movements,
-            "logtypes": asm3.lookups.get_log_types(dbo), 
-            "movementtypes": asm3.lookups.get_movement_types(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "returncategories": asm3.lookups.get_entryreasons(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement")
-        }
-
-class move_book_soft_release(JSONEndpoint):
-    url = "move_book_soft_release"
-    js_module = "movements"
-    get_permissions = asm3.users.VIEW_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        movements = asm3.movement.get_soft_releases(dbo)
-        asm3.al.debug("got %d movements" % len(movements), "code.move_book_soft_release", dbo)
-        return {
-            "name": "move_book_soft_release",
-            "rows": movements,
-            "movementtypes": asm3.lookups.get_movement_types(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "returncategories": asm3.lookups.get_entryreasons(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement")
-        }
-
-class move_book_trial_adoption(JSONEndpoint):
-    url = "move_book_trial_adoption"
-    js_module = "movements"
-    get_permissions = asm3.users.VIEW_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        movements = asm3.movement.get_trial_adoptions(dbo)
-        asm3.al.debug("got %d movements" % len(movements), "code.move_book_trial_adoption", dbo)
-        return {
-            "name": "move_book_trial_adoption",
-            "rows": movements,
-            "logtypes": asm3.lookups.get_log_types(dbo), 
-            "movementtypes": asm3.lookups.get_movement_types(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "returncategories": asm3.lookups.get_entryreasons(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement")
-        }
-
-class move_book_unneutered(JSONEndpoint):
-    url = "move_book_unneutered"
-    js_module = "movements"
-    get_permissions = asm3.users.VIEW_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        movements = asm3.movement.get_recent_unneutered_adoptions(dbo)
-        asm3.al.debug("got %d movements" % len(movements), "code.move_book_unneutered", dbo)
-        return {
-            "name": "move_book_unneutered",
-            "rows": movements,
-            "logtypes": asm3.lookups.get_log_types(dbo), 
-            "movementtypes": asm3.lookups.get_movement_types(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "returncategories": asm3.lookups.get_entryreasons(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement")
-        }
-
-class move_deceased(JSONEndpoint):
-    url = "move_deceased"
-    get_permissions = asm3.users.CHANGE_ANIMAL
-    post_permissions = asm3.users.CHANGE_ANIMAL
-
-    def controller(self, o):
-        return {
-            "deathreasons": asm3.lookups.get_deathreasons(o.dbo),
-            "stockitems": asm3.stock.get_stock_items(o.dbo),
-            "stockusagetypes": asm3.lookups.get_stock_usage_types(o.dbo)
-        }
-
-    def post_create(self, o):
-        asm3.animal.update_deceased_from_form(o.dbo, o.user, o.post)
-        if o.post.integer("item") != -1:
-            asm3.stock.deduct_stocklevel_from_form(o.dbo, o.user, o.post)
-
-class move_foster(JSONEndpoint):
-    url = "move_foster"
-    get_permissions = asm3.users.ADD_MOVEMENT
-    post_permissions = asm3.users.ADD_MOVEMENT
-
-    def controller(self, o):
-        return {}
-
-    def post_create(self, o):
-        return str(asm3.movement.insert_foster_from_form(o.dbo, o.user, o.post))
-
-class move_gendoc(JSONEndpoint):
-    url = "move_gendoc"
-    get_permissions = asm3.users.GENERATE_DOCUMENTS
-
-    def controller(self, o):
-        return {
-            "message": o.post["message"],
-            "id": o.post["id"],
-            "linktype": o.post["linktype"],
-            "templates": asm3.template.get_document_templates(o.dbo, "movement")
-        }
-
-class move_reclaim(JSONEndpoint):
-    url = "move_reclaim"
-    get_permissions = asm3.users.ADD_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        return {
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "accounts": asm3.financial.get_accounts(dbo, onlybank=True),
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_MOVEMENT)
-        return str(asm3.movement.insert_reclaim_from_form(o.dbo, o.user, o.post))
-
-    def post_cost(self, o):
-        l = o.locale
-        dbo = o.dbo
-        post = o.post
-        self.check(asm3.users.VIEW_COST)
-        dailyboardcost = asm3.animal.get_daily_boarding_cost(dbo, post.integer("id"))
-        dailyboardcostdisplay = format_currency(l, dailyboardcost)
-        daysonshelter = asm3.animal.get_days_on_shelter(dbo, post.integer("id"))
-        totaldisplay = format_currency(l, dailyboardcost * daysonshelter)
-        return totaldisplay + "||" + _("On shelter for {0} days, daily cost {1}, cost record total <b>{2}</b>", l).format(daysonshelter, dailyboardcostdisplay, totaldisplay)
-
-    def post_donationdefault(self, o):
-        return asm3.lookups.get_donation_default(o.dbo, o.post.integer("donationtype"))
-
-class move_reserve(JSONEndpoint):
-    url = "move_reserve"
-    get_permissions = asm3.users.ADD_MOVEMENT
-    post_permissions = asm3.users.ADD_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        return {
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "accounts": asm3.financial.get_accounts(dbo, onlybank=True),
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo)
-        }
-
-    def post_create(self, o):
-        return str(asm3.movement.insert_reserve_from_form(o.dbo, o.user, o.post))
-
-class move_retailer(JSONEndpoint):
-    url = "move_retailer"
-    get_permissions = asm3.users.ADD_MOVEMENT
-    post_permissions = asm3.users.ADD_MOVEMENT
-
-    def controller(self, o):
-        return {}
-
-    def post_create(self, o):
-        return str(asm3.movement.insert_retailer_from_form(o.dbo, o.user, o.post))
-
-class move_transfer(JSONEndpoint):
-    url = "move_transfer"
-    get_permissions = asm3.users.ADD_MOVEMENT
-    post_permissions = asm3.users.ADD_MOVEMENT
-
-    def controller(self, o):
-        return {}
-
-    def post_create(self, o):
-        return str(asm3.movement.insert_transfer_from_form(o.dbo, o.user, o.post))
-
-class movement(JSONEndpoint):
-    url = "movement"
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_MOVEMENT)
-        return asm3.movement.insert_movement_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_MOVEMENT)
-        asm3.movement.update_movement_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_MOVEMENT)
-        for mid in o.post.integer_list("ids"):
-            asm3.movement.delete_movement(o.dbo, o.user, mid)
-
-    def post_insurance(self, o):
-        return asm3.movement.generate_insurance_number(o.dbo)
-
-    def post_trialfull(self, o):
-        self.check(asm3.users.CHANGE_MOVEMENT)
-        for mid in o.post.integer_list("ids"):
-            asm3.movement.trial_to_full_adoption(o.dbo, o.user, mid)
-
-    def post_checkout(self, o):
-        asm3.movement.send_adoption_checkout(o.dbo, o.user, o.post)
-
-class onlineform_incoming(JSONEndpoint):
-    url = "onlineform_incoming"
-    get_permissions = asm3.users.VIEW_INCOMING_FORMS
-
-    def controller(self, o):
-        headers = asm3.onlineform.get_onlineformincoming_headers(o.dbo)
-        asm3.al.debug("got %d submitted headers" % len(headers), "code.onlineform_incoming", o.dbo)
-        return {
-            "rows": headers
-        }
-
-    def post_view(self, o):
-        self.check(asm3.users.VIEW_INCOMING_FORMS)
-        return asm3.onlineform.get_onlineformincoming_html(o.dbo, o.post.integer("collationid"), include_raw=False)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_INCOMING_FORMS)
-        for did in o.post.integer_list("ids"):
-            asm3.onlineform.delete_onlineformincoming(o.dbo, o.user, did)
-
-    def post_attachanimal(self, o):
-        dbo = o.dbo
-        collationid = o.post.integer("collationid")
-        animalid = o.post.integer("animalid")
-        asm3.onlineform.attach_form(dbo, o.user, asm3.media.ANIMAL, animalid, collationid)
-        return animalid
-
-    def post_attachanimalbyname(self, o):
-        self.check(asm3.users.ADD_MEDIA)
-        rv = []
-        for pid in o.post.integer_list("ids"):
-            collationid, animalid, animalname = asm3.onlineform.attach_animal(o.dbo, o.user, pid)
-            rv.append("%d|%d|%s" % (collationid, animalid, animalname))
-        return "^$".join(rv)
-
-    def post_attachperson(self, o):
-        dbo = o.dbo
-        collationid = o.post.integer("collationid")
-        personid = o.post.integer("personid")
-        asm3.onlineform.attach_form(dbo, o.user, asm3.media.PERSON, personid, collationid)
-        return personid 
-
-    def post_animal(self, o):
-        self.check(asm3.users.ADD_MEDIA)
-        user = "form/%s" % o.user
-        rv = []
-        for pid in o.post.integer_list("ids"):
-            collationid, animalid, animalname, status = asm3.onlineform.create_animal(o.dbo, user, pid)
-            rv.append("%d|%d|%s|%s" % (collationid, animalid, animalname, status))
-        return "^$".join(rv)
-
-    def post_person(self, o):
-        self.check(asm3.users.ADD_PERSON)
-        user = "form/%s" % o.user
-        rv = []
-        for pid in o.post.integer_list("ids"):
-            collationid, personid, personname, status = asm3.onlineform.create_person(o.dbo, user, pid)
-            rv.append("%d|%d|%s|%s" % (collationid, personid, personname, status))
-        return "^$".join(rv)
-
-    def post_lostanimal(self, o):
-        self.check(asm3.users.ADD_LOST_ANIMAL)
-        user = "form/%s" % o.user
-        rv = []
-        for pid in o.post.integer_list("ids"):
-            collationid, lostanimalid, personname, status = asm3.onlineform.create_lostanimal(o.dbo, user, pid)
-            rv.append("%d|%d|%s|%s" % (collationid, lostanimalid, personname, status))
-        return "^$".join(rv)
-
-    def post_foundanimal(self, o):
-        self.check(asm3.users.ADD_FOUND_ANIMAL)
-        user = "form/%s" % o.user
-        rv = []
-        for pid in o.post.integer_list("ids"):
-            collationid, foundanimalid, personname, status = asm3.onlineform.create_foundanimal(o.dbo, user, pid)
-            rv.append("%d|%d|%s|%s" % (collationid, foundanimalid, personname, status))
-        return "^$".join(rv)
-
-    def post_incident(self, o):
-        self.check(asm3.users.ADD_INCIDENT)
-        user = "form/%s" % o.user
-        rv = []
-        for pid in o.post.integer_list("ids"):
-            collationid, incidentid, personname, status = asm3.onlineform.create_animalcontrol(o.dbo, user, pid)
-            rv.append("%d|%d|%s|%s" % (collationid, incidentid, personname, status))
-        return "^$".join(rv)
-
-    def post_transport(self, o):
-        self.check(asm3.users.ADD_TRANSPORT)
-        user = "form/%s" % o.user
-        rv = []
-        for pid in o.post.integer_list("ids"):
-            collationid, animalid, animalname = asm3.onlineform.create_transport(o.dbo, user, pid)
-            rv.append("%d|%d|%s|0" % (collationid, animalid, animalname))
-        return "^$".join(rv)
-
-    def post_waitinglist(self, o):
-        self.check(asm3.users.ADD_WAITING_LIST)
-        user = "form/%s" % o.user
-        rv = []
-        for pid in o.post.integer_list("ids"):
-            collationid, wlid, personname, status = asm3.onlineform.create_waitinglist(o.dbo, user, pid)
-            rv.append("%d|%d|%s|%s" % (collationid, wlid, personname, status))
-        return "^$".join(rv)
-
-class onlineform_incoming_print(ASMEndpoint):
-    url = "onlineform_incoming_print"
-    get_permissions = asm3.users.VIEW_INCOMING_FORMS
-
-    def content(self, o):
-        self.content_type("text/html")
-        self.cache_control(0)
-        return asm3.onlineform.get_onlineformincoming_html_print(o.dbo, o.post.integer_list("ids"))
-
-class onlineform(JSONEndpoint):
-    url = "onlineform"
-    get_permissions = asm3.users.VIEW_ONLINE_FORMS
-    post_permissions = asm3.users.CHANGE_ONLINE_FORMS
-
-    def controller(self, o):
-        l = o.locale
-        dbo = o.dbo
-        formid = o.post.integer("formid")
-        formname = asm3.onlineform.get_onlineform_name(dbo, formid)
-        fields = asm3.onlineform.get_onlineformfields(dbo, formid)
-        # Escape any angle brackets in raw markup output. This is needed
-        # to target tooltip as a textarea
-        for r in fields:
-            if r["FIELDTYPE"] == asm3.onlineform.FIELDTYPE_RAWMARKUP:
-                r["TOOLTIP"] = asm3.html.escape_angle(r["TOOLTIP"]) 
-        title = _("Online Form: {0}", l).format(formname)
-        asm3.al.debug("got %d online form fields" % len(fields), "code.onlineform", dbo)
-        return {
-            "rows": fields,
-            "formid": formid,
-            "formname": formname,
-            "formfields": asm3.utils.deduplicate_list(asm3.onlineform.FORM_FIELDS),
-            "species": asm3.lookups.get_species(dbo),
-            "title": title
-        }
-
-    def post_create(self, o):
-        return asm3.onlineform.insert_onlineformfield_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        asm3.onlineform.update_onlineformfield_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        for did in o.post.integer_list("ids"):
-            asm3.onlineform.delete_onlineformfield(o.dbo, o.user, did)
-
-    def post_reindex(self, o):
-        asm3.onlineform.reindex_onlineform(o.dbo, o.user, o.post.integer("formid"))
-        
-class onlineforms(JSONEndpoint):
-    url = "onlineforms"
-    get_permissions = asm3.users.VIEW_ONLINE_FORMS
-
-    def controller(self, o):
-        dbo = o.dbo
-        onlineforms = asm3.onlineform.get_onlineforms(dbo)
-        asm3.al.debug("got %d online forms" % len(onlineforms), "code.onlineforms", dbo)
-        return {
-            "rows": onlineforms,
-            "flags": asm3.lookups.get_person_flags(dbo),
-            "header": asm3.onlineform.get_onlineform_header(dbo),
-            "footer": asm3.onlineform.get_onlineform_footer(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_ONLINE_FORMS)
-        return asm3.onlineform.insert_onlineform_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_ONLINE_FORMS)
-        asm3.onlineform.update_onlineform_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_ONLINE_FORMS)
-        for did in o.post.integer_list("ids"):
-            asm3.onlineform.delete_onlineform(o.dbo, o.user, did)
-
-    def post_clone(self, o):
-        self.check(asm3.users.ADD_ONLINE_FORMS)
-        for did in o.post.integer_list("ids"):
-            asm3.onlineform.clone_onlineform(o.dbo, o.user, did)
-
-    def post_headfoot(self, o):
-        self.check(asm3.users.CHANGE_ONLINE_FORMS)
-        asm3.onlineform.set_onlineform_headerfooter(o.dbo, o.post["header"], o.post["footer"])
-
-    def post_import(self, o):
-        self.check(asm3.users.ADD_ONLINE_FORMS)
-        fd = asm3.utils.bytes2str(o.post.filedata())
-        if fd.startswith("{"):
-            asm3.onlineform.import_onlineform_json(o.dbo, fd)
-        else:
-            asm3.onlineform.import_onlineform_html(o.dbo, fd)
-        self.redirect("onlineforms")
-
-class onlineform_json(ASMEndpoint):
-    url = "onlineform_json"
-    get_permissions = asm3.users.VIEW_ONLINE_FORMS
-
-    def content(self, o):
-        self.content_type("application/json")
-        return asm3.onlineform.get_onlineform_json(o.dbo, o.post.integer("formid"))
-
-class onlineform_view(ASMEndpoint):
-    url = "onlineform_view"
-    get_permissions = asm3.users.VIEW_ONLINE_FORMS
-
-    def content(self, o):
-        self.content_type("text/html")
-        self.cache_control(0)
-        return asm3.onlineform.get_onlineform_html(o.dbo, o.post.integer("formid"))
-
-class options(JSONEndpoint):
-    url = "options"
-    get_permissions = asm3.users.SYSTEM_OPTIONS
-    post_permissions = asm3.users.SYSTEM_OPTIONS
-
-    def controller(self, o):
-        dbo = o.dbo
-        c = {
-            "accounts": asm3.financial.get_accounts(dbo, onlybank=True),
-            "accountsexp": asm3.financial.get_accounts(dbo, onlyexpense=True),
-            "accountsinc": asm3.financial.get_accounts(dbo, onlyincome=True),
-            "animalfindcolumns": asm3.html.json_animalfindcolumns(dbo),
-            "animalflags": asm3.lookups.get_animal_flags(dbo),
-            "breeds": asm3.lookups.get_breeds(dbo),
-            "coattypes": asm3.lookups.get_coattypes(dbo),
-            "colours": asm3.lookups.get_basecolours(dbo),
-            "costtypes": asm3.lookups.get_costtypes(dbo),
-            "currencies": asm3.lookups.CURRENCIES,
-            "deathreasons": asm3.lookups.get_deathreasons(dbo),
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "entryreasons": asm3.lookups.get_entryreasons(dbo),
-            "foundanimalfindcolumns": asm3.html.json_foundanimalfindcolumns(dbo),
-            "incidenttypes": asm3.lookups.get_incident_types(dbo),
-            "haspaypal": PAYPAL_VALIDATE_IPN_URL != "",
-            "incidentfindcolumns": asm3.html.json_incidentfindcolumns(dbo),
-            "jurisdictions": asm3.lookups.get_jurisdictions(dbo),
-            "locales": get_locales(),
-            "locations": asm3.lookups.get_internal_locations(dbo),
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "lostanimalfindcolumns": asm3.html.json_lostanimalfindcolumns(dbo),
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "personfindcolumns": asm3.html.json_personfindcolumns(dbo),
-            "quicklinks": asm3.html.json_quicklinks(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "sizes": asm3.lookups.get_sizes(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "themes": asm3.lookups.VISUAL_THEMES,
-            "templates": asm3.template.get_document_templates(dbo, "movement"),
-            "testtypes": asm3.lookups.get_test_types(dbo),
-            "types": asm3.lookups.get_animal_types(dbo),
-            "urgencies": asm3.lookups.get_urgencies(dbo),
-            "usersandroles": asm3.users.get_users_and_roles(dbo),
-            "vaccinationtypes": asm3.lookups.get_vaccination_types(dbo),
-            "waitinglistcolumns": asm3.html.json_waitinglistcolumns(dbo)
-        }
-        asm3.al.debug("lookups loaded", "code.options", dbo)
-        return c
-
-    def post_save(self, o):
-        asm3.configuration.csave(o.dbo, o.user, o.post)
-        self.reload_config()
-
-class pp_cardcom(ASMEndpoint):
-    """ 
-    Cardcom Indicator endpoint. 
-    """
-    url = "pp_cardcom"
-    check_logged_in = False
-    use_web_input = False
-
-    def content(self, o):
-        asm3.al.debug("in pp_cardcom_content")
-        asm3.al.debug(o.post, "code.pp_cardcom")
-        asm3.al.debug(self.query(), "code.pp_cardcom")
-
-        querystring = self.query()
-        if querystring.startswith("?"):
-            querystring = querystring[1:]
-        params = asm3.utils.parse_qs(querystring)
-        #ReturnValue contains db-payref. Extract db
-        client_reference_id = dict(params).get("ReturnValue","")
-        dbname = client_reference_id[0:client_reference_id.find("-")]
-        dbo = asm3.db.get_database(dbname)
-        if dbo.database in asm3.db.ERROR_VALUES:
-            asm3.al.error("invalid database '%s'" % dbname, "code.pp_cardcom")
-            return
-        try:
-            p = asm3.paymentprocessor.cardcom.Cardcom(dbo)
-            p.receive(querystring)
-        except asm3.paymentprocessor.base.ProcessorError:
-            # ProcessorError subclasses are thrown when there is a problem with the 
-            # data PayPal have sent, but we do not want them to send it again.
-            # By catching these and returning a 200 empty body, they will not
-            # send it again.
-            return
-
-class pp_paypal(ASMEndpoint):
-    """ 
-    PayPal IPN endpoint. If we return anything but 200 OK with an
-    empty body, PayPal will retry the IPN at a later time. 
-    Note that PayPal send POSTed data encoded as cp1252, so we
-    parse it ourselves using data_param() instead of web.input (hard-coded to utf-8)
-    """
-    url = "pp_paypal"
-    check_logged_in = False
-    use_web_input = False
-    data_encoding = "cp1252"
-
-    def post_all(self, o):
-        asm3.al.debug(o.data, "code.pp_paypal")
-        dbname = self.data_param("custom")
-        dbo = asm3.db.get_database(dbname)
-        if dbo.database in asm3.db.ERROR_VALUES:
-            asm3.al.error("invalid database '%s'" % dbname, "code.pp_paypal")
-            return
-        try:
-            p = asm3.paymentprocessor.paypal.PayPal(dbo)
-            p.receive(o.data)
-        except asm3.paymentprocessor.base.ProcessorError:
-            # ProcessorError subclasses are thrown when there is a problem with the 
-            # data PayPal have sent, but we do not want them to send it again.
-            # By catching these and returning a 200 empty body, they will not
-            # send it again.
-            return
-
-class pp_stripe(ASMEndpoint):
-    """
-    Stripe webhook endpoint. Like PayPal, a non-200 return code
-    will force a retry.
-    The payload is utf-8 encoded JSON.
-    """
-    url = "pp_stripe"
-    check_logged_in = False
-    use_web_input = False
-    data_encoding = "utf-8"
-
-    def post_all(self, o):
-        asm3.al.debug(o.data, "code.pp_stripe")
-        try:
-            j = asm3.utils.json_parse(o.data)
-            if "client_reference_id" not in j["data"]["object"]:
-                asm3.al.error("client_reference_id missing, this is not an ASM requested payment", "code.pp_stripe")
-                return # OK 200, this payment notification is not for us
-            client_reference_id = j["data"]["object"]["client_reference_id"]
-            dbname = client_reference_id[0:client_reference_id.find("-")]
-            dbo = asm3.db.get_database(dbname)
-            if dbo.database in asm3.db.ERROR_VALUES:
-                asm3.al.error("invalid database '%s'" % dbname, "code.pp_stripe")
-                return # OK 200, we can't do anything with this
-        except Exception as e:
-            asm3.al.error("failed extracting dbname from client_reference_id: %s" % e, "code.pp_stripe")
-            return
-
-        try:
-            p = asm3.paymentprocessor.stripeh.Stripe(dbo)
-            p.receive(o.data)
-        except asm3.paymentprocessor.base.ProcessorError:
-            # ProcessorError subclasses are thrown when there is a problem with the 
-            # data Stripe have sent, but we do not want them to send it again.
-            # By catching these and returning a 200 empty body, they will not
-            # send it again.
-            return
-
-class person(JSONEndpoint):
-    url = "person"
-    get_permissions = asm3.users.VIEW_PERSON
-
-    def controller(self, o):
-        dbo = o.dbo
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: 
-            self.notfound()
-        if p.ISSTAFF == 1:
-            self.check(asm3.users.VIEW_STAFF)
-        if p.ISVOLUNTEER == 1:
-            self.check(asm3.users.VIEW_VOLUNTEER)
-        if o.siteid != 0 and p.SITEID != 0 and o.siteid != p.SITEID:
-            raise asm3.utils.ASMPermissionError("person not in user site")
-        if (p.LATLONG is None or p.LATLONG == "") and p.OWNERADDRESS != "":
-            p.LATLONG = asm3.person.update_geocode(dbo, p.ID, p.LATLONG, p.OWNERADDRESS, p.OWNERTOWN, p.OWNERCOUNTY, p.OWNERPOSTCODE)
-        upid = asm3.users.get_personid(dbo, o.user)
-        if upid != 0 and upid == p.id:
-            raise asm3.utils.ASMPermissionError("cannot view user staff record")
-        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, "owner", p.ID, p.OWNERNAME)
-        asm3.al.debug("opened person '%s'" % p.OWNERNAME, "code.person", dbo)
-        return {
-            "additional": asm3.additional.get_additional_fields(dbo, p.id, "person"),
-            "animaltypes": asm3.lookups.get_animal_types(dbo),
-            "audit": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, "owner", p.id) or [],
-            "species": asm3.lookups.get_species(dbo),
-            "breeds": asm3.lookups.get_breeds_by_species(dbo),
-            "colours": asm3.lookups.get_basecolours(dbo),
-            "diarytasks": asm3.diary.get_person_tasks(dbo),
-            "flags": asm3.lookups.get_person_flags(dbo),
-            "ynun": asm3.lookups.get_ynun(dbo),
-            "ynunk": asm3.lookups.get_ynunk(dbo),
-            "homecheckhistory": asm3.person.get_homechecked(dbo, p.id),
-            "jurisdictions": asm3.lookups.get_jurisdictions(dbo),
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "sexes": asm3.lookups.get_sexes(dbo),
-            "sites": asm3.lookups.get_sites(dbo),
-            "sizes": asm3.lookups.get_sizes(dbo),
-            "towns": asm3.person.get_towns(dbo),
-            "counties": asm3.person.get_counties(dbo),
-            "towncounties": asm3.person.get_town_to_county(dbo),
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p.id)[0],
-            "templates": asm3.template.get_document_templates(dbo, "person"),
-            "person": p
-        }
-
-    def post_save(self, o):
-        self.check(asm3.users.CHANGE_PERSON)
-        asm3.person.update_person_from_form(o.dbo, o.post, o.user)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_PERSON)
-        asm3.person.delete_person(o.dbo, o.user, o.post.integer("personid"))
-
-    def post_email(self, o):
-        self.check(asm3.users.EMAIL_PERSON)
-        asm3.person.send_email_from_form(o.dbo, o.user, o.post)
-
-    def post_latlong(self, o):
-        self.check(asm3.users.CHANGE_PERSON)
-        asm3.person.update_latlong(o.dbo, o.post.integer("personid"), o.post["latlong"])
-
-    def post_merge(self, o):
-        self.check(asm3.users.MERGE_PERSON)
-        asm3.person.merge_person(o.dbo, o.user, o.post.integer("personid"), o.post.integer("mergepersonid"))
-
-class person_citations(JSONEndpoint):
-    url = "person_citations"
-    js_module = "citations"
-    get_permissions = asm3.users.VIEW_CITATION
-
-    def controller(self, o):
-        dbo = o.dbo
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        citations = asm3.financial.get_person_citations(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d citations" % len(citations), "code.incident_citations", dbo)
-        return {
-            "name": "person_citations",
-            "rows": citations,
-            "person": p,
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0],
-            "citationtypes": asm3.lookups.get_citation_types(dbo)
-        }
-
-class person_clinic(JSONEndpoint):
-    url = "person_clinic"
-    js_module = "clinic_appointment"
-    get_permissions = asm3.users.VIEW_CLINIC
-
-    def controller(self, o):
-        dbo = o.dbo
-        personid = o.post.integer("id")
-        p = asm3.person.get_person(dbo, personid)
-        if p is None: self.notfound()
-        rows = asm3.clinic.get_person_appointments(dbo, personid)
-        asm3.al.debug("got %d appointments for person %s" % (len(rows), p.OWNERNAME), "code.person_clinic", dbo)
-        return {
-            "name": self.url,
-            "person": p,
-            "tabcounts": asm3.person.get_satellite_counts(dbo, personid)[0],
-            "clinicstatuses": asm3.lookups.get_clinic_statuses(dbo),
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "forlist": asm3.users.get_users(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "clinic"),
-            "rows": rows
-        }
-
-class person_diary(JSONEndpoint):
-    url = "person_diary"
-    js_module = "diary"
-    get_permissions = asm3.users.VIEW_DIARY
-
-    def controller(self, o):
-        dbo = o.dbo
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        diaries = asm3.diary.get_diaries(dbo, asm3.diary.PERSON, o.post.integer("id"))
-        asm3.al.debug("got %d diaries" % len(diaries), "code.person_diary", dbo)
-        return {
-            "rows": diaries,
-            "person": p,
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0],
-            "name": "person_diary",
-            "linkid": p["ID"],
-            "linktypeid": asm3.diary.PERSON,
-            "forlist": asm3.users.get_users_and_roles(dbo)
-        }
-
-class person_donations(JSONEndpoint):
-    url = "person_donations"
-    js_module = "donations"
-    get_permissions = asm3.users.VIEW_DONATION
-
-    def controller(self, o):
-        dbo = o.dbo
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        donations = asm3.financial.get_person_donations(dbo, o.post.integer("id"))
-        return {
-            "person": p,
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0],
-            "name": "person_donations",
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "accounts": asm3.financial.get_accounts(dbo, onlybank=True),
-            "logtypes": asm3.lookups.get_log_types(dbo), 
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "frequencies": asm3.lookups.get_donation_frequencies(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "payment"),
-            "rows": donations
-        }
-
-class person_embed(ASMEndpoint):
-    url = "person_embed"
-    check_logged_in = False
-
-    def content(self, o):
-        if not o.dbo: raise asm3.utils.ASMPermissionError("No session")
-        dbo = o.dbo
-        self.content_type("application/json")
-        self.cache_control(180) # Person data can be cached for a few minutes, useful for multiple widgets on one page
-        return asm3.utils.json({
-            "additional": asm3.additional.get_additional_fields(dbo, 0, "person"),
-            "jurisdictions": asm3.lookups.get_jurisdictions(dbo),
-            "towns": asm3.person.get_towns(dbo),
-            "counties": asm3.person.get_counties(dbo),
-            "towncounties": asm3.person.get_town_to_county(dbo),
-            "flags": asm3.lookups.get_person_flags(dbo),
-            "sites": asm3.lookups.get_sites(dbo)
-        })
-
-    def post_find(self, o):
-        self.check(asm3.users.VIEW_PERSON)
-        self.content_type("application/json")
-        q = o.post["q"]
-        rows = asm3.person.get_person_find_simple(o.dbo, q, o.user, classfilter=o.post["filter"], \
-            includeStaff=self.checkb(asm3.users.VIEW_STAFF), \
-            includeVolunteers=self.checkb(asm3.users.VIEW_VOLUNTEER), limit=100, siteid=o.siteid)
-        asm3.al.debug("find '%s' got %d rows" % (self.query(), len(rows)), "code.person_embed", o.dbo)
-        return asm3.utils.json(rows)
-
-    def post_id(self, o):
-        self.check(asm3.users.VIEW_PERSON)
-        self.content_type("application/json")
-        self.cache_control(120)
-        dbo = o.dbo
-        pid = o.post.integer("id")
-        p = asm3.person.get_person_embedded(dbo, pid)
-        if not p:
-            asm3.al.error("get person by id %d found no records." % pid, "code.person_embed", dbo)
-            raise web.notfound()
-        else:
-            return asm3.utils.json((p,))
-
-    def post_personwarn(self, o):
-        self.check(asm3.users.VIEW_PERSON)
-        self.content_type("application/json")
-        self.cache_control(120)
-        dbo = o.dbo
-        pid = o.post.integer("id")
-        p = asm3.person.get_person_embedded(dbo, pid)
-        if not p:
-            asm3.al.error("get person by id %d found no records." % pid, "code.person_embed", dbo)
-            raise web.notfound()
-        else:
-            asm3.person.embellish_adoption_warnings(dbo, p)
-            return asm3.utils.json((p,))
-
-    def post_similar(self, o):
-        self.check(asm3.users.VIEW_PERSON)
-        self.content_type("application/json")
-        dbo = o.dbo
-        post = o.post
-        surname = post["surname"]
-        forenames = post["forenames"]
-        address = post["address"]
-        email = post["emailaddress"]
-        mobile = post["mobiletelephone"]
-        p = asm3.person.get_person_similar(dbo, email, mobile, surname, forenames, address, o.siteid)
-        if len(p) == 0:
-            asm3.al.debug("No similar people found for %s, %s, %s, %s, %s" % (email, mobile, surname, forenames, address), "code.person_embed", dbo)
-        else:
-            asm3.al.debug("found similar people for %s, %s, %s, %s, %s: got %d records" % (email, mobile, surname, forenames, address, len(p)), "code.person_embed", dbo)
-        return asm3.utils.json(p)
-
-    def post_add(self, o):
-        self.check(asm3.users.ADD_PERSON)
-        self.content_type("application/json")
-        dbo = o.dbo
-        asm3.al.debug("add new person", "code.person_embed", dbo)
-        pid = asm3.person.insert_person_from_form(dbo, o.post, o.user)
-        p = asm3.person.get_person(dbo, pid)
-        return asm3.utils.json((p,))
-
-class person_find(JSONEndpoint):
-    url = "person_find"
-    get_permissions = asm3.users.VIEW_PERSON
-
-    def controller(self, o):
-        dbo = o.dbo
-        flags = asm3.lookups.get_person_flags(dbo)
-        asm3.al.debug("lookups loaded", "code.person_find", dbo)
-        return {
-            "flags": flags,
-            "jurisdictions": asm3.lookups.get_jurisdictions(dbo),
-            "users": asm3.users.get_users(dbo)
-        }
-
-class person_find_results(JSONEndpoint):
-    url = "person_find_results"
-    get_permissions = asm3.users.VIEW_PERSON
-
-    def controller(self, o):
-        dbo = o.dbo
-        mode = o.post["mode"]
-        q = o.post["q"]
-        if mode == "SIMPLE":
-            results = asm3.person.get_person_find_simple(dbo, q, o.user, classfilter="all", \
-                includeStaff=self.checkb(asm3.users.VIEW_STAFF), \
-                includeVolunteers=self.checkb(asm3.users.VIEW_VOLUNTEER), \
-                limit=asm3.configuration.record_search_limit(dbo), siteid=o.siteid)
-        else:
-            results = asm3.person.get_person_find_advanced(dbo, o.post.data, o.user, \
-                includeStaff=self.checkb(asm3.users.VIEW_STAFF), includeVolunteers=self.checkb(asm3.users.VIEW_VOLUNTEER), \
-                limit=asm3.configuration.record_search_limit(dbo), siteid=o.siteid)
-        add = None
-        if len(results) > 0: 
-            add = asm3.additional.get_additional_fields_ids(dbo, results, "person")
-        asm3.al.debug("found %d results for %s" % (len(results), self.query()), "code.person_find_results", dbo)
-        return {
-            "rows": results,
-            "additional": add
-        }
-
-class person_investigation(JSONEndpoint):
-    url = "person_investigation"
-    get_permissions = asm3.users.VIEW_INVESTIGATION
-
-    def controller(self, o):
-        dbo = o.dbo
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        investigation = asm3.person.get_investigation(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d investigation records for person %s" % (len(investigation), p["OWNERNAME"]), "code.person_investigation", dbo)
-        return {
-            "rows": investigation,
-            "person": p,
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0]
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_INVESTIGATION)
-        return str(asm3.person.insert_investigation_from_form(o.dbo, o.user, o.post))
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_INVESTIGATION)
-        asm3.person.update_investigation_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_INVESTIGATION)
-        for did in o.post.integer_list("ids"):
-            asm3.person.delete_investigation(o.dbo, o.user, did)
-
-class person_licence(JSONEndpoint):
-    url = "person_licence"
-    js_module = "licence"
-    get_permissions = asm3.users.VIEW_LICENCE
-
-    def controller(self, o):
-        dbo = o.dbo
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        licences = asm3.financial.get_person_licences(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d licences" % len(licences), "code.person_licence", dbo)
-        return {
-            "name": "person_licence",
-            "rows": licences,
-            "person": p,
-            "templates": asm3.template.get_document_templates(dbo, "licence"),
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0],
-            "licencetypes": asm3.lookups.get_licence_types(dbo)
-        }
-
-class person_log(JSONEndpoint):
-    url = "person_log"
-    js_module = "log"
-    get_permissions = asm3.users.VIEW_LOG
-
-    def controller(self, o):
-        dbo = o.dbo
-        logfilter = o.post.integer("filter")
-        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        logs = asm3.log.get_logs(dbo, asm3.log.PERSON, o.post.integer("id"), logfilter)
-        return {
-            "name": "person_log",
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.log.PERSON,
-            "filter": logfilter,
-            "rows": logs,
-            "person": p,
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0],
-            "logtypes": asm3.lookups.get_log_types(dbo)
-        }
-
-class person_lookingfor(ASMEndpoint):
-    url = "person_lookingfor"
-    get_permissions = asm3.users.VIEW_PERSON
-
-    def content(self, o):
-        self.content_type("text/html")
-        if o.post.integer("personid") == 0:
-            return asm3.cachedisk.get("lookingfor_report", o.dbo.database)
-        else:
-            return asm3.person.lookingfor_report(o.dbo, o.user, o.post.integer("personid"))
-
-class person_links(JSONEndpoint):
-    url = "person_links"
-    get_permissions = asm3.users.VIEW_PERSON_LINKS
-
-    def controller(self, o):
-        dbo = o.dbo
-        links = asm3.person.get_links(dbo, o.post.integer("id"))
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        asm3.al.debug("got %d person links" % len(links), "code.person_links", dbo)
-        return {
-            "links": links,
-            "person": p,
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0]
-        }
-
-class person_media(JSONEndpoint):
-    url = "person_media"
-    js_module = "media"
-    get_permissions = asm3.users.VIEW_MEDIA
-
-    def controller(self, o):
-        dbo = o.dbo
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        m = asm3.media.get_media(dbo, asm3.media.PERSON, o.post.integer("id"))
-        asm3.al.debug("got %d media" % len(m), "code.person_media", dbo)
-        return {
-            "media": m,
-            "person": p,
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0],
-            "showpreferred": True,
-            "canwatermark": False,
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.media.PERSON,
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "name": self.url,
-            "resizeimagespec": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, ""),
-            "templates": asm3.template.get_document_templates(dbo, "email"),
-            "sigtype": ELECTRONIC_SIGNATURES
-        }
-
-class person_movements(JSONEndpoint):
-    url = "person_movements"
-    js_module = "movements"
-    get_permissions = asm3.users.VIEW_MOVEMENT
-
-    def controller(self, o):
-        dbo = o.dbo
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        movements = asm3.movement.get_person_movements(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d movements" % len(movements), "code.person_movements", dbo)
-        return {
-            "name": "person_movements",
-            "rows": movements,
-            "person": p,
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0],
-            "logtypes": asm3.lookups.get_log_types(dbo), 
-            "movementtypes": asm3.lookups.get_movement_types(dbo),
-            "reservationstatuses": asm3.lookups.get_reservation_statuses(dbo),
-            "returncategories": asm3.lookups.get_entryreasons(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "movement")
-        }
-
-class person_new(JSONEndpoint):
-    url = "person_new"
-    get_permissions = asm3.users.ADD_PERSON
-    post_permissions = asm3.users.ADD_PERSON
-
-    def controller(self, o):
-        dbo = o.dbo
-        asm3.al.debug("add person", "code.person_new", dbo)
-        return {
-            "towns": asm3.person.get_towns(dbo),
-            "counties": asm3.person.get_counties(dbo),
-            "towncounties": asm3.person.get_town_to_county(dbo),
-            "additional": asm3.additional.get_additional_fields(dbo, 0, "person"),
-            "jurisdictions": asm3.lookups.get_jurisdictions(dbo),
-            "flags": asm3.lookups.get_person_flags(dbo),
-            "sites": asm3.lookups.get_sites(dbo)
-        }
-
-    def post_all(self, o):
-        return str(asm3.person.insert_person_from_form(o.dbo, o.post, o.user))
-
-class person_rota(JSONEndpoint):
-    url = "person_rota"
-    js_module = "rota"
-    get_permissions = asm3.users.VIEW_ROTA
-
-    def controller(self, o):
-        dbo = o.dbo
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        rota = asm3.person.get_person_rota(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d rota items" % len(rota), "code.person_rota", dbo)
-        return {
-            "name": "person_rota",
-            "rows": rota,
-            "person": p,
-            "rotatypes": asm3.lookups.get_rota_types(dbo),
-            "worktypes": asm3.lookups.get_work_types(dbo),
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0]
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_ROTA)
-        return asm3.person.insert_rota_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_ROTA)
-        asm3.person.update_rota_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_ROTA)
-        for rid in o.post.integer_list("ids"):
-            asm3.person.delete_rota(o.dbo, o.user, rid)
-
-class person_traploan(JSONEndpoint):
-    url = "person_traploan"
-    js_module = "traploan"
-    get_permissions = asm3.users.VIEW_TRAPLOAN
-
-    def controller(self, o):
-        dbo = o.dbo
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        traploans = asm3.animalcontrol.get_person_traploans(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d trap loans" % len(traploans), "code.person_traploan", dbo)
-        return {
-            "name": "person_traploan",
-            "rows": traploans,
-            "person": p,
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0],
-            "traptypes": asm3.lookups.get_trap_types(dbo)
-        }
-
-class person_vouchers(JSONEndpoint):
-    url = "person_vouchers"
-    js_module = "vouchers"
-    get_permissions = asm3.users.VIEW_VOUCHER
-
-    def controller(self, o):
-        dbo = o.dbo
-        p = asm3.person.get_person(dbo, o.post.integer("id"))
-        if p is None: self.notfound()
-        vouchers = asm3.financial.get_person_vouchers(dbo, o.post.integer("id"))
-        asm3.al.debug("got %d person vouchers" % len(vouchers), "code.person_vouchers", dbo)
-        return {
-            "name": "person_vouchers",
-            "rows": vouchers,
-            "person": p,
-            "tabcounts": asm3.person.get_satellite_counts(dbo, p["ID"])[0],
-            "templates": asm3.template.get_document_templates(dbo, "voucher"),
-            "vouchertypes": asm3.lookups.get_voucher_types(dbo)
-        }
-
-class publish(JSONEndpoint):
-    url = "publish"
-    get_permissions = asm3.users.USE_INTERNET_PUBLISHER
-
-    def controller(self, o):
-        dbo = o.dbo
-        mode = o.post["mode"]
-        failed = False
-        asm3.al.debug("publish started for mode %s" % mode, "code.publish", dbo)
-        # If a publisher is already running and we have a mode, mark
-        # a failure starting
-        if asm3.asynctask.is_task_running(dbo):
-            asm3.al.debug("publish already running, not starting new publish", "code.publish", dbo)
-        else:
-            # If a publishing mode is requested, start that publisher
-            # running on a background thread
-            asm3.publish.start_publisher(dbo, mode, user=o.user, newthread=True)
-        return { "failed": failed }
-
-    def post_poll(self, o):
-        return "%s|%d|%s" % (asm3.asynctask.get_task_name(o.dbo), asm3.asynctask.get_progress_percent(o.dbo), asm3.asynctask.get_last_error(o.dbo))
-
-    def post_stop(self, o):
-        asm3.asynctask.set_cancel(o.dbo, True)
-
-class publish_logs(JSONEndpoint):
-    url = "publish_logs"
-    get_permissions = asm3.users.USE_INTERNET_PUBLISHER
-
-    def controller(self, o):
-        logs = asm3.publish.get_publish_logs(o.dbo)
-        asm3.al.debug("viewing %d publishing logs" % len(logs), "code.publish_logs", o.dbo)
-        return {
-            "rows": logs
-        }
-
-class publish_log_view(ASMEndpoint):
-    url = "publish_log_view"
-    get_permissions = asm3.users.USE_INTERNET_PUBLISHER
-
-    def content(self, o):
-        asm3.al.debug("viewing log file %s" % o.post["view"], "code.publish_logs", o.dbo)
-        self.cache_control(CACHE_ONE_WEEK) # log files never change
-        self.content_type("text/plain")
-        self.header("Content-Disposition", "inline; filename=\"%s\"" % o.post["view"])
-        return asm3.publish.get_publish_log(o.dbo, o.post.integer("view"))
-
-class publish_options(JSONEndpoint):
-    url = "publish_options"
-    get_permissions = asm3.users.PUBLISH_OPTIONS
-    post_permissions = asm3.users.PUBLISH_OPTIONS
-
-    def controller(self, o):
-        dbo = o.dbo
-        c = {
-            "locations": asm3.lookups.get_internal_locations(dbo),
-            "flags": asm3.lookups.get_animal_flags(dbo),
-            "hasakcreunite": AKC_REUNITE_BASE_URL != "",
-            "hasfoundanimals": FOUNDANIMALS_FTP_USER != "",
-            "hashomeagain": HOMEAGAIN_BASE_URL != "",
-            "hashtmlftp": HTMLFTP_PUBLISHER_ENABLED,
-            "hasmaddiesfund": MADDIES_FUND_TOKEN_URL != "",
-            "haspetcademy": PETCADEMY_FTP_HOST != "",
-            "haspetlink": PETLINK_BASE_URL != "",
-            "haspetslocated": PETSLOCATED_FTP_USER != "",
-            "hassmarttag": SMARTTAG_FTP_USER != "",
-            "hasvetenvoy": False, # Disabled. VETENVOY_US_BASE_URL != "",
-            "haspetrescue": PETRESCUE_URL != "",
-            "hassavourlife": SAVOURLIFE_URL != "",
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "styles": asm3.template.get_html_template_names(dbo),
-            "users": asm3.users.get_users(dbo)
-        }
-        asm3.al.debug("loaded lookups", "code.publish_options", dbo)
-        return c
-
-    def post_save(self, o):
-        asm3.configuration.csave(o.dbo, o.user, o.post)
-        self.reload_config()
-
-    def post_vesignup(self, o):
-        userid, userpwd = asm3.publishers.vetenvoy.VetEnvoyUSMicrochipPublisher.signup(o.dbo, o.post)
-        return "%s,%s" % (userid, userpwd)
-
-class report(ASMEndpoint):
-    url = "report"
-    get_permissions = asm3.users.VIEW_REPORT
-
-    def content(self, o):
-        dbo = o.dbo
-        post = o.post
-        crid = post.integer("id")
-        # Make sure this user has a role that can view the report
-        asm3.reports.check_view_permission(o.session, crid)
-        crit = asm3.reports.get_criteria(dbo, crid)
-        self.content_type("text/html")
-        self.cache_control(0)
-        # If this report takes criteria and none were supplied, go to the criteria screen instead to get them
-        if len(crit) != 0 and post["hascriteria"] == "": self.redirect("report_criteria?id=%d&target=report" % post.integer("id"))
-        title = asm3.reports.get_title(dbo, crid)
-        asm3.al.debug("got criteria (%s), executing report %d %s" % (str(post.data), crid, title), "code.report", dbo)
-        p = asm3.reports.get_criteria_params(dbo, crid, post)
-        if asm3.configuration.audit_on_view_report(dbo):
-            asm3.audit.view_report(dbo, o.user, title, str(post.data))
-        s = asm3.reports.execute(dbo, crid, o.user, p)
-        return s
-
-class report_criteria(JSONEndpoint):
-    url = "report_criteria"
-    get_permissions = asm3.users.VIEW_REPORT
-
-    def controller(self, o):
-        dbo = o.dbo
-        post = o.post
-        title = asm3.reports.get_title(o.dbo, post.integer("id"))
-        crit = asm3.reports.get_criteria(dbo, post.integer("id"))
-        asm3.al.debug("building report criteria form for report %d %s" % (post.integer("id"), title), "code.report_criteria", dbo)
-        def has_criteria(c):
-            for name, rtype, question in crit:
-                if rtype == c: return True
-            return False
-        c = {
-            "id":           post.integer("id"),
-            "title":        title,
-            "target":       post["target"],
-            "criteria":     crit
-        }
-        if has_criteria("ANIMALFLAG"): c["animalflags"] = asm3.lookups.get_animal_flags(dbo)
-        if has_criteria("DONATIONTYPE") or has_criteria("PAYMENTTYPE"): c["donationtypes"] = asm3.lookups.get_donation_types(dbo)
-        if has_criteria("LITTER"): c["litters"] = asm3.animal.get_active_litters_brief(dbo)
-        if has_criteria("LOCATION"): c["locations"] = asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid)
-        if has_criteria("LOGTYPE"): c["logtypes"] = asm3.lookups.get_log_types(dbo)
-        if has_criteria("PAYMENTMETHOD") or has_criteria("PAYMENTTYPE"): c["paymentmethods"] = asm3.lookups.get_payment_methods(dbo)
-        if has_criteria("PERSON"): c["people"] = asm3.person.get_person_name_addresses(dbo)
-        if has_criteria("PERSONFLAG"): c["personflags"] = asm3.lookups.get_person_flags(dbo)
-        if has_criteria("SITE"): c["sites"] = asm3.lookups.get_sites(dbo)
-        if has_criteria("SPECIES"): c["species"] = asm3.lookups.get_species(dbo)
-        if has_criteria("TYPE"): c["types"] = asm3.lookups.get_animal_types(dbo)
-        return c
-
-class report_export(JSONEndpoint):
-    url = "report_export"
-    get_permissions = asm3.users.EXPORT_REPORT
-
-    def controller(self, o):
-        dbo = o.dbo
-        reports = asm3.reports.get_available_reports(dbo)
-        asm3.al.debug("exporting %d reports" % len(reports), "code.report_export", dbo)
-        return {
-            "rows": reports
-        }
-
-class report_export_csv(ASMEndpoint):
-    url = "report_export_csv"
-    get_permissions = asm3.users.EXPORT_REPORT
-
-    def content(self, o):
-        dbo = o.dbo
-        post = o.post
-        crid = post.integer("id")
-        crit = asm3.reports.get_criteria(dbo, crid)
-        # If this report takes criteria and none were supplied, go to the criteria screen instead to get them
-        if len(crit) != 0 and post["hascriteria"] == "": self.redirect("report_criteria?id=%d&target=report_export_csv" % crid)
-        # Make sure this user has a role that can view the report
-        asm3.reports.check_view_permission(o.session, crid)
-        title = asm3.reports.get_title(dbo, crid)
-        filename = title.replace(" ", "_").replace("\"", "").replace("'", "").lower()
-        p = asm3.reports.get_criteria_params(dbo, crid, post)
-        rows, cols = asm3.reports.execute_query(dbo, crid, o.user, p)
-        titlecaseheader = cols is not None and "TITLECASEHEADER" in cols
-        renameheader = ""
-        if cols is not None and "RENAMEHEADER" in cols and len(rows) > 0:
-            renameheader = rows[0].RENAMEHEADER
-        self.content_type("text/csv")
-        # non-latin1 chars in HTTP headers cause errors in web.py - encode any unicode chars as HTML entities
-        # then look for them and use the report ID if any are found.
-        if asm3.utils.encode_html(filename).find("&#") != -1: filename = str(crid) 
-        self.header("Content-Disposition", f"attachment; filename=\"{filename}.csv\"")
-        return asm3.utils.csv(o.locale, rows, cols, includeheader=True, titlecaseheader=titlecaseheader, renameheader=renameheader)
-
-class report_export_email(ASMEndpoint):
-    url = "report_export_email"
-    get_permissions = asm3.users.EXPORT_REPORT
-
-    def content(self, o):
-        dbo = o.dbo
-        post = o.post
-        crid = post.integer("id")
-        email = post["email"]
-        crit = asm3.reports.get_criteria(dbo, crid)
-        # If this report takes criteria and none were supplied, go to the criteria screen instead to get them
-        if len(crit) != 0 and post["hascriteria"] == "": self.redirect("report_criteria?id=%d&target=report_export_email" % crid)
-        # Make sure this user has a role that can view the report
-        asm3.reports.check_view_permission(o.session, crid)
-        title = asm3.reports.get_title(dbo, crid)
-        p = asm3.reports.get_criteria_params(dbo, crid, post)
-        content = asm3.reports.execute(dbo, crid, o.user, p)
-        asm3.utils.send_email(dbo, asm3.configuration.email(dbo), email, "", "", title, content, "html")
-        self.redirect("report%s" % self.query() + "&sent=1")
-
-class report_export_pdf(ASMEndpoint):
-    url = "report_export_pdf"
-    get_permissions = asm3.users.EXPORT_REPORT
-
-    def content(self, o):
-        dbo = o.dbo
-        post = o.post
-        crid = post.integer("id")
-        crit = asm3.reports.get_criteria(dbo, crid)
-        # If this report takes criteria and none were supplied, go to the criteria screen instead to get them
-        if len(crit) != 0 and post["hascriteria"] == "": self.redirect("report_criteria?id=%d&target=report_export_pdf" % crid)
-        # Make sure this user has a role that can view the report
-        asm3.reports.check_view_permission(o.session, crid)
-        p = asm3.reports.get_criteria_params(dbo, crid, post)
-        disposition = asm3.configuration.pdf_inline(dbo) and "inline; filename=\"report.pdf\"" or "attachment; filename=\"report.pdf\""
-        self.content_type("application/pdf")
-        self.header("Content-Disposition", disposition)
-        return asm3.utils.html_to_pdf(dbo, asm3.reports.execute(dbo, crid, o.user, p))
-
-class report_images(JSONEndpoint):
-    url = "report_images"
-    
-    def controller(self, o):
-        images = asm3.dbfs.get_report_images(o.dbo)
-        asm3.al.debug("got %d extra images" % len(images), "code.report_images", o.dbo)
-        return { "rows": images }
-
-    def post_create(self, o):
-        asm3.dbfs.upload_report_image(o.dbo, o.post.data.filechooser)
-        self.reload_config()
-        self.redirect("report_images")
-
-    def post_delete(self, o):
-        for i in o.post["ids"].split(","):
-            if i != "": asm3.dbfs.delete_filepath(o.dbo, "/reports/" + i)
-        self.reload_config()
-
-    def post_rename(self, o):
-        asm3.dbfs.rename_file(o.dbo, "/reports", o.post["oldname"], o.post["newname"])
-
-class reports(JSONEndpoint):
-    url = "reports"
-    get_permissions = asm3.users.VIEW_REPORT
-
-    def controller(self, o):
-        dbo = o.dbo
-        reports = asm3.reports.get_reports(dbo)
-        header = asm3.reports.get_raw_report_header(dbo)
-        footer = asm3.reports.get_raw_report_footer(dbo)
-        asm3.al.debug("editing %d reports" % len(reports), "code.reports", dbo)
-        return {
-            "categories": "|".join(asm3.reports.get_categories(dbo)),
-            "recommended": asm3.reports.RECOMMENDED_REPORTS,
-            "header": header,
-            "footer": footer,
-            "roles": asm3.users.get_roles(dbo),
-            "additionalfields": asm3.additional.get_fields(dbo),
-            "animalflags": asm3.lookups.get_animal_flags(dbo),
-            "animaltypes": asm3.lookups.get_animal_types(dbo),
-            "donationtypes": asm3.lookups.get_donation_types(dbo),
-            "entryreasons": asm3.lookups.get_entryreasons(dbo),
-            "incidenttypes": asm3.lookups.get_incident_types(dbo),
-            "completedtypes": asm3.lookups.get_incident_completed_types(dbo),
-            "jurisdictions": asm3.lookups.get_jurisdictions(dbo),
-            "locations": asm3.lookups.get_internal_locations(dbo),
-            "paymentmethods": asm3.lookups.get_payment_methods(dbo),
-            "personflags": asm3.lookups.get_person_flags(dbo),
-            "sizes": asm3.lookups.get_sizes(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "testtypes": asm3.lookups.get_test_types(dbo),
-            "vaccinationtypes": asm3.lookups.get_vaccination_types(dbo),
-            "rows": reports
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_REPORT)
-        rid = asm3.reports.insert_report_from_form(o.dbo, o.user, o.post)
-        self.reload_config()
-        return rid
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_REPORT)
-        asm3.reports.update_report_from_form(o.dbo, o.user, o.post)
-        self.reload_config()
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_REPORT)
-        for rid in o.post.integer_list("ids"):
-            asm3.reports.delete_report(o.dbo, o.user, rid)
-        self.reload_config()
-
-    def post_sql(self, o):
-        self.check(asm3.users.USE_SQL_INTERFACE)
-        asm3.reports.check_sql(o.dbo, o.user, o.post["sql"])
-
-    def post_genhtml(self, o):
-        self.check(asm3.users.USE_SQL_INTERFACE)
-        return asm3.reports.generate_html(o.dbo, o.user, o.post["sql"])
-
-    def post_headfoot(self, o):
-        self.check(asm3.users.CHANGE_REPORT)
-        asm3.reports.set_raw_report_headerfooter(o.dbo, o.post["header"], o.post["footer"])
-
-    def post_smcomlist(self, o):
-        return asm3.utils.json(asm3.reports.get_smcom_reports_installable(o.dbo))
-
-    def post_smcominstall(self, o):
-        self.check(asm3.users.ADD_REPORT)
-        asm3.reports.install_smcom_reports(o.dbo, o.user, o.post.integer_list("ids"))
-        self.reload_config()
-
-class roles(JSONEndpoint):
-    url = "roles"
-    get_permissions = asm3.users.EDIT_USER
-    post_permissions = asm3.users.EDIT_USER
-
-    def controller(self, o):
-        roles = asm3.users.get_roles(o.dbo)
-        asm3.al.debug("editing %d roles" % len(roles), "code.roles", o.dbo)
-        return { "rows": roles }
-
-    def post_create(self, o):
-        asm3.users.insert_role_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        asm3.users.update_role_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        for rid in o.post.integer_list("ids"):
-            asm3.users.delete_role(o.dbo, o.user, rid)
-
-class search(JSONEndpoint):
-    url = "search"
-    
-    def controller(self, o):
-        q = o.post["q"]
-        results, timetaken, explain, sortname = asm3.search.search(o.dbo, o.session, q)
-        is_large_db = ""
-        if o.dbo.is_large_db: is_large_db = " (indexed only)"
-        asm3.al.debug("searched for '%s', got %d results in %s, sorted %s %s" % (q, len(results), timetaken, sortname, is_large_db), "code.search", o.dbo)
-        return {
-            "q": q,
-            "results": results,
-            "timetaken": str(round(timetaken, 2)),
-            "explain": explain,
-            "sortname": sortname
-        }
-
-class service(ASMEndpoint):
-    url = "service"
-    check_logged_in = False
-    session_cookie = False
-
-    def handle(self, o):
-        contenttype, client_ttl, cache_ttl, response = asm3.service.handler(o.post, PATH, self.remote_ip(), self.referer(), self.user_agent(), self.query())
-        if contenttype == "redirect":
-            self.redirect(response)
-        else:
-            self.content_type(contenttype)
-            self.cache_control(client_ttl, cache_ttl) 
-            self.header("Access-Control-Allow-Origin", "*") # CORS
-            return response
-
-    def content(self, o):
-        return self.handle(o)
-
-    def post_all(self, o):
-        return self.handle(o)
-
-class shelterview(JSONEndpoint):
-    url = "shelterview"
-    get_permissions = asm3.users.VIEW_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        animals = asm3.animal.get_shelterview_animals(dbo, o.locationfilter, o.siteid, o.visibleanimalids)
-        asm3.al.debug("got %d animals for shelterview" % (len(animals)), "code.shelterview", dbo)
-        return {
-            "animals": asm3.animal.get_animals_brief(animals),
-            "flags": asm3.lookups.get_animal_flags(dbo),
-            "fosterers": asm3.person.get_shelterview_fosterers(dbo, o.siteid),
-            "locations": asm3.lookups.get_internal_locations(dbo, o.locationfilter, o.siteid),
-            "perrow": asm3.configuration.main_screen_animal_link_max(dbo)
-        }
-
-    def post_movelocation(self, o):
-        self.check(asm3.users.CHANGE_ANIMAL)
-        asm3.animal.update_location_unit(o.dbo, o.user, o.post.integer("animalid"), o.post.integer("locationid"))
-
-    def post_moveunit(self, o):
-        self.check(asm3.users.CHANGE_ANIMAL)
-        asm3.animal.update_location_unit(o.dbo, o.user, o.post.integer("animalid"), o.post.integer("locationid"), o.post["unit"])
-
-    def post_movefoster(self, o):
-        self.check(asm3.users.ADD_MOVEMENT)
-        post = o.post
-        post.data["person"] = post["personid"]
-        post.data["animal"] = post["animalid"]
-        post.data["fosterdate"] = python2display(o.locale, now(o.dbo.timezone))
-        return asm3.movement.insert_foster_from_form(o.dbo, o.user, post)
-
-class smcom_my(ASMEndpoint):
-    url = "smcom_my"
-
-    def content(self, o):
-        if o.session.superuser == 1: asm3.smcom.go_smcom_my(o.dbo)
-
-class sql(JSONEndpoint):
-    url = "sql"
-    get_permissions = asm3.users.USE_SQL_INTERFACE
-    post_permissions = asm3.users.USE_SQL_INTERFACE
-
-    def controller(self, o):
-        asm3.al.debug("%s opened SQL interface" % o.user, "code.sql", o.dbo)
-        return {}
-
-    def post_exec(self, o):
-        sql = o.post["sql"].strip()
-        return self.exec_sql(o.dbo, o.user, sql)
-
-    def post_execfile(self, o):
-        sql = asm3.utils.bytes2str(o.post.filedata())
-        self.content_type("text/plain")
-        return self.exec_sql_from_file(o.dbo, o.user, sql)
-
-    def check_update_query(self, q):
-        """ Prevent updates or deletes to certain tables or columns to prevent
-            more savvy malicious users tampering via SQL Interface.
-            q is already stripped and converted to lower case by the exec_sql caller.
-            If one of our tamper proofed tables is touched, an Exception is raised
-            and the query not run.
-            This will also throw an error if we have an update or delete query
-            without a where clause to prevent people doing something daft
-            (easy to get around with WHERE 1=1 or something)
-        """
-        for t in ( "audittrail", "deletion", "signaturehash" ):
-            if q.find(t) != -1:
-                raise Exception("Forbidden: %s" % q)
-        if q.find("where") == -1 and (q.startswith("delete") or q.startswith("update")):
-            raise Exception("Forbidden: DELETE or UPDATE")
-
-    def exec_sql(self, dbo, user, sql):
-        l = dbo.locale
-        rowsaffected = 0
-        try:
-            for q in dbo.split_queries(sql):
-                if q == "": continue
-                q = self.substitute_report_tokens(dbo, user, q)
-                ql = q.lower()
-                asm3.al.info("%s query: %s" % (user, q), "code.sql", dbo)
-                if ql.startswith("select") or ql.startswith("show"):
-                    return asm3.html.table(dbo.query(q))
-                elif ql.startswith("insert"):
-                    rowsaffected += dbo.execute(q)
-                else:
-                    self.check_update_query(ql)
-                    rowsaffected += dbo.execute(q)
-            asm3.configuration.db_view_seq_version(dbo, "0")
-            return _("{0} rows affected.", l).format(rowsaffected)
-        except Exception as err:
-            asm3.al.error("%s" % str(err), "code.sql", dbo)
-            raise asm3.utils.ASMValidationError(str(err))
-
-    def exec_sql_from_file(self, dbo, user, sql):
-        l = dbo.locale
-        output = []
-        for q in dbo.split_queries(sql):
-            try:
-                if q == "": continue
-                q = self.substitute_report_tokens(dbo, user, q)
-                ql = q.lower()
-                asm3.al.info("%s query: %s" % (user, q), "code.sql", dbo)
-                if ql.startswith("select") or ql.startswith("show"):
-                    output.append(str(dbo.query(q)))
-                else:
-                    self.check_update_query(ql)
-                    rowsaffected = dbo.execute(q)
-                    output.append(_("{0} rows affected.", l).format(rowsaffected))
-            except Exception as err:
-                asm3.al.error("%s" % str(err), "code.sql", dbo)
-                output.append("ERROR: %s" % str(err))
-        asm3.configuration.db_view_seq_version(dbo, "0")
-        return "\n\n".join(output)
-
-    def substitute_report_tokens(self, dbo, user, q):
-        """ Substitutes any of our report tokens that might be in query q """
-        # Substitute CURRENT_DATE-X tokens
-        for day in asm3.utils.regex_multi(r"\$CURRENT_DATE\-(.+?)\$", q):
-            d = dbo.today(offset=asm3.utils.cint(day)*-1)
-            q = q.replace("$CURRENT_DATE-%s$" % day, dbo.sql_date(d, includeTime=False, wrapParens=False))
-        # Substitute CURRENT_DATE+X tokens
-        for day in asm3.utils.regex_multi(r"\$CURRENT_DATE\+(.+?)\$", q):
-            d = dbo.today(offset=asm3.utils.cint(day))
-            q = q.replace("$CURRENT_DATE+%s$" % day, dbo.sql_date(d, includeTime=False, wrapParens=False))
-        # straight tokens
-        q = q.replace("$CURRENT_DATE$", dbo.sql_date(dbo.now(), includeTime=False, wrapParens=False))
-        q = q.replace("$USER$", user)
-        q = q.replace("$DATABASENAME$", dbo.database)
-        return q
-
-class sql_dump(ASMEndpoint):
-    url = "sql_dump"
-    get_permissions = asm3.users.USE_SQL_INTERFACE
-
-    def content(self, o):
-        l = o.locale
-        dbo = o.dbo
-        mode = o.post["mode"]
-        self.content_type("text/plain")
-        if mode == "dumpsql":
-            asm3.al.info("%s executed SQL database dump" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"dump.sql\"")
-            return asm3.dbupdate.dump(dbo) # generator
-        if mode == "dumpsqlmedia":
-            asm3.al.info("%s executed SQL database dump (base64/media)" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"media.sql\"")
-            return asm3.dbupdate.dump_dbfs_base64(dbo) # generator
-        if mode == "dumpddlmysql":
-            asm3.al.info("%s executed DDL dump MySQL" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"ddl_mysql.sql\"")
-            dbo2 = asm3.db.get_dbo("MYSQL")
-            dbo2.locale = dbo.locale
-            return asm3.dbupdate.sql_structure(dbo2)
-            return asm3.dbupdate.sql_default_data(dbo2).replace("|=", ";")
-        if mode == "dumpddlpostgres":
-            asm3.al.info("%s executed DDL dump PostgreSQL" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"ddl_postgresql.sql\"")
-            dbo2 = asm3.db.get_dbo("POSTGRESQL")
-            dbo2.locale = dbo.locale
-            return asm3.dbupdate.sql_structure(dbo2)
-            return asm3.dbupdate.sql_default_data(dbo2).replace("|=", ";")
-        if mode == "dumpddldb2":
-            asm3.al.info("%s executed DDL dump DB2" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"ddl_db2.sql\"")
-            dbo2 = asm3.db.get_dbo("DB2")
-            dbo2.locale = dbo.locale
-            return asm3.dbupdate.sql_structure(dbo2)
-            return asm3.dbupdate.sql_default_data(dbo2).replace("|=", ";")
-        elif mode == "dumpsqlasm2":
-            # ASM2_COMPATIBILITY
-            asm3.al.info("%s executed SQL database dump (ASM2 HSQLDB)" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"asm2.sql\"")
-            return asm3.dbupdate.dump_hsqldb(dbo) # generator
-        elif mode == "dumpsqlasm2nomedia":
-            # ASM2_COMPATIBILITY
-            asm3.al.info("%s executed SQL database dump (ASM2 HSQLDB, without media)" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"asm2.sql\"")
-            return asm3.dbupdate.dump_hsqldb(dbo, includeDBFS = False) # generator
-        elif mode == "animalcsv":
-            asm3.al.debug("%s executed CSV animal dump" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"animal.csv\"")
-            rows = asm3.animal.get_animal_find_advanced(dbo, { "logicallocation" : "all", "filter" : "includedeceased,includenonshelter" })
-            asm3.additional.append_to_results(dbo, rows, "animal")
-            return asm3.utils.csv(l, rows)
-        elif mode == "mediacsv":
-            asm3.al.debug("%s executed CSV media dump" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"media.csv\"")
-            return asm3.utils.csv(l, asm3.media.get_media_export(dbo))
-        elif mode == "medicalcsv":
-            asm3.al.debug("%s executed CSV medical dump" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"medical.csv\"")
-            return asm3.utils.csv(l, asm3.medical.get_medical_export(dbo))
-        elif mode == "personcsv":
-            asm3.al.debug("%s executed CSV person dump" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"person.csv\"")
-            rows = asm3.person.get_person_find_simple(dbo, "", o.user, includeStaff=True, includeVolunteers=True)
-            asm3.additional.append_to_results(dbo, rows, "person")
-            return asm3.utils.csv(l, rows)
-        elif mode == "incidentcsv":
-            asm3.al.debug("%s executed CSV incident dump" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"incident.csv\"")
-            rows = asm3.animalcontrol.get_animalcontrol_find_advanced(dbo, { "filter" : "" }, 0)
-            asm3.additional.append_to_results(dbo, rows, "incident")
-            return asm3.utils.csv(l, rows)
-        elif mode == "licencecsv":
-            asm3.al.debug("%s executed CSV licence dump" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"licence.csv\"")
-            return asm3.utils.csv(l, asm3.financial.get_licence_find_simple(dbo, ""))
-        elif mode == "paymentcsv":
-            asm3.al.debug("%s executed CSV payment dump" % o.user, "code.sql", dbo)
-            self.header("Content-Disposition", "attachment; filename=\"payment.csv\"")
-            return asm3.utils.csv(l, asm3.financial.get_donations(dbo, "m10000"))
-
-class staff_rota(JSONEndpoint):
-    url = "staff_rota"
-    get_permissions = asm3.users.VIEW_STAFF_ROTA
-
-    def controller(self, o):
-        dbo = o.dbo
-        startdate = o.post.date("start")
-        if startdate is None: startdate = monday_of_week(dbo.today())
-        rota = asm3.person.get_rota(dbo, startdate, add_days(startdate, 7))
-        asm3.al.debug("got %d rota items" % len(rota), "code.staff_rota", dbo)
-        return {
-            "name": "staff_rota",
-            "rows": rota,
-            "flags": asm3.lookups.get_person_flags(dbo),
-            "flagsel": o.post["flags"],
-            "startdate": startdate,
-            "prevdate": subtract_days(startdate, 7),
-            "nextdate": add_days(startdate, 7),
-            "rotatypes": asm3.lookups.get_rota_types(dbo),
-            "worktypes": asm3.lookups.get_work_types(dbo),
-            "staff": asm3.person.get_staff_volunteers(dbo, o.siteid)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_ROTA)
-        return asm3.person.insert_rota_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_ROTA)
-        asm3.person.update_rota_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_ROTA)
-        for rid in o.post.integer_list("ids"):
-            asm3.person.delete_rota(o.dbo, o.user, rid)
-
-    def post_deleteweek(self, o):
-        self.check(asm3.users.DELETE_ROTA)
-        asm3.person.delete_rota_week(o.dbo, o.user, o.post.date("startdate"))
-
-    def post_clone(self, o):
-        self.check(asm3.users.ADD_ROTA)
-        startdate = o.post.date("startdate")
-        newdate = o.post.date("newdate")
-        flags = o.post["flags"]
-        asm3.person.clone_rota_week(o.dbo, o.user, startdate, newdate, flags)
-
-class stocklevel(JSONEndpoint):
-    url = "stocklevel"
-    get_permissions = asm3.users.VIEW_STOCKLEVEL
-
-    def controller(self, o):
-        dbo = o.dbo
-        if o.post.integer("viewlocation") == -1:
-            levels = asm3.stock.get_stocklevels_depleted(dbo)
-        else:
-            levels = asm3.stock.get_stocklevels(dbo, o.post.integer("viewlocation"))
-        asm3.al.debug("got %d stock levels" % len(levels), "code.stocklevel", dbo)
-        return {
-            "stocklocations": asm3.lookups.get_stock_locations(dbo),
-            "stocknames": "|".join(asm3.stock.get_stock_names(dbo)),
-            "stockusagetypes": asm3.lookups.get_stock_usage_types(dbo),
-            "stockunits": "|".join(asm3.stock.get_stock_units(dbo)),
-            "newlevel": o.post.integer("newlevel") == 1,
-            "sortexp": o.post.integer("sortexp") == 1,
-            "rows": levels
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_STOCKLEVEL)
-        for dummy in range(0, o.post.integer("quantity")):
-            asm3.stock.insert_stocklevel_from_form(o.dbo, o.post, o.user)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_STOCKLEVEL)
-        asm3.stock.update_stocklevel_from_form(o.dbo, o.post, o.user)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_STOCKLEVEL)
-        for sid in o.post.integer_list("ids"):
-            asm3.stock.delete_stocklevel(o.dbo, o.user, sid)
-
-    def post_lastname(self, o):
-        self.check(asm3.users.VIEW_STOCKLEVEL)
-        return asm3.stock.get_last_stock_with_name(o.dbo, o.post["name"])
-
-class systemusers(JSONEndpoint):
-    url = "systemusers"
-    js_module = "users"
-    get_permissions = asm3.users.EDIT_USER
-
-    def controller(self, o):
-        dbo = o.dbo
-        user = asm3.users.get_users(dbo)
-        roles = asm3.users.get_roles(dbo)
-        asm3.al.debug("editing %d system users" % len(user), "code.systemusers", dbo)
-        return {
-            "rows": user,
-            "roles": roles,
-            "internallocations": asm3.lookups.get_internal_locations(dbo),
-            "sites": asm3.lookups.get_sites(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_USER)
-        return asm3.users.insert_user_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.EDIT_USER)
-        asm3.users.update_user_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.EDIT_USER)
-        for uid in o.post.integer_list("ids"):
-            asm3.users.delete_user(o.dbo, o.user, uid)
-
-    def post_reset(self, o):
-        self.check(asm3.users.EDIT_USER)
-        for uid in o.post.integer_list("ids"):
-            asm3.users.reset_password(o.dbo, uid, o.post["password"])
-
-class task(JSONEndpoint):
-    url = "task"
-
-    def controller(self, o):
-        return { }
-   
-    def post_poll(self, o):
-        return "%s|%d|%s|%s" % (asm3.asynctask.get_task_name(o.dbo), asm3.asynctask.get_progress_percent(o.dbo), asm3.asynctask.get_last_error(o.dbo), asm3.asynctask.get_return_value(o.dbo))
-
-    def post_stop(self, o):
-        asm3.asynctask.set_cancel(o.dbo, True)
-
-class test(JSONEndpoint):
-    url = "test"
-    get_permissions = asm3.users.VIEW_TEST
-
-    def controller(self, o):
-        dbo = o.dbo
-        offset = o.post["offset"]
-        if offset == "": offset = "m365"
-        test = asm3.medical.get_tests_outstanding(dbo, offset, o.locationfilter, o.siteid, o.visibleanimalids)
-        asm3.al.debug("got %d tests" % len(test), "code.test", dbo)
-        return {
-            "name": "test",
-            "newtest": o.post.integer("newtest") == 1,
-            "rows": test,
-            "stockitems": asm3.stock.get_stock_items(dbo),
-            "stockusagetypes": asm3.lookups.get_stock_usage_types(dbo),
-            "testtypes": asm3.lookups.get_test_types(dbo),
-            "testresults": asm3.lookups.get_test_results(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_TEST)
-        return asm3.medical.insert_test_from_form(o.dbo, o.user, o.post)
-
-    def post_createbulk(self, o):
-        self.check(asm3.users.ADD_TEST)
-        for animalid in o.post.integer_list("animals"):
-            o.post.data["animal"] = str(animalid)
-            asm3.medical.insert_test_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_TEST)
-        asm3.medical.update_test_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_TEST)
-        for vid in o.post.integer_list("ids"):
-            asm3.medical.delete_test(o.dbo, o.user, vid)
-
-    def post_perform(self, o):
-        self.check(asm3.users.CHANGE_TEST)
-        newdate = o.post.date("newdate")
-        retestdate = o.post.date("retest")
-        reschedulecomments = o.post["usagecomments"]
-        vet = o.post.integer("givenvet")
-        testresult = o.post.integer("testresult")
-        for vid in o.post.integer_list("ids"):
-            asm3.medical.complete_test(o.dbo, o.user, vid, newdate, testresult, vet)
-            if retestdate is not None:
-                asm3.medical.reschedule_test(o.dbo, o.user, vid, retestdate, reschedulecomments)
-        if o.post.integer("item") != -1:
-            asm3.stock.deduct_stocklevel_from_form(o.dbo, o.user, o.post)
-
-class timeline(JSONEndpoint):
-    url = "timeline"
-    get_permissions = asm3.users.VIEW_ANIMAL
-
-    def controller(self, o):
-        dbo = o.dbo
-        evts = asm3.animal.get_timeline(dbo, 500)
-        asm3.al.debug("timeline events, run by %s, got %d events" % (o.user, len(evts)), "code.timeline", dbo)
-        return {
-            "recent": evts,
-            "resultcount": len(evts)
-        }
-
-class transport(JSONEndpoint):
-    url = "transport"
-    get_permissions = asm3.users.VIEW_TRANSPORT
-
-    def controller(self, o):
-        dbo = o.dbo
-        transports = asm3.movement.get_active_transports(dbo)
-        asm3.al.debug("got %d transports" % len(transports), "code.transport", dbo)
-        return {
-            "name": "transport",
-            "statuses": asm3.lookups.get_transport_statuses(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "transport"),
-            "transporttypes": asm3.lookups.get_transport_types(dbo),
-            "rows": transports
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_TRANSPORT)
-        return asm3.movement.insert_transport_from_form(o.dbo, o.user, o.post)
-
-    def post_createbulk(self, o):
-        self.check(asm3.users.ADD_TRANSPORT)
-        for animalid in o.post.integer_list("animals"):
-            o.post.data["animal"] = str(animalid)
-            asm3.movement.insert_transport_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_TRANSPORT)
-        asm3.movement.update_transport_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_TRANSPORT)
-        for mid in o.post.integer_list("ids"):
-            asm3.movement.delete_transport(o.dbo, o.user, mid)
-
-    def post_setstatus(self, o):
-        self.check(asm3.users.CHANGE_TRANSPORT)
-        asm3.movement.update_transport_statuses(o.dbo, o.user, o.post.integer_list("ids"), o.post.integer("newstatus"))
-
-class traploan(JSONEndpoint):
-    url = "traploan"
-    get_permissions = asm3.users.VIEW_TRAPLOAN
-
-    def controller(self, o):
-        dbo = o.dbo
-        traploans = []
-        offset = o.post["offset"]
-        if offset == "" or offset == "a":
-            traploans = asm3.animalcontrol.get_active_traploans(dbo)
-        else:
-            traploans = asm3.animalcontrol.get_returned_traploans(dbo, offset)
-        asm3.al.debug("got %d trap loans" % len(traploans), "code.traploan", dbo)
-        return {
-            "name": "traploan",
-            "rows": traploans,
-            "traptypes": asm3.lookups.get_trap_types(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_TRAPLOAN)
-        return asm3.animalcontrol.insert_traploan_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_TRAPLOAN)
-        asm3.animalcontrol.update_traploan_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_TRAPLOAN)
-        for lid in o.post.integer_list("ids"):
-            asm3.animalcontrol.delete_traploan(o.dbo, o.user, lid)
-
-class vaccination(JSONEndpoint):
-    url = "vaccination"
-    get_permissions = asm3.users.VIEW_VACCINATION
-
-    def controller(self, o):
-        dbo = o.dbo
-        offset = o.post["offset"]
-        if offset == "": offset = "m365"
-        vacc = asm3.medical.get_vaccinations_outstanding(dbo, offset, o.locationfilter, o.siteid, o.visibleanimalids)
-        asm3.al.debug("got %d vaccinations" % len(vacc), "code.vaccination", dbo)
-        return {
-            "name": "vaccination",
-            "newvacc": o.post.integer("newvacc") == 1,
-            "rows": vacc,
-            "batches": asm3.medical.get_batch_for_vaccination_types(dbo),
-            "manufacturers": "|".join(asm3.medical.get_vacc_manufacturers(dbo)),
-            "stockitems": asm3.stock.get_stock_items(dbo),
-            "stockusagetypes": asm3.lookups.get_stock_usage_types(dbo),
-            "users": asm3.users.get_users(dbo),
-            "vaccinationtypes": asm3.lookups.get_vaccination_types(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_VACCINATION)
-        return asm3.medical.insert_vaccination_from_form(o.dbo, o.user, o.post)
-
-    def post_createbulk(self, o):
-        self.check(asm3.users.ADD_VACCINATION)
-        for animalid in o.post.integer_list("animals"):
-            o.post.data["animal"] = str(animalid)
-            asm3.medical.insert_vaccination_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_VACCINATION)
-        asm3.medical.update_vaccination_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_VACCINATION)
-        for vid in o.post.integer_list("ids"):
-            asm3.medical.delete_vaccination(o.dbo, o.user, vid)
-
-    def post_given(self, o):
-        self.check(asm3.users.BULK_COMPLETE_VACCINATION)
-        post = o.post
-        newdate = post.date("newdate")
-        rescheduledate = post.date("rescheduledate")
-        reschedulecomments = post["reschedulecomments"]
-        givenexpires = post.date("givenexpires")
-        givenbatch = post["givenbatch"]
-        givenmanufacturer = post["givenmanufacturer"]
-        givenby = post["givenby"]
-        givenrabiestag = post["givenrabiestag"]
-        vet = post.integer("givenvet")
-        for vid in post.integer_list("ids"):
-            asm3.medical.complete_vaccination(o.dbo, o.user, vid, newdate, givenby, vet, givenexpires, givenbatch, givenmanufacturer, givenrabiestag)
-            if rescheduledate is not None:
-                asm3.medical.reschedule_vaccination(o.dbo, o.user, vid, rescheduledate, reschedulecomments)
-            if post.integer("item") != -1:
-                asm3.medical.update_vaccination_batch_stock(o.dbo, o.user, vid, post.integer("item"))
-        if post.integer("item") != -1:
-            asm3.stock.deduct_stocklevel_from_form(o.dbo, o.user, post)
-
-    def post_required(self, o):
-        self.check(asm3.users.BULK_COMPLETE_VACCINATION)
-        newdate = o.post.date("newdate")
-        for vid in o.post.integer_list("ids"):
-            asm3.medical.update_vaccination_required(o.dbo, o.user, vid, newdate)
-
-class voucher(JSONEndpoint):
-    url = "voucher"
-    js_module = "vouchers"
-    get_permissions = asm3.users.VIEW_VOUCHER
-
-    def controller(self, o):
-        dbo = o.dbo
-        offset = o.post["offset"]
-        if offset == "": offset = "i31"
-        vouchers = asm3.financial.get_vouchers(dbo, offset)
-        asm3.al.debug("got %d vouchers for %s" % (len(vouchers), offset), "code.person_vouchers", dbo)
-        return {
-            "name": "voucher",
-            "rows": vouchers,
-            "templates": asm3.template.get_document_templates(dbo, "voucher"),
-            "vouchertypes": asm3.lookups.get_voucher_types(dbo)
-        }
-
-    def post_create(self, o):
-        self.check(asm3.users.ADD_VOUCHER)
-        return asm3.financial.insert_voucher_from_form(o.dbo, o.user, o.post)
-
-    def post_update(self, o):
-        self.check(asm3.users.CHANGE_VOUCHER)
-        asm3.financial.update_voucher_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_VOUCHER)
-        for vid in o.post.integer_list("ids"):
-            asm3.financial.delete_voucher(o.dbo, o.user, vid)
-
-class waitinglist(JSONEndpoint):
-    url = "waitinglist"
-    get_permissions = asm3.users.VIEW_WAITING_LIST
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.waitinglist.get_waitinglist_by_id(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        recname = "%s %s" % (a.OWNERNAME, a.SPECIESNAME)
-        if asm3.configuration.audit_on_view_record(dbo): asm3.audit.view_record(dbo, o.user, "animalwaitinglist", a["ID"], recname)
-        asm3.al.debug("opened waiting list %s" % recname, "code.waitinglist", dbo)
-        return {
-            "animal": a,
-            "additional": asm3.additional.get_additional_fields(dbo, a["ID"], "waitinglist"),
-            "audit": self.checkb(asm3.users.VIEW_AUDIT_TRAIL) and asm3.audit.get_audit_for_link(dbo, "animalwaitinglist", a["ID"]) or [],
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "sizes": asm3.lookups.get_sizes(dbo),
-            "species": asm3.lookups.get_species(dbo),
-            "urgencies": asm3.lookups.get_urgencies(dbo),
-            "templates": asm3.template.get_document_templates(dbo, "waitinglist"),
-            "templatesemail": asm3.template.get_document_templates(dbo, "email"),
-            "tabcounts": asm3.waitinglist.get_satellite_counts(dbo, a["ID"])[0]
-        }
-
-    def post_save(self, o):
-        self.check(asm3.users.CHANGE_WAITING_LIST)
-        asm3.waitinglist.update_waitinglist_from_form(o.dbo, o.post, o.user)
-
-    def post_email(self, o):
-        self.check(asm3.users.EMAIL_PERSON)
-        asm3.waitinglist.send_email_from_form(o.dbo, o.user, o.post)
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_WAITING_LIST)
-        asm3.waitinglist.delete_waitinglist(o.dbo, o.user, o.post.integer("id"))
-
-    def post_toanimal(self, o):
-        self.check(asm3.users.ADD_ANIMAL)
-        return str(asm3.waitinglist.create_animal(o.dbo, o.user, o.post.integer("id")))
-
-class waitinglist_diary(JSONEndpoint):
-    url = "waitinglist_diary"
-    js_module = "diary"
-    get_permissions = asm3.users.VIEW_DIARY
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.waitinglist.get_waitinglist_by_id(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        diaries = asm3.diary.get_diaries(dbo, asm3.diary.WAITINGLIST, o.post.integer("id"))
-        asm3.al.debug("got %d diaries" % len(diaries), "code.waitinglist_diary", dbo)
-        return {
-            "rows": diaries,
-            "animal": a,
-            "tabcounts": asm3.waitinglist.get_satellite_counts(dbo, a["WLID"])[0],
-            "name": "waitinglist_diary",
-            "linkid": a["WLID"],
-            "linktypeid": asm3.diary.WAITINGLIST,
-            "forlist": asm3.users.get_users_and_roles(dbo)
-        }
-
-class waitinglist_log(JSONEndpoint):
-    url = "waitinglist_log"
-    js_module = "log"
-    get_permissions = asm3.users.VIEW_LOG
-
-    def controller(self, o):
-        dbo = o.dbo
-        logfilter = o.post.integer("filter")
-        if logfilter == 0: logfilter = asm3.configuration.default_log_filter(dbo)
-        a = asm3.waitinglist.get_waitinglist_by_id(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        logs = asm3.log.get_logs(dbo, asm3.log.WAITINGLIST, o.post.integer("id"), logfilter)
-        asm3.al.debug("got %d logs" % len(logs), "code.waitinglist_diary", dbo)
-        return {
-            "name": "waitinglist_log",
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.log.WAITINGLIST,
-            "filter": logfilter,
-            "rows": logs,
-            "animal": a,
-            "tabcounts": asm3.waitinglist.get_satellite_counts(dbo, a["WLID"])[0],
-            "logtypes": asm3.lookups.get_log_types(dbo)
-        }
-
-class waitinglist_media(JSONEndpoint):
-    url = "waitinglist_media"
-    js_module = "media"
-    get_permissions = asm3.users.VIEW_MEDIA
-
-    def controller(self, o):
-        dbo = o.dbo
-        a = asm3.waitinglist.get_waitinglist_by_id(dbo, o.post.integer("id"))
-        if a is None: self.notfound()
-        m = asm3.media.get_media(dbo, asm3.media.WAITINGLIST, o.post.integer("id"))
-        asm3.al.debug("got %d media" % len(m), "code.waitinglist_media", dbo)
-        return {
-            "media": m,
-            "animal": a,
-            "tabcounts": asm3.waitinglist.get_satellite_counts(dbo, a["WLID"])[0],
-            "showpreferred": True,
-            "canwatermark": False,
-            "linkid": o.post.integer("id"),
-            "linktypeid": asm3.media.WAITINGLIST,
-            "logtypes": asm3.lookups.get_log_types(dbo),
-            "name": self.url,
-            "resizeimagespec": asm3.utils.iif(RESIZE_IMAGES_DURING_ATTACH, RESIZE_IMAGES_SPEC, ""),
-            "templates": asm3.template.get_document_templates(dbo, "email"),
-            "sigtype": ELECTRONIC_SIGNATURES
-        }
-
-class waitinglist_new(JSONEndpoint):
-    url = "waitinglist_new"
-    get_permissions = asm3.users.ADD_WAITING_LIST
-    post_permissions = asm3.users.ADD_WAITING_LIST
-
-    def controller(self, o):
-        dbo = o.dbo
-        return {
-            "species": asm3.lookups.get_species(dbo),
-            "additional": asm3.additional.get_additional_fields(dbo, 0, "waitinglist"),
-            "sizes": asm3.lookups.get_sizes(dbo),
-            "urgencies": asm3.lookups.get_urgencies(dbo)
-        }
-
-    def post_all(self, o):
-        return str(asm3.waitinglist.insert_waitinglist_from_form(o.dbo, o.post, o.user))
-
-class waitinglist_results(JSONEndpoint):
-    url = "waitinglist_results"
-    get_permissions = asm3.users.VIEW_WAITING_LIST
-
-    def controller(self, o):
-        dbo = o.dbo
-        post = o.post
-        priorityfloor = asm3.utils.iif(post["priorityfloor"] == "", dbo.query_int("SELECT MAX(ID) FROM lkurgency"), post.integer("priorityfloor"))
-        speciesfilter = asm3.utils.iif(post["species"] == "", -1, post.integer("species"))
-        sizefilter = asm3.utils.iif(post["size"] == "", -1, post.integer("size"))
-        rows = asm3.waitinglist.get_waitinglist(dbo, priorityfloor, speciesfilter, sizefilter,
-            post["addresscontains"], post.integer("includeremoved"), post["namecontains"], post["descriptioncontains"])
-        add = None
-        if len(rows) > 0: 
-            add = asm3.additional.get_additional_fields_ids(dbo, rows, "waitinglist")
-        asm3.al.debug("found %d results" % (len(rows)), "code.waitinglist_results", dbo)
-        return {
-            "rows": rows,
-            "additional": add, 
-            "seladdresscontains": post["addresscontains"],
-            "seldescriptioncontains": post["descriptioncontains"],
-            "selincluderemoved": post.integer("includeremoved"),
-            "selnamecontains": post["namecontains"],
-            "selpriorityfloor": priorityfloor,
-            "selspecies": speciesfilter,
-            "selsize": sizefilter,
-            "species": asm3.lookups.get_species(dbo),
-            "sizes": asm3.lookups.get_sizes(dbo),
-            "urgencies": asm3.lookups.get_urgencies(dbo),
-            "yesno": asm3.lookups.get_yesno(dbo)
-        }
-
-    def post_delete(self, o):
-        self.check(asm3.users.DELETE_WAITING_LIST)
-        for wid in o.post.integer_list("ids"):
-            asm3.waitinglist.delete_waitinglist(o.dbo, o.user, wid)
-
-    def post_complete(self, o):
-        self.check(asm3.users.CHANGE_WAITING_LIST)
-        for wid in o.post.integer_list("ids"):
-            asm3.waitinglist.update_waitinglist_remove(o.dbo, o.user, wid)
-
-    def post_highlight(self, o):
-        self.check(asm3.users.CHANGE_WAITING_LIST)
-        for wid in o.post.integer_list("ids"):
-            asm3.waitinglist.update_waitinglist_highlight(o.dbo, wid, o.post["himode"])
-
-
-
-# List of routes constructed from class definitions
-routes = []
-
-# Setup the WSGI application object and session with mappings
-app = web.application(generate_routes(), globals(), autoreload=AUTORELOAD)
-app.notfound = asm_404
-if EMAIL_ERRORS:
-    app.internalerror = asm_500_email
-session = session_manager()
-
-# Choose startup mode
-if DEPLOYMENT_TYPE == "wsgi":
-    application = app.wsgifunc()
-elif DEPLOYMENT_TYPE == "fcgi":
-    web.wsgi.runwsgi = lambda func, addr=None: web.wsgi.runfcgi(func, addr)
-    web.runwsgi = web.runfcgi
-
-if __name__ == "__main__":
-    app.run()
-
Index: src/asm3/i18n.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nimport datetime\nimport json\nimport time\n\n# flake8: noqa - we have a lot of locales and this is convenient\nfrom asm3.locales import *\n\n\nVERSION = \"46u [Sun 24 Jul 13:32:00 BST 2022]\"\nBUILD = \"07241332\"\n\nDMY = ( \"%d/%m/%Y\", \"%d/%m/%y\" )\nHDMY = ( \"%d-%m-%Y\", \"%d-%m-%y\" )\nDDMY = ( \"%d.%m.%Y\", \"%d.%m.%y\" )\nMDY = ( \"%m/%d/%Y\", \"%m/%d/%y\" )\nYMD = ( \"%Y/%m/%d\", \"%y/%m/%d\" )\nDYMD = ( \"%Y.%m.%d\", \"%y.%m.%d\" )\nHYMD = ( \"%Y-%m-%d\", \"%y-%m-%d\" )\nDOLLAR = \"$\"\nEURO = \"&#x20ac;\"\nPOUND = \"&pound;\"\nYEN = \"&yen;\"\nCURRENCY_PREFIX = \"p\"\nCURRENCY_SUFFIX = \"s\"\nDST_US = \"6-203-111\"\nDST_UK = \"6-L03-L10\"\nDST_AU = \"6-110-104\"\n\ndef PLURAL_ENGLISH(n):\n    \"\"\" gettext plural function for English/Latin languages \"\"\"\n    if n == 1: return 0\n    return 1\n\ndef PLURAL_HUNGARIAN(n):\n    \"\"\" gettext style plural function for Hungarian \n        Hungarian always uses the singular unless the element appears\n        by itself (which it never does for the purposes of ngettext)\n        so always return the singular\n    \"\"\"\n    return 0\n\ndef PLURAL_POLISH(n):\n    \"\"\" gettext style plural function for Polish \"\"\"\n    if n == 1: return 0\n    if n % 10 >= 2 and n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20): return 1\n    return 2\n\ndef PLURAL_SLAVIC(n):\n    \"\"\" gettext style plural function for Slavic languages,\n        Russian, Ukrainian, Belarusian, Serbian, Croatian\n    \"\"\"\n    if n % 10 == 1 and n % 100 != 11: return 0\n    if n % 10 >= 2 and n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20): return 1\n    return 2\n\n# Maps of locale to currency/date format - this is a map of lists instead of maps\n# to try and keep things readable and on one line\nLM_LANGUAGE = 0\nLM_COUNTRY = 1\nLM_DATEFORMAT = 2\nLM_CURRENCY_SYMBOL = 3\nLM_PLURAL_FUNCTION = 4\nLM_CURRENCY_POSITION = 5\nLM_CURRENCY_DECIMAL_PLACES = 6\nLM_CURRENCY_DECIMAL_MARK = 7\nLM_CURRENCY_DIGIT_GROUPING = 8\nLM_DST = 9\nlocale_maps = {\n    \"en\":       ( \"English\", \"United States\", MDY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_US ),\n    \"en_GB\":    ( \"English\", \"Great Britain\", DMY, POUND, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"en_AU\":    ( \"English\", \"Australia\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_AU ),\n    \"en_AE\":    ( \"English\", \"United Arab Emirates\", DMY, \"&#x62f;&#x2e;&#x625;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\"),\n    \"en_AW\":    ( \"English\", \"Aruba\", DMY, \"Awg.\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_BE\":    ( \"English\", \"Belgium\", DMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"en_BM\":    ( \"English\", \"Bermuda\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"6-203-111\" ),\n    \"en_BG\":    ( \"English\", \"Bulgaria\", HYMD, \"&#x043b;&#x0432;\", PLURAL_ENGLISH, CURRENCY_SUFFIX, 2, \",\", \" \", DST_UK),\n    \"en_BH\":    ( \"English\", \"Bahrain\", MDY, \"BD\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\", \"\" ),\n    \"en_BQ\":    ( \"English\", \"Bonaire\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_CA\":    ( \"English\", \"Canada\", MDY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_US ),\n    \"en_CH\":    ( \"English\", \"Switzerland\", DDMY, \"CHF\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"en_CN\":    ( \"English\", \"China\", HYMD, YEN, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_CR\":    ( \"English\", \"Costa Rica\", DMY, \"&#8353;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_CY\":    ( \"English\", \"Cyprus\", DMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"en_ES\":    ( \"English\", \"Spain\", DMY, EURO, PLURAL_ENGLISH, CURRENCY_SUFFIX, 2, \",\", \" \", DST_UK ),\n    \"en_HK\":    ( \"English\", \"Hong Kong\", HDMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_KH\":    ( \"English\", \"Cambodia\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_SUFFIX, 2, \".\", \",\", \"\" ),\n    \"en_KW\":    ( \"English\", \"Kuwait\", DMY, \"KD\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_KY\":    ( \"English\", \"Cayman Islands\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_IE\":    ( \"English\", \"Ireland\", DMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"en_IN\":    ( \"English\", \"India\", DMY, \"&#8377;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\"),\n    \"en_IL\":    ( \"English\", \"Israel\", DMY, \"&#x20aa;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"en_JP\":    ( \"English\", \"Japan\", YMD, \"&yen;\", PLURAL_ENGLISH, CURRENCY_SUFFIX, 0, \".\", \",\", \"\" ),\n    \"en_KE\":    ( \"English\", \"Kenya\", DMY, \"Ksh\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_LB\":    ( \"English\", \"Lebanon\", MDY, \"L&pound;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"en_LU\":    ( \"English\", \"Luxembourg\", DDMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"en_MU\":    ( \"English\", \"Mauritius\", DMY, \"&#8360;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\"),\n    \"en_MY\":    ( \"English\", \"Malaysia\", DMY, \"RM\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_MX\":    ( \"English\", \"Mexico\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"6-104-L10\" ),\n    \"en_MZ\":    ( \"English\", \"Mozambique\", DMY, \"MT\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_NA\":    ( \"English\", \"Namibia\", YMD, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", \"\"),\n    \"en_PH\":    ( \"English\", \"Philippines\", MDY, \"&#x20b1;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\"),\n    \"en_QA\":    ( \"English\", \"Qatar\", DMY, \"QR\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\"),\n    \"en_NZ\":    ( \"English\", \"New Zealand\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"6-L09-104\" ),\n    \"en_TH\":    ( \"English\", \"Thailand\", DMY, \"&#x0e3f;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_TW\":    ( \"English\", \"Taiwan\", YMD, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 0, \".\", \",\", \"\"),\n    \"en_TW2\":   ( \"English\", \"Taiwan $0.00\", YMD, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_TZ\":    ( \"English\", \"Tanzania\", DMY, \"Tsh\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_VN\":    ( \"English\", \"Vietnam\", DMY, \"&#8363;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"en_ZA\":    ( \"English\", \"South Africa\", YMD, \"R\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", \"\"),\n    \"bg\":       ( \"Bulgarian\", \"Bulgaria\", DDMY, \"&#x043b;&#x0432;\", PLURAL_ENGLISH, CURRENCY_SUFFIX, 2, \",\", \" \", DST_UK),\n    \"bs\":       ( \"Bosnian\", \"Bosnia\", HYMD, \"KM\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK),\n    \"cs\":       ( \"Czech\", \"Czech Republic\", DYMD, \"&#x004b;&#x010d;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"de\":       ( \"German\", \"Germany\", DDMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"de_AT\":    ( \"German\", \"Austria\", DDMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"de_CH\":    ( \"German\", \"Switzerland\", DDMY, \"CHF\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"de_LU\":    ( \"German\", \"Luxembourg\", DDMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"el\":       ( \"Greek\", \"Greece\", DMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"es\":       ( \"Spanish\", \"Spain\", DMY, EURO, PLURAL_ENGLISH, CURRENCY_SUFFIX, 2, \",\", \" \", DST_UK ),\n    \"es_CO\":    ( \"Spanish\", \"Columbia\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", \"\" ),\n    \"es_CR\":    ( \"Spanish\", \"Costa Rica\", DMY, \"&#8353;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", \"\" ),\n    \"es_EC\":    ( \"Spanish\", \"Ecuador\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", \"\" ),\n    \"es_MX\":    ( \"Spanish\", \"Mexico\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"6-104-L10\" ),\n    \"et\":       ( \"Estonian\", \"Estonia\", DMY, \"kr\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"fi\":       ( \"Finnish\", \"Finland\", DDMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK),\n    \"fr\":       ( \"French\", \"France\", DMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"fr_BE\":    ( \"French\", \"Belgium\", DMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"fr_LU\":    ( \"French\", \"Luxembourg\", DDMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"fr_CA\":    ( \"French\", \"Canada\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_US ),\n    \"fr_CH\":    ( \"French\", \"Switzerland\", DDMY, \"CHF\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"he\":       ( \"Hebrew\", \"Israel\", DMY, \"&#x20aa;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"hu\":       ( \"Hungarian\", \"Hungary\", DYMD, \"Ft\",  PLURAL_HUNGARIAN, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK), \n    \"it\":       ( \"Italian\", \"Italy\", DMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"it_CH\":    ( \"Italian\", \"Switzerland\", DDMY, \"CHF\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", DST_UK ),\n    \"lt\":       ( \"Lithuanian\", \"Lithuania\", DYMD, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"nb\":       ( \"Norwegian Bokmal\", \"Norway\", DDMY, \"kr\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"nl\":       ( \"Dutch\", \"Holland\", HDMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"nl_AW\":    ( \"Dutch\", \"Aruba\", DMY, \"Awg.\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"nl_BE\":    ( \"Dutch\", \"Belgium\", DMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"nl_BQ\":    ( \"Dutch\", \"Bonaire\", DMY, DOLLAR, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"pl\":       ( \"Polish\", \"Poland\", DDMY, \"&#x007a;&#x0142;\", PLURAL_POLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"pt\":       ( \"Portuguese\", \"Portugal\", HDMY, EURO, PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"pt_MZ\":    ( \"Portuguese\", \"Mozambique\", DMY, \"MT\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"ru\":       ( \"Russian\", \"Russia\", DDMY, \"&#1056;&#1059;&#1041;.\", PLURAL_SLAVIC, CURRENCY_PREFIX, 2, \",\", \" \", \"\" ),\n    \"sk\":       ( \"Slovakian\", \"Slovakia\", DDMY, EURO, PLURAL_SLAVIC, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"sl\":       ( \"Slovenian\", \"Slovenia\", DDMY, EURO, PLURAL_SLAVIC, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"sv\":       ( \"Swedish\", \"Sweden\", HYMD, \"kr\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", DST_UK ),\n    \"th\":       ( \"Thai\", \"Thailand\", DMY, \"&#x0e3f;\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \".\", \",\", \"\" ),\n    \"tr\":       ( \"Turkish\", \"Turkey\", DDMY, \"TL\", PLURAL_ENGLISH, CURRENCY_PREFIX, 2, \",\", \" \", \"\" )\n}\n\ndef _(english, locale = \"en\"):\n    return translate(english, locale)\n\ndef real_locale(locale = \"en\"):\n    # When translating text strings, treat some locales as pointers \n    # to other locales without the need for a full translation:\n    # Our core English locales (with actual differences) are:\n    #   en    (US)\n    #   en_AU (Australia)\n    #   en_CA (Canada)\n    #   en_GB (UK)\n    if locale in (\"en_AE\", \"en_BE\", \"en_BG\", \"en_BM\", \"en_BQ\", \"en_CH\", \"en_CN\", \"en_CY\", \"en_ES\", \n        \"en_HK\", \"en_IE\", \"en_IN\", \"en_JP\", \"en_KE\", \"en_KH\", \"en_LB\", \"en_LU\", \"en_MU\", \"en_MY\", \"en_MZ\", \n        \"en_NA\", \"en_PH\", \"en_QA\", \"en_TH\", \"en_TW\", \"en_TW2\", \"en_TZ\", \"en_VN\", \"en_ZA\"):\n        locale = \"en_GB\"\n    if locale in (\"en_AW\", \"en_BH\", \"en_CO\", \"en_CR\", \"en_KW\", \"en_KY\", \"en_IL\", \"en_LB\", \n        \"en_MX\"):\n        locale = \"en\"\n    if locale in (\"en_NZ\",):\n        locale = \"en_AU\"\n    # Dutch locales\n    if locale in (\"nl_AW\", \"nl_BE\", \"nl_BQ\"):\n        locale = \"nl\"\n    # French locales\n    if locale in (\"fr_BE\", \"fr_CH\", \"fr_LU\"):\n        locale = \"fr\"\n    # German locales\n    if locale in (\"de_AT\", \"de_CH\", \"de_LU\"):\n        locale = \"de\"\n    # Italian locales\n    if locale in (\"it_CH\",):\n        locale = \"it\"\n    # Portguese locales\n    if locale in (\"pt_MZ\",):\n        locale = \"pt\"\n    # Spanish locales\n    if locale in (\"es_CO\", \"es_CR\", \"es_EC\", \"es_MX\"):\n        locale = \"es\"\n    return locale\n\ndef translate(english, locale = \"en\"):\n    \"\"\"\n    Returns a translation string for an English phrase in\n    the locale given.\n    \"\"\"\n    locale = real_locale(locale)\n\n    # If we're dealing with English, then just\n    # return the English phrase. I hate that I'm doing\n    # this, but I'm going with the accepted standard of\n    # US English being default even though we invented\n    # the bloody language.\n    if locale == \"en\":\n        return english\n\n    # Otherwise, look up the phrase in the correct\n    # module for our locale.\n    try:\n        lang = globals()[\"locale_\" + locale]\n    except:\n        # The module doesn't exist for the locale, fall\n        # back to plain English translation\n        return english\n\n    # If the string isn't in our locale dictionary, fall back to English\n    if english not in lang.val: return english\n\n    # If the value hasn't been translated, fall back to English\n    s = lang.val[english]\n    if s is None or s == \"\" or s.startswith(\"??\") or s.startswith(\"(??\"):\n        return english\n    else:\n        return lang.val[english]\n\ndef ntranslate(number, translations, locale = \"en\"):\n    \"\"\" Translates a phrase that deals with a number of something\n        so the correct plural can be used. \n        number: The number of items\n        translations: A list of already translated strings for each plural form\n        locale: The locale the strings are in (which plural function to use)\n    \"\"\"\n    try:\n        pluralfun = get_plural_function(locale)\n        text = translations[pluralfun(number)]\n        text = text.replace(\"{plural0}\", str(number))\n        text = text.replace(\"{plural1}\", str(number))\n        text = text.replace(\"{plural2}\", str(number))\n        text = text.replace(\"{plural3}\", str(number))\n        text = text.replace(\"{plural4}\", str(number))\n        return text\n    except Exception as e:\n        return e\n\ndef get_version():\n    \"\"\"\n    Returns the version of ASM\n    \"\"\"\n    return VERSION\n\ndef get_version_number():\n    \"\"\"\n    Returns the version number of ASM\n    \"\"\"\n    return VERSION[0:VERSION.find(\" \")]\n\ndef get_locale_map(locale, index):\n    if locale in locale_maps:\n        return locale_maps[locale][index]\n    else:\n        return locale_maps[\"en\"][index]\n\ndef get_locales():\n    locales = []\n    # Build a list of locale, display name\n    for k, v in locale_maps.items():\n        if k.find(\"_\") != -1 and k != \"en\":\n            locales.append( (k, \"%s (%s)\" % (v[LM_LANGUAGE], v[LM_COUNTRY])) )\n        else:\n            locales.append( (k, \"%s\" % v[LM_LANGUAGE]) )\n    # Sort on display name alphabetically\n    locales = sorted(locales, key=lambda x: x[1])\n    return locales\n\ndef get_country(locale):\n    return get_locale_map(locale, LM_COUNTRY)\n\ndef get_language(locale):\n    return get_locale_map(locale, LM_LANGUAGE)\n\ndef get_display_date_format(locale, digitsinyear = 4):\n    \"\"\"\n    Returns the display date format for a locale\n    \"\"\"\n    if digitsinyear == 4:\n        return get_locale_map(locale, LM_DATEFORMAT)[0]\n    else:\n        return get_locale_map(locale, LM_DATEFORMAT)[1]\n\ndef get_currency_symbol(locale):\n    \"\"\"\n    Returns the currency symbol for a locale\n    \"\"\"\n    return get_locale_map(locale, LM_CURRENCY_SYMBOL)\n\ndef get_currency_prefix(locale):\n    \"\"\"\n    Returns \"p\" if the currency symbol goes at the beginning, or \"s\" for the end\n    when displaying.\n    \"\"\"\n    return get_locale_map(locale, LM_CURRENCY_POSITION)\n\ndef get_currency_dp(locale):\n    \"\"\"\n    Returns the number of decimal places for a locale when\n    displaying currency\n    \"\"\"\n    return get_locale_map(locale, LM_CURRENCY_DECIMAL_PLACES)\n\ndef get_currency_radix(locale):\n    \"\"\"\n    Returns the decimal mark symbol\n    \"\"\"\n    return get_locale_map(locale, LM_CURRENCY_DECIMAL_MARK)\n\ndef get_currency_digit_grouping(locale):\n    \"\"\"\n    Returns the character used to separate thousands\n    \"\"\"\n    return get_locale_map(locale, LM_CURRENCY_DIGIT_GROUPING)\n\ndef get_dst(locale):\n    \"\"\"\n    Returns the daylight savings time info for locale\n    \"\"\"\n    return get_locale_map(locale, LM_DST)\n\ndef get_plural_function(locale):\n    \"\"\"\n    Returns the function for calculating plurals for this locale\n    \"\"\"\n    return get_locale_map(locale, LM_PLURAL_FUNCTION)\n\ndef cint(s):\n    try:\n        return int(s)\n    except:\n        return 0\n\ndef format_currency(locale, value, includeSymbol = True):\n    \"\"\"\n    Formats a currency value to the correct number of \n    decimal places and returns it as a string\n    \"\"\"\n    if value is None: value = 0\n    i = 0\n    f = 0.0\n    try:\n        i = int(value)\n        f = float(i)\n    except:\n        pass\n    f = f / 100\n    dp = str(get_currency_dp(locale))\n    symbol = get_currency_symbol(locale)\n    # Start with a basic currency format with comma groupings every 3 digits\n    # and the right number of decimal places for the locale\n    fstr = \"{:,.\" + dp + \"f}\"\n    # Add the currency symbol to the format in the correct spot\n    if includeSymbol:\n        if get_currency_prefix(locale) == CURRENCY_PREFIX:\n            fstr = symbol + fstr\n        else:\n            fstr += symbol\n    # If it's negative, wrap brackets around the format\n    if f < 0: \n        f = abs(f)\n        fstr = \"(\" + fstr + \")\"\n    # Do the format to get our value\n    s = fstr.format(f)\n    # Substitute the grouping and radix symbols based on locale\n    s = s.replace(\",\", \"GRP\").replace(\".\", \"RDX\")\n    s = s.replace(\"GRP\", get_currency_digit_grouping(locale))\n    s = s.replace(\"RDX\", get_currency_radix(locale))\n    return s\n\ndef format_currency_no_symbol(locale, value):\n    \"\"\" \n    Formats a currency value, but leaves off the currency symbol\n    \"\"\"\n    return format_currency(locale, value, includeSymbol = False)\n\ndef format_time(d, timeformat=\"%H:%M:%S\"):\n    if d is None: return \"\"\n    return time.strftime(timeformat, d.timetuple())\n\ndef format_time_now(offset = 0.0):\n    return format_time(now(offset))\n\ndef http_date(dt):\n    \"\"\"\n    Formats a UTC python date/time in HTTP (RFC1123) format\n    \"\"\"\n    weekday = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"][dt.weekday()]\n    month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\",\n             \"Oct\", \"Nov\", \"Dec\"][dt.month - 1]\n    return \"%s, %02d %s %04d %02d:%02d:%02d GMT\" % (weekday, dt.day, month,\n        dt.year, dt.hour, dt.minute, dt.second)\n\ndef python2display(locale, d):\n    \"\"\"\n    Formats a python date as a display string. \n    'd' is a Python date, return value is a display string.\n    \"\"\"\n    if d is None: return \"\"\n    try:\n        return time.strftime(get_display_date_format(locale), d.timetuple())\n    except:\n        return \"\"\n\ndef python2displaytime(locale, d):\n    \"\"\"\n    Formats a python date as a display string with time info (if not midnight).\n    'd' is a Python date, return value is a display string with time info.\n    \"\"\"\n    if d is None: return \"\"\n    try:\n        ds = time.strftime(get_display_date_format(locale), d.timetuple())\n        ts = \"\"\n        if str(d).find(\"00:00:00\") == -1: \n            return \"%s %s\" % (ds, format_time(d))\n        return ds\n    except:\n        return \"\"\n\ndef python2unix(d):\n    \"\"\"\n    Converts a python date to unix.\n    \"\"\"\n    try:\n        return time.mktime(d.timetuple())\n    except:\n        return 0\n\ndef format_date(d, dateformat=\"%Y-%m-%d\"):\n    \"\"\"\n    Formats a python date to the format given (strftime rules)\n    \"\"\"\n    if d is None: return \"\"\n    try:\n        return time.strftime(dateformat, d.timetuple())\n    except:\n        return \"\"\n\ndef display2python(locale, d):\n    \"\"\"\n    Parses a display string back to python format. Can cope with\n    2 or 4 digit years.\n    'd' is a string. return value is the date or None if it\n    could not be parsed.\n    If an ISO date YYYY-MM-DD is passed by mistake, it will cope with that too (handy for posts from html5 date input)\n    \"\"\"\n    if d is None: return None\n    if len(d) == 10 and d[4] == \"-\" and d[7] == \"-\": return datetime.datetime.strptime(d, \"%Y-%m-%d\")\n    try:\n        return datetime.datetime.strptime(d, get_display_date_format(locale, 2))\n    except:\n        try:\n            return datetime.datetime.strptime(d, get_display_date_format(locale, 4))\n        except:\n            return None\n\ndef parse_date(dateformat, d):\n    \"\"\"\n    Parses a python date from the dateformat given\n    \"\"\"\n    try:\n        return datetime.datetime.strptime(d, dateformat)\n    except:\n        return None\n\ndef parse_time(d, t):\n    \"\"\"\n    Parses the time t and combines it with python date d\n    \"\"\"\n    if d is None: return None\n    tbits = t.split(\":\")\n    hour = 0\n    minute = 0\n    second = 0\n    if len(tbits) > 0: hour = cint(tbits[0])\n    if len(tbits) > 1: minute = cint(tbits[1])\n    if len(tbits) > 2: second = cint(tbits[2])\n    t = datetime.time(hour, minute, second)\n    d = d.combine(d, t)\n    return d\n\ndef remove_time(d):\n    \"\"\"\n    Removes the time component of a date by setting it to midnight\n    \"\"\"\n    if d is None: return d\n    return d.replace(hour=0, minute=0, second=0, microsecond=0)\n\ndef yes_no(l, condition):\n    if condition:\n        return _(\"Yes\", l)\n    else:\n        return _(\"No\", l)\n\ndef yes_no_unknown(l, v):\n    if v == 0: return _(\"Yes\", l)\n    elif v == 1: return _(\"No\", l)\n    else: return _(\"Unknown\", l)\n\ndef yes_no_unknown_blank(l, v):\n    if v == 0: return _(\"Yes\", l)\n    elif v == 1: return _(\"No\", l)\n    else: return \"\"\n\ndef add_months(date, months = 1):\n    \"\"\"\n    Adds calendar months to a date, returning a new datetime\n    \"\"\"\n    newmonth = ((( date.month - 1) + months ) % 12 ) + 1\n    newyear  = date.year + ((( date.month - 1) + months ) // 12 )\n    try:\n        return datetime.datetime( newyear, newmonth, date.day )\n    except:\n        return datetime.datetime( newyear, newmonth, 28 )\n\ndef add_years(date, years = 1.0):\n    \"\"\"\n    Adds years to a date, returning a new datetime\n    \"\"\"\n    if date is None: return None\n    if date.day == 29 and date.month == 2: return date + datetime.timedelta(days = int(years * 365.0)) # Leap years break calendar years\n    if years == int(years): return date.replace( year = date.year + int(years))\n    return date + datetime.timedelta(days = int(years * 365.0))\n\ndef add_days(date, nodays = 1):\n    \"\"\"\n    Adds days to a date, returning a new datetime\n    \"\"\"\n    if date is None: return None\n    return date + datetime.timedelta(days = nodays)\n\ndef add_hours(date, nohours = 1):\n    \"\"\"\n    Add hours to date, returning a new datetime\n    \"\"\"\n    if date is None: return None\n    return date + datetime.timedelta(hours = nohours)\n\ndef add_minutes(date, nomins = 1):\n    \"\"\"\n    Add mins to date, returning a new datetime\n    \"\"\"\n    if date is None: return None\n    return date + datetime.timedelta(minutes = nomins)\n\ndef add_seconds(date, nosecs = 1):\n    \"\"\"\n    Add secs to date, returning a new datetime\n    \"\"\"\n    if date is None: return None\n    return date + datetime.timedelta(seconds = nosecs)\n\ndef subtract_seconds(date, nosecs = 1):\n    \"\"\"\n    Subtract seconds from date, returning a new datetime\n    \"\"\"\n    if date is None: return None\n    return date - datetime.timedelta(seconds = nosecs)\n\ndef subtract_minutes(date, nomins = 1):\n    \"\"\"\n    Subtract minutes from date, returning a new datetime\n    \"\"\"\n    if date is None: return None\n    return date - datetime.timedelta(minutes = nomins)\n\ndef subtract_hours(date, nohours = 1):\n    \"\"\"\n    Subtract hours from date, returning a new datetime\n    \"\"\"\n    if date is None: return None\n    return date - datetime.timedelta(hours = nohours)\n\ndef subtract_days(date, nodays = 1):\n    \"\"\"\n    Subtract days from date, returning a new datetime\n    \"\"\"\n    if date is None: return None\n    return date - datetime.timedelta(days = nodays)\n\ndef subtract_years(date, years = 1.0):\n    \"\"\"\n    Subtracts years from date, returning a new datetime\n    \"\"\"\n    if date is None: return None\n    if date.day == 29 and date.month == 2: return date - datetime.timedelta(days = int(years * 365.0)) # Leap years break calendar years\n    if years == int(years): return date.replace( year = date.year - int(years)) # Go back a calendar year if it's a whole year\n    return date - datetime.timedelta(days = int(years * 365.0))\n\ndef subtract_months(date, months = 1):\n    \"\"\"\n    Subtracts months from a date. Will not work after 11 months.\n    \"\"\"\n    def subtract_one_month(t):\n        one_day = datetime.timedelta(days=1)\n        one_month_earlier = t - one_day\n        while one_month_earlier.month == t.month or one_month_earlier.day > t.day:\n            one_month_earlier -= one_day\n        return one_month_earlier\n    for dummy in range(0, months):\n        date = subtract_one_month(date)\n    return date\n    #year, month = divmod(months, 12)\n    #if date.month <= month:\n    #    year = date.year - 1\n    #    month = date.month - month + 12\n    #else:\n    #    year = date.year \n    #    month = date.month - month\n    #return date.replace(year = year, month = month)\n\ndef monday_of_week(date):\n    \"\"\"\n    Returns the monday of the current week of date.\n    \"\"\"\n    if date is None: return None\n    while True:\n        if date.weekday() == 0:\n            return date\n        date = subtract_days(date, 1)\n\ndef sunday_of_week(date):\n    \"\"\"\n    Returns the sunday of the current week of date.\n    \"\"\"\n    if date is None: return None\n    while True:\n        if date.weekday() == 6:\n            return date\n        date = add_days(date, 1)\n\ndef first_of_month(date):\n    \"\"\"\n    Returns the first of the current month of date.\n    \"\"\"\n    return date.replace(day = 1)\n\ndef first_of_year(date):\n    \"\"\"\n    Returns the first of the current year.\n    \"\"\"\n    return date.replace(day = 1, month = 1)\n\ndef last_of_month(date):\n    \"\"\"\n    Returns the last of the current month of date.\n    \"\"\"\n    date = add_months(date, 1)\n    date = first_of_month(date)\n    return subtract_days(date, 1)\n\ndef last_of_year(date):\n    \"\"\"\n    Returns the last of the current year of date.\n    \"\"\"\n    date = add_years(date, 1)\n    date = first_of_year(date)\n    return subtract_days(date, 1)\n\ndef after(date1, date2):\n    \"\"\"\n    returns true if date1 is after date2\n    \"\"\"\n    return date_diff_days(date1, date2) < 0\n\ndef date_diff_days(date1, date2):\n    \"\"\"\n    Returns the difference in days between two dates. It's\n    assumed that date2 > date1. We aren't using subtraction\n    for timedeltas because it doesn't seem to work correctly\n    when subtracting date from datetime (and some items\n    in the database come through as date). Instead, we convert\n    to unix time to calculate.\n    (datetime) date1\n    (datetime) date2\n    \"\"\"\n    if date1 is None or date2 is None: return 0\n    try:\n        ux1 = time.mktime(date1.timetuple())\n        ux2 = time.mktime(date2.timetuple())\n        delta = int((ux2 - ux1) / 60 / 60 / 24)\n        return delta\n    except:\n        return 0\n\ndef date_diff(l, date1, date2, cutoffs = \"7|182|365\"):\n    \"\"\"\n    Returns a string representing the difference between two\n    dates. Eg: 6 weeks, 5 months.\n    It is expected that date2 > date1\n    (datetime) date1\n    (datetime) date2\n    \"\"\"\n    days = int(date_diff_days(date1, date2))\n    return format_diff(l, days, cutoffs)\n\ndef format_diff(l, days, cutoffs = \"7|182|365\"):\n    \"\"\"\n    Returns a formatted diff from a number of days.\n    Eg: 6 weeks, 5 months.\n    \"\"\"\n    if days is None or days < 0: days = 0\n    weeks = int(days / 7)\n    months = int(days / 30.5)\n    years = int(days / 365)\n   \n    # If it's less than a week, show as days\n    if days < cint(cutoffs.split(\"|\")[0]):\n        return ntranslate(days, [ _(\"{plural0} day.\", l), _(\"{plural1} days.\", l), _(\"{plural2} days.\", l), _(\"{plural3} days.\")], l)\n    # If it's 26 weeks or less, show as weeks\n    elif days < cint(cutoffs.split(\"|\")[1]):\n        return ntranslate(weeks, [ _(\"{plural0} week.\", l), _(\"{plural1} weeks.\", l), _(\"{plural2} weeks.\", l), _(\"{plural3} weeks.\")], l)\n    # If it's less than a year, show as months\n    elif days < cint(cutoffs.split(\"|\")[2]):\n        return ntranslate(months, [ _(\"{plural0} month.\", l), _(\"{plural1} months.\", l), _(\"{plural2} months.\", l), _(\"{plural3} months.\")], l)\n    else:\n        # Show as years and months\n        months = int((days % 365) / 30.5)\n        return ntranslate(years, [ _(\"{plural0} year.\", l), _(\"{plural1} years.\", l), _(\"{plural2} years.\", l), _(\"{plural3} years.\")], l).replace(\".\", \"\") + \\\n            \" \" + ntranslate(months, [ _(\"{plural0} month.\", l), _(\"{plural1} months.\", l), _(\"{plural2} months.\", l), _(\"{plural3} months.\")], l)\n\ndef parse_dst(c):\n    \"\"\"\n    Parses dst code c and returns values for day of week,\n    start offset in month, start month, end offset in month, end month\n    \"\"\"\n    dow, start, end = c.split(\"-\")\n    return (int(dow), start[0], int(start[1:]), end[0], int(end[1:]))\n\ndef dst_find_day(dow, x, month, yearoffset=0):\n    \"\"\" \n    Finds the xth dow in month this year.\n    dow: int day of the week (0 = mon, 6 = sun)\n    x: which day to find, 1-5 or L for the last dow in the month\n    month: int the month we're looking in\n    yearoffset: add to the current year\n    \"\"\"\n    d = today()\n    if yearoffset > 0: d = add_years(d, yearoffset)\n    d = d.replace(month=month, day=1)\n    if x == \"L\":\n        # Looking for the last dow in month\n        d = last_of_month(d)\n        while d.day > 20:\n            if d.weekday() == dow: break\n            d = subtract_days(d, 1)\n    else:\n        # Looking for X dow in month\n        found = 0\n        while d.month == month:\n            if d.weekday() == dow: found += 1\n            if found == int(x): break\n            d = add_days(d, 1)\n    return d\n\ndef dst_start_date(l):\n    \"\"\" Calculates the dst start date/time for locale \"\"\"\n    dow, so, sm, dummy, dummy = parse_dst(get_dst(l))\n    return dst_find_day( dow, so, sm)\n\ndef dst_end_date(l):\n    \"\"\" Calculates the dst end date/time for locale \"\"\"\n    dow, dummy, sm, eo, em = parse_dst(get_dst(l))\n    return dst_find_day(dow, eo, em, sm > em and 1 or 0) # set 1 year offset if start month is later than end month\n\ndef dst_adjust(l, offset = 0.0):\n    \"\"\"\n    Returns 1 if locale l is currently in daylight savings time.\n    offset: Included so that the time now without dst can be calculated first to\n            decide whether or not we're in dst (otherwise we could be wrong for a day)\n    You can add this call to a timezone offset to get the correct adjustment.\n    \"\"\"\n    c = get_dst(l)\n    if c == \"\": return 0 # No dst information for this locale, no adjustment\n    d = now(offset)\n    dsts = dst_start_date(l)\n    dste = dst_end_date(l)\n    if d >= dsts and d <= dste: return 1 # we're in dst\n    return 0\n\ndef now(offset = 0.0):\n    \"\"\"\n    Returns a python date representing now\n    offset: A UTC offset to apply in hours\n    \"\"\"\n    if offset < 0:\n        return datetime.datetime.now() - datetime.timedelta(hours = abs(offset))\n    else:\n        return datetime.datetime.now() + datetime.timedelta(hours = offset)\n\ndef today():\n    \"\"\"\n    Returns a python datetime set to today, but with time information at midnight.\n    \"\"\"\n    d = datetime.datetime.now()\n    return datetime.datetime(d.year, d.month, d.day)\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/asm3/i18n.py b/src/asm3/i18n.py
--- a/src/asm3/i18n.py	(revision b0a8ce62bff68bb38ec7329c8f8da39aea676384)
+++ b/src/asm3/i18n.py	(date 1659005572942)
@@ -6,9 +6,8 @@
 # flake8: noqa - we have a lot of locales and this is convenient
 from asm3.locales import *
 
-
-VERSION = "46u [Sun 24 Jul 13:32:00 BST 2022]"
-BUILD = "07241332"
+VERSION = "46u [Mon 25 Jul 2022 23:02:36 IDT]"
+BUILD = "07252302"
 
 DMY = ( "%d/%m/%Y", "%d/%m/%y" )
 HDMY = ( "%d-%m-%Y", "%d-%m-%y" )
@@ -485,13 +484,6 @@
     d = d.combine(d, t)
     return d
 
-def remove_time(d):
-    """
-    Removes the time component of a date by setting it to midnight
-    """
-    if d is None: return d
-    return d.replace(hour=0, minute=0, second=0, microsecond=0)
-
 def yes_no(l, condition):
     if condition:
         return _("Yes", l)
Index: src/web062/application.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nWeb application\n(from web.py)\n\"\"\"\n\nimport itertools\nimport os\nimport sys\nimport traceback\nimport wsgiref.handlers\nfrom inspect import isclass\nfrom io import BytesIO\n\nfrom . import browser, httpserver, utils\nfrom . import webapi as web\nfrom . import wsgi\nfrom .debugerror import debugerror\nfrom .py3helpers import iteritems\nfrom .utils import lstrips\n\nfrom urllib.parse import urlparse, urlencode, unquote\n\nfrom importlib import reload\n\n\n__all__ = [\n    \"application\",\n    \"auto_application\",\n    \"subdir_application\",\n    \"subdomain_application\",\n    \"loadhook\",\n    \"unloadhook\",\n    \"autodelegate\",\n]\n\n\nclass application:\n    \"\"\"\n    Application to delegate requests based on path.\n\n        >>> urls = (\"/hello\", \"hello\")\n        >>> app = application(urls, globals())\n        >>> class hello:\n        ...     def GET(self): return \"hello\"\n        >>>\n        >>> app.request(\"/hello\").data\n        'hello'\n    \"\"\"\n\n    # PY3DOCTEST: b'hello'\n\n    def __init__(self, mapping=(), fvars={}, autoreload=None):\n        if autoreload is None:\n            autoreload = web.config.get(\"debug\", False)\n        self.init_mapping(mapping)\n        self.fvars = fvars\n        self.processors = []\n\n        self.add_processor(loadhook(self._load))\n        self.add_processor(unloadhook(self._unload))\n\n        if autoreload:\n\n            def main_module_name():\n                mod = sys.modules[\"__main__\"]\n                file = getattr(\n                    mod, \"__file__\", None\n                )  # make sure this works even from python interpreter\n                return file and os.path.splitext(os.path.basename(file))[0]\n\n            def modname(fvars):\n                \"\"\"find name of the module name from fvars.\"\"\"\n                file, name = fvars.get(\"__file__\"), fvars.get(\"__name__\")\n                if file is None or name is None:\n                    return None\n\n                if name == \"__main__\":\n                    # Since the __main__ module can't be reloaded, the module has\n                    # to be imported using its file name.\n                    name = main_module_name()\n                return name\n\n            mapping_name = utils.dictfind(fvars, mapping)\n            module_name = modname(fvars)\n\n            def reload_mapping():\n                \"\"\"loadhook to reload mapping and fvars.\"\"\"\n                mod = __import__(module_name, None, None, [\"\"])\n                mapping = getattr(mod, mapping_name, None)\n                if mapping:\n                    self.fvars = mod.__dict__\n                    self.init_mapping(mapping)\n\n            self.add_processor(loadhook(Reloader()))\n            if mapping_name and module_name:\n                # when app is ran as part of a package, this puts the app into\n                # `sys.modules` correctly, otherwise the first change to the\n                # app module will not be picked up by Reloader\n                # RRT: 26/10/2021 - THIS BREAKS SESSIONS BY RELOADING\n                # THE PROCESSOR LIST, WHICH REMOVES Session._processor()\n                # reload_mapping()\n                self.add_processor(loadhook(reload_mapping))\n\n            # load __main__ module usings its filename, so that it can be reloaded.\n            if main_module_name() and \"__main__\" in sys.argv:\n                try:\n                    __import__(main_module_name())\n                except ImportError:\n                    pass\n\n    def _load(self):\n        web.ctx.app_stack.append(self)\n\n    def _unload(self):\n        web.ctx.app_stack = web.ctx.app_stack[:-1]\n\n        if web.ctx.app_stack:\n            # this is a sub-application, revert ctx to earlier state.\n            oldctx = web.ctx.get(\"_oldctx\")\n            if oldctx:\n                web.ctx.home = oldctx.home\n                web.ctx.homepath = oldctx.homepath\n                web.ctx.path = oldctx.path\n                web.ctx.fullpath = oldctx.fullpath\n\n    def _cleanup(self):\n        # Threads can be recycled by WSGI servers.\n        # Clearing up all thread-local state to avoid interefereing with subsequent requests.\n        utils.ThreadedDict.clear_all()\n\n    def init_mapping(self, mapping):\n        self.mapping = list(utils.group(mapping, 2))\n\n    def add_mapping(self, pattern, classname):\n        self.mapping.append((pattern, classname))\n\n    def add_processor(self, processor):\n        \"\"\"\n        Adds a processor to the application.\n\n            >>> urls = (\"/(.*)\", \"echo\")\n            >>> app = application(urls, globals())\n            >>> class echo:\n            ...     def GET(self, name): return name\n            ...\n            >>>\n            >>> def hello(handler): return \"hello, \" +  handler()\n            ...\n            >>> app.add_processor(hello)\n            >>> app.request(\"/web.py\").data\n            'hello, web.py'\n        \"\"\"\n        # PY3DOCTEST: b'hello, web.py'\n        self.processors.append(processor)\n\n    def request(\n        self,\n        localpart=\"/\",\n        method=\"GET\",\n        data=None,\n        host=\"0.0.0.0:8080\",\n        headers=None,\n        https=False,\n        **kw\n    ):\n        \"\"\"Makes request to this application for the specified path and method.\n        Response will be a storage object with data, status and headers.\n\n            >>> urls = (\"/hello\", \"hello\")\n            >>> app = application(urls, globals())\n            >>> class hello:\n            ...     def GET(self):\n            ...         web.header('Content-Type', 'text/plain')\n            ...         return \"hello\"\n            ...\n            >>> response = app.request(\"/hello\")\n            >>> response.data\n            'hello'\n            >>> response.status\n            '200 OK'\n            >>> response.headers['Content-Type']\n            'text/plain'\n\n        To use https, use https=True.\n\n            >>> urls = (\"/redirect\", \"redirect\")\n            >>> app = application(urls, globals())\n            >>> class redirect:\n            ...     def GET(self): raise web.seeother(\"/foo\")\n            ...\n            >>> response = app.request(\"/redirect\")\n            >>> response.headers['Location']\n            'http://0.0.0.0:8080/foo'\n            >>> response = app.request(\"/redirect\", https=True)\n            >>> response.headers['Location']\n            'https://0.0.0.0:8080/foo'\n\n        The headers argument specifies HTTP headers as a mapping object\n        such as a dict.\n\n            >>> urls = ('/ua', 'uaprinter')\n            >>> class uaprinter:\n            ...     def GET(self):\n            ...         return 'your user-agent is ' + web.ctx.env['HTTP_USER_AGENT']\n            ...\n            >>> app = application(urls, globals())\n            >>> app.request('/ua', headers = {\n            ...      'User-Agent': 'a small jumping bean/1.0 (compatible)'\n            ... }).data\n            'your user-agent is a small jumping bean/1.0 (compatible)'\n\n        \"\"\"\n        # PY3DOCTEST: b'hello'\n        # PY3DOCTEST: b'your user-agent is a small jumping bean/1.0 (compatible)'\n        _p = urlparse(localpart)\n        path = _p.path\n        maybe_query = _p.query\n\n        query = maybe_query or \"\"\n\n        if \"env\" in kw:\n            env = kw[\"env\"]\n        else:\n            env = {}\n        env = dict(\n            env,\n            HTTP_HOST=host,\n            REQUEST_METHOD=method,\n            PATH_INFO=path,\n            QUERY_STRING=query,\n            HTTPS=str(https),\n        )\n        headers = headers or {}\n\n        for k, v in headers.items():\n            env[\"HTTP_\" + k.upper().replace(\"-\", \"_\")] = v\n\n        if \"HTTP_CONTENT_LENGTH\" in env:\n            env[\"CONTENT_LENGTH\"] = env.pop(\"HTTP_CONTENT_LENGTH\")\n\n        if \"HTTP_CONTENT_TYPE\" in env:\n            env[\"CONTENT_TYPE\"] = env.pop(\"HTTP_CONTENT_TYPE\")\n\n        if method not in [\"HEAD\", \"GET\"]:\n            data = data or \"\"\n\n            if isinstance(data, dict):\n                q = urlencode(data)\n            else:\n                q = data\n\n            env[\"wsgi.input\"] = BytesIO(q.encode(\"utf-8\"))\n            # if not env.get('CONTENT_TYPE', '').lower().startswith('multipart/') and 'CONTENT_LENGTH' not in env:\n            if \"CONTENT_LENGTH\" not in env:\n                env[\"CONTENT_LENGTH\"] = len(q)\n        response = web.storage()\n\n        def start_response(status, headers):\n            response.status = status\n            response.headers = dict(headers)\n            response.header_items = headers\n\n        data = self.wsgifunc()(env, start_response)\n        response.data = b\"\".join(data)\n        return response\n\n    def browser(self):\n        return browser.AppBrowser(self)\n\n    def handle(self):\n        fn, args = self._match(self.mapping, web.ctx.path)\n        return self._delegate(fn, self.fvars, args)\n\n    def handle_with_processors(self):\n        def process(processors):\n            try:\n                if processors:\n                    p, processors = processors[0], processors[1:]\n                    return p(lambda: process(processors))\n                else:\n                    return self.handle()\n            except web.HTTPError:\n                raise\n            except (KeyboardInterrupt, SystemExit):\n                raise\n            except:\n                print(traceback.format_exc(), file=web.debug)\n                raise self.internalerror()\n\n        # processors must be applied in the reverse order. (??)\n        return process(self.processors)\n\n    def wsgifunc(self, *middleware):\n        \"\"\"Returns a WSGI-compatible function for this application.\"\"\"\n\n        def peep(iterator):\n            \"\"\"Peeps into an iterator by doing an iteration\n            and returns an equivalent iterator.\n            \"\"\"\n            # wsgi requires the headers first\n            # so we need to do an iteration\n            # and save the result for later\n            try:\n                firstchunk = next(iterator)\n            except StopIteration:\n                firstchunk = \"\"\n\n            return itertools.chain([firstchunk], iterator)\n\n        def wsgi(env, start_resp):\n            # clear threadlocal to avoid inteference of previous requests\n            self._cleanup()\n\n            self.load(env)\n            try:\n                # allow uppercase methods only\n                if web.ctx.method.upper() != web.ctx.method:\n                    raise web.nomethod()\n\n                result = self.handle_with_processors()\n                if result and hasattr(result, \"__next__\"):\n                    result = peep(result)\n                else:\n                    result = [result]\n            except web.HTTPError as e:\n                result = [e.data]\n\n            def build_result(result):\n                for r in result:\n                    if isinstance(r, bytes):\n                        yield r\n                    else:\n                        yield str(r).encode(\"utf-8\")\n\n            result = build_result(result)\n\n            status, headers = web.ctx.status, web.ctx.headers\n            start_resp(status, headers)\n\n            def cleanup():\n                self._cleanup()\n                yield b\"\"  # force this function to be a generator\n\n            return itertools.chain(result, cleanup())\n\n        for m in middleware:\n            wsgi = m(wsgi)\n\n        return wsgi\n\n    def run(self, *middleware):\n        \"\"\"\n        Starts handling requests. If called in a CGI or FastCGI context, it will follow\n        that protocol. If called from the command line, it will start an HTTP\n        server on the port named in the first command line argument, or, if there\n        is no argument, on port 8080.\n\n        `middleware` is a list of WSGI middleware which is applied to the resulting WSGI\n        function.\n        \"\"\"\n        return wsgi.runwsgi(self.wsgifunc(*middleware))\n\n    def stop(self):\n        \"\"\"Stops the http server started by run.\"\"\"\n        if httpserver.server:\n            httpserver.server.stop()\n            httpserver.server = None\n\n    def cgirun(self, *middleware):\n        \"\"\"\n        Return a CGI handler. This is mostly useful with Google App Engine.\n        There you can just do:\n\n            main = app.cgirun()\n        \"\"\"\n        wsgiapp = self.wsgifunc(*middleware)\n\n        try:\n            from google.appengine.ext.webapp.util import run_wsgi_app\n\n            return run_wsgi_app(wsgiapp)\n        except ImportError:\n            # we're not running from within Google App Engine\n            return wsgiref.handlers.CGIHandler().run(wsgiapp)\n\n    def gaerun(self, *middleware):\n        \"\"\"\n        Starts the program in a way that will work with Google app engine,\n        no matter which version you are using (2.5 / 2.7)\n\n        If it is 2.5, just normally start it with app.gaerun()\n\n        If it is 2.7, make sure to change the app.yaml handler to point to the\n        global variable that contains the result of app.gaerun()\n\n        For example:\n\n        in app.yaml (where code.py is where the main code is located)\n\n            handlers:\n            - url: /.*\n              script: code.app\n\n        Make sure that the app variable is globally accessible\n        \"\"\"\n        wsgiapp = self.wsgifunc(*middleware)\n        try:\n            # check what version of python is running\n            version = sys.version_info[:2]\n            major = version[0]\n            minor = version[1]\n\n            if major != 2:\n                raise EnvironmentError(\n                    \"Google App Engine only supports python 2.5 and 2.7\"\n                )\n\n            # if 2.7, return a function that can be run by gae\n            if minor == 7:\n                return wsgiapp\n            # if 2.5, use run_wsgi_app\n            elif minor == 5:\n                from google.appengine.ext.webapp.util import run_wsgi_app\n\n                return run_wsgi_app(wsgiapp)\n            else:\n                raise EnvironmentError(\n                    \"Not a supported platform, use python 2.5 or 2.7\"\n                )\n        except ImportError:\n            return wsgiref.handlers.CGIHandler().run(wsgiapp)\n\n    def load(self, env):\n        \"\"\"Initializes ctx using env.\"\"\"\n        ctx = web.ctx\n        ctx.clear()\n        ctx.status = \"200 OK\"\n        ctx.headers = []\n        ctx.output = \"\"\n        ctx.environ = ctx.env = env\n        ctx.host = env.get(\"HTTP_HOST\")\n\n        if env.get(\"wsgi.url_scheme\") in [\"http\", \"https\"]:\n            ctx.protocol = env[\"wsgi.url_scheme\"]\n        elif env.get(\"HTTPS\", \"\").lower() in [\"on\", \"true\", \"1\"]:\n            ctx.protocol = \"https\"\n        else:\n            ctx.protocol = \"http\"\n        ctx.homedomain = ctx.protocol + \"://\" + env.get(\"HTTP_HOST\", \"[unknown]\")\n        ctx.homepath = os.environ.get(\"REAL_SCRIPT_NAME\", env.get(\"SCRIPT_NAME\", \"\"))\n        ctx.home = ctx.homedomain + ctx.homepath\n        # @@ home is changed when the request is handled to a sub-application.\n        # @@ but the real home is required for doing absolute redirects.\n        ctx.realhome = ctx.home\n        ctx.ip = env.get(\"REMOTE_ADDR\")\n        ctx.method = env.get(\"REQUEST_METHOD\")\n        try:\n            ctx.path = bytes(env.get(\"PATH_INFO\"), \"latin1\").decode(\"utf8\")\n        except UnicodeDecodeError:  # If there are Unicode characters...\n            ctx.path = env.get(\"PATH_INFO\")\n\n        # http://trac.lighttpd.net/trac/ticket/406 requires:\n        if env.get(\"SERVER_SOFTWARE\", \"\").startswith((\"lighttpd/\", \"nginx/\")):\n            ctx.path = lstrips(env.get(\"REQUEST_URI\").split(\"?\")[0], ctx.homepath)\n            # Apache and CherryPy webservers unquote urls but lighttpd and nginx do not.\n            # Unquote explicitly for lighttpd and nginx to make ctx.path uniform across\n            # all servers.\n            ctx.path = unquote(ctx.path)\n\n        if env.get(\"QUERY_STRING\"):\n            ctx.query = \"?\" + env.get(\"QUERY_STRING\", \"\")\n        else:\n            ctx.query = \"\"\n\n        ctx.fullpath = ctx.path + ctx.query\n\n        for k, v in iteritems(ctx):\n            # convert all string values to unicode values and replace\n            # malformed data with a suitable replacement marker.\n            if isinstance(v, bytes):\n                ctx[k] = v.decode(\"utf-8\", \"replace\")\n\n        # status must always be str\n        ctx.status = \"200 OK\"\n\n        ctx.app_stack = []\n\n    def _delegate(self, f, fvars, args=[]):\n        def handle_class(cls):\n            meth = web.ctx.method\n            if meth == \"HEAD\" and not hasattr(cls, meth):\n                meth = \"GET\"\n            if not hasattr(cls, meth):\n                raise web.nomethod(cls)\n            tocall = getattr(cls(), meth)\n            return tocall(*args)\n\n        if f is None:\n            raise web.notfound()\n        elif isinstance(f, application):\n            return f.handle_with_processors()\n        elif isclass(f):\n            return handle_class(f)\n        elif isinstance(f, str):\n            if f.startswith(\"redirect \"):\n                url = f.split(\" \", 1)[1]\n                if web.ctx.method == \"GET\":\n                    x = web.ctx.env.get(\"QUERY_STRING\", \"\")\n                    if x:\n                        url += \"?\" + x\n                raise web.redirect(url)\n            elif \".\" in f:\n                mod, cls = f.rsplit(\".\", 1)\n                mod = __import__(mod, None, None, [\"\"])\n                cls = getattr(mod, cls)\n            else:\n                cls = fvars[f]\n            return handle_class(cls)\n        elif hasattr(f, \"__call__\"):\n            return f()\n        else:\n            return web.notfound()\n\n    def _match(self, mapping, value):\n        for pat, what in mapping:\n            if isinstance(what, application):\n                if value.startswith(pat):\n                    f = lambda: self._delegate_sub_application(pat, what)\n                    return f, None\n                else:\n                    continue\n            elif isinstance(what, str):\n                what, result = utils.re_subm(r\"^%s\\Z\" % (pat,), what, value)\n            else:\n                result = utils.re_compile(r\"^%s\\Z\" % (pat,)).match(value)\n\n            if result:  # it's a match\n                return what, [x for x in result.groups()]\n        return None, None\n\n    def _delegate_sub_application(self, dir, app):\n        \"\"\"Deletes request to sub application `app` rooted at the directory `dir`.\n        The home, homepath, path and fullpath values in web.ctx are updated to mimic request\n        to the subapp and are restored after it is handled.\n\n        @@Any issues with when used with yield?\n        \"\"\"\n        web.ctx._oldctx = web.storage(web.ctx)\n        web.ctx.home += dir\n        web.ctx.homepath += dir\n        web.ctx.path = web.ctx.path[len(dir) :]\n        web.ctx.fullpath = web.ctx.fullpath[len(dir) :]\n        return app.handle_with_processors()\n\n    def get_parent_app(self):\n        if self in web.ctx.app_stack:\n            index = web.ctx.app_stack.index(self)\n            if index > 0:\n                return web.ctx.app_stack[index - 1]\n\n    def notfound(self):\n        \"\"\"Returns HTTPError with '404 not found' message\"\"\"\n        parent = self.get_parent_app()\n        if parent:\n            return parent.notfound()\n        else:\n            return web._NotFound()\n\n    def internalerror(self):\n        \"\"\"Returns HTTPError with '500 internal error' message\"\"\"\n        parent = self.get_parent_app()\n        if parent:\n            return parent.internalerror()\n        elif web.config.get(\"debug\"):\n            return debugerror()\n        else:\n            return web._InternalError()\n\n\ndef with_metaclass(mcls):\n    def decorator(cls):\n        body = vars(cls).copy()\n        # clean out class body\n        body.pop(\"__dict__\", None)\n        body.pop(\"__weakref__\", None)\n        return mcls(cls.__name__, cls.__bases__, body)\n\n    return decorator\n\n\nclass auto_application(application):\n    \"\"\"Application similar to `application` but urls are constructed\n    automatically using metaclass.\n\n        >>> app = auto_application()\n        >>> class hello(app.page):\n        ...     def GET(self): return \"hello, world\"\n        ...\n        >>> class foo(app.page):\n        ...     path = '/foo/.*'\n        ...     def GET(self): return \"foo\"\n        >>> app.request(\"/hello\").data\n        'hello, world'\n        >>> app.request('/foo/bar').data\n        'foo'\n    \"\"\"\n\n    # PY3DOCTEST: b'hello, world'\n    # PY3DOCTEST: b'foo'\n\n    def __init__(self):\n        application.__init__(self)\n\n        class metapage(type):\n            def __init__(klass, name, bases, attrs):\n                type.__init__(klass, name, bases, attrs)\n                path = attrs.get(\"path\", \"/\" + name)\n\n                # path can be specified as None to ignore that class\n                # typically required to create a abstract base class.\n                if path is not None:\n                    self.add_mapping(path, klass)\n\n        @with_metaclass(metapage)  # little hack needed for Py2 and Py3 compatibility\n        class page:\n            path = None\n\n        self.page = page\n\n\n# The application class already has the required functionality of subdir_application\nsubdir_application = application\n\n\nclass subdomain_application(application):\n    r\"\"\"\n    Application to delegate requests based on the host.\n\n        >>> urls = (\"/hello\", \"hello\")\n        >>> app = application(urls, globals())\n        >>> class hello:\n        ...     def GET(self): return \"hello\"\n        >>>\n        >>> mapping = (r\"hello\\.example\\.com\", app)\n        >>> app2 = subdomain_application(mapping)\n        >>> app2.request(\"/hello\", host=\"hello.example.com\").data\n        'hello'\n        >>> response = app2.request(\"/hello\", host=\"something.example.com\")\n        >>> response.status\n        '404 Not Found'\n        >>> response.data\n        'not found'\n    \"\"\"\n\n    # PY3DOCTEST: b'hello'\n    # PY3DOCTEST: b'not found'\n\n    def handle(self):\n        host = web.ctx.host.split(\":\")[0]  # strip port\n        fn, args = self._match(self.mapping, host)\n        return self._delegate(fn, self.fvars, args)\n\n    def _match(self, mapping, value):\n        for pat, what in mapping:\n            if isinstance(what, str):\n                what, result = utils.re_subm(\"^\" + pat + \"$\", what, value)\n            else:\n                result = utils.re_compile(\"^\" + pat + \"$\").match(value)\n\n            if result:  # it's a match\n                return what, [x for x in result.groups()]\n        return None, None\n\n\ndef loadhook(h):\n    \"\"\"\n    Converts a load hook into an application processor.\n\n        >>> app = auto_application()\n        >>> def f(): \"something done before handling request\"\n        ...\n        >>> app.add_processor(loadhook(f))\n    \"\"\"\n\n    def processor(handler):\n        h()\n        return handler()\n\n    return processor\n\n\ndef unloadhook(h):\n    \"\"\"\n    Converts an unload hook into an application processor.\n\n        >>> app = auto_application()\n        >>> def f(): \"something done after handling request\"\n        ...\n        >>> app.add_processor(unloadhook(f))\n    \"\"\"\n\n    def processor(handler):\n        try:\n            result = handler()\n        except:\n            # run the hook even when handler raises some exception\n            h()\n            raise\n\n        if result and hasattr(result, \"__next__\"):\n            return wrap(result)\n        else:\n            h()\n            return result\n\n    def wrap(result):\n        def next_hook():\n            try:\n                return next(result)\n            except:\n                # call the hook at the and of iterator\n                h()\n                raise\n\n        result = iter(result)\n        while True:\n            try:\n                yield next_hook()\n            except StopIteration:\n                return\n\n    return processor\n\n\ndef autodelegate(prefix=\"\"):\n    \"\"\"\n    Returns a method that takes one argument and calls the method named prefix+arg,\n    calling `notfound()` if there isn't one. Example:\n\n        urls = ('/prefs/(.*)', 'prefs')\n\n        class prefs:\n            GET = autodelegate('GET_')\n            def GET_password(self): pass\n            def GET_privacy(self): pass\n\n    `GET_password` would get called for `/prefs/password` while `GET_privacy` for\n    `GET_privacy` gets called for `/prefs/privacy`.\n\n    If a user visits `/prefs/password/change` then `GET_password(self, '/change')`\n    is called.\n    \"\"\"\n\n    def internal(self, arg):\n        if \"/\" in arg:\n            first, rest = arg.split(\"/\", 1)\n            func = prefix + first\n            args = [\"/\" + rest]\n        else:\n            func = prefix + arg\n            args = []\n\n        if hasattr(self, func):\n            try:\n                return getattr(self, func)(*args)\n            except TypeError:\n                raise web.notfound()\n        else:\n            raise web.notfound()\n\n    return internal\n\n\nclass Reloader:\n    \"\"\"Checks to see if any loaded modules have changed on disk and,\n    if so, reloads them.\n    \"\"\"\n\n    \"\"\"File suffix of compiled modules.\"\"\"\n    if sys.platform.startswith(\"java\"):\n        SUFFIX = \"$py.class\"\n    else:\n        SUFFIX = \".pyc\"\n\n    def __init__(self):\n        self.mtimes = {}\n\n    def __call__(self):\n        sys_modules = list(sys.modules.values())\n        for mod in sys_modules:\n            self.check(mod)\n\n    def check(self, mod):\n        # jython registers java packages as modules but they either\n        # don't have a __file__ attribute or its value is None\n        if not (mod and hasattr(mod, \"__file__\") and mod.__file__):\n            return\n\n        try:\n            mtime = os.stat(mod.__file__).st_mtime\n        except (OSError, IOError):\n            return\n        if mod.__file__.endswith(self.__class__.SUFFIX) and os.path.exists(\n            mod.__file__[:-1]\n        ):\n            mtime = max(os.stat(mod.__file__[:-1]).st_mtime, mtime)\n\n        if mod not in self.mtimes:\n            self.mtimes[mod] = mtime\n        elif self.mtimes[mod] < mtime:\n            try:\n                reload(mod)\n                self.mtimes[mod] = mtime\n            except ImportError:\n                pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/web062/application.py b/src/web062/application.py
--- a/src/web062/application.py	(revision b0a8ce62bff68bb38ec7329c8f8da39aea676384)
+++ b/src/web062/application.py	(date 1659005563234)
@@ -395,7 +395,7 @@
 
         For example:
 
-        in app.yaml (where code.py is where the main code is located)
+        in app.yaml (where code_test.py is where the main code is located)
 
             handlers:
             - url: /.*
Index: src/asm3/sitedefs.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n\"\"\"\nWARNING: YOU SHOULD NO LONGER EDIT THIS FILE BY HAND!\n======================================================\n\nMake changes at /etc/asm3.conf instead. If you do not have that file, \ncopy it from scripts/asm3.conf.example\n\"\"\"\n\n# Provides site-wide definitions, reading them from a configuration file\nimport codecs, os, sys, json\n\n# The map of values loaded from the config file\ncfg = None\n\ndef read_config_file():\n    \"\"\"\n    Load the config file into cfg map. Looks for the config file in\n    the following places in order:\n    1. ASM3_CONF environment variable\n    2. $INSTALL_DIR/asm3.conf\n    3. $HOME/.asm3.conf\n    4. /etc/asm3.conf\n    \"\"\"\n    global cfg\n    fname = \"\"\n    insconf = os.path.dirname(os.path.abspath(__file__)) + os.sep + \"..\" + os.sep + \"asm3.conf\"\n    homeconf = os.path.expanduser(\"~\") + os.sep + \".asm3.conf\"\n    if \"ASM3_CONF\" in os.environ and os.environ[\"ASM3_CONF\"] != \"\": fname = os.environ[\"ASM3_CONF\"]\n    elif os.path.exists(insconf): fname = insconf\n    elif os.path.exists(homeconf): fname = homeconf\n    elif os.path.exists(\"/etc/asm3.conf\"): fname = \"/etc/asm3.conf\"\n    if fname == \"\":\n        sys.stderr.write(\"no config found, using defaults\\n\")\n        cfg = {}\n    else:\n        sys.stderr.write(\"config: %s\\n\" % fname)\n        cfg = {}\n        with codecs.open(fname, 'r', encoding='utf8') as f:\n            lines = f.readlines()\n        for l in lines:\n            if l.find(\"#\") != -1 and l.find(\"{\") == -1: \n                l = l[0:l.find(\"#\")]\n            if l.find(\"=\") != -1:\n                k, v = l.split(\"=\", 1)\n                cfg[k.strip()] = v.strip()\n\ndef get_string(k, dv = \"\"):\n    global cfg\n    if cfg is None: read_config_file()\n    if k not in cfg: return dv\n    return cfg[k]\n\ndef get_boolean(k, dv = False):\n    v = get_string(k)\n    if v == \"\": return dv\n    return v == \"True\" or v == \"true\"\n\ndef get_integer(k, dv = 0):\n    v = get_string(k)\n    if v == \"\": return dv\n    return int(v)\n\ndef get_dict(k, dv = {}):\n    v = get_string(k)\n    if v == \"\": return dv\n    return json.loads(v)\n\n# The base URL to the ASM installation as seen by the client (should not end with /)\nBASE_URL = get_string(\"base_url\", \"http://localhost:5000\")\n\n# The URL to asm's service endpoint to be shown in online forms screens in particular,\n# but also used by animal_view_adoptable_js to link to animal_view etc\nSERVICE_URL = get_string(\"service_url\", \"http://localhost:5000/service\")\n\n# The language to use before a locale has been configured \n# in the database\nLOCALE = get_string(\"locale\", \"en\")\n\n# The timezone offset to use before one has been configured\n# in the database (+/- server clock offset, NOT UTC)\nTIMEZONE = get_integer(\"timezone\", 0)\n\n# Where ASM directs log output to, one of:\n# stderr  - the standard error stream\n# syslog  - the UNIX syslogger (to LOCAL3 facility)\n# ntevent - the Windows event logger\n# <file>  - The path to a file to log to\nLOG_LOCATION = get_string(\"log_location\", \"syslog\")\n\n# Include debug messages when logging - set to False\n# to disable debug messages\nLOG_DEBUG = get_boolean(\"log_debug\", True)\n\n# Whether to reload the application when the code.py filestamp changes\nAUTORELOAD = get_boolean(\"autoreload\", False)\n\n# Database info\n# MYSQL, POSTGRESQL, SQLITE or DB2\nDB_TYPE = get_string(\"db_type\", \"MYSQL\")\nDB_HOST = get_string(\"db_host\", \"localhost\")\nDB_PORT = get_integer(\"db_port\", 3306)\nDB_USERNAME = get_string(\"db_username\", \"robin\")\nDB_PASSWORD = get_string(\"db_password\", \"robin\")\nDB_NAME = get_string(\"db_name\", \"asm\")\n\n# If you want to maintain compatibility with an ASM2 client\n# accessing your database, setting this will have ASM3\n# update the primarykey table that ASM2 needs\nDB_HAS_ASM2_PK_TABLE = get_boolean(\"db_has_asm2_pk_table\", False)\n\n# If set, all calls to db.execute will be logged to the file\n# named. Use {database} to substitute database name.\nDB_EXEC_LOG = get_string(\"db_exec_log\")\n\n# Produce an EXPLAIN for each query in the log before running it\nDB_EXPLAIN_QUERIES = get_boolean(\"db_explain_queries\", False)\n\n# Record the time taken to run each query\nDB_TIME_QUERIES = get_boolean(\"db_time_queries\", False)\n\n# If DB_TIME_QUERIES is on, only log queries that take longer \n# than X seconds to run (or 0 to log all queries)\nDB_TIME_LOG_OVER = get_integer(\"db_time_log_over\", 0)\n\n# Time out queries that take longer than this (ms) to run\nDB_TIMEOUT = get_integer(\"db_timeout\", 0)\n\n# URLs for ASM services\nURL_NEWS = get_string(\"url_news\", \"https://sheltermanager.com/repo/asm_news.html\")\nURL_REPORTS = get_string(\"url_reports\", \"https://sheltermanager.com/repo/reports.txt\")\n\n# Deployment type, wsgi or fcgi\nDEPLOYMENT_TYPE = get_string(\"deployment_type\", \"wsgi\")\n\n# Whether the session cookie should be secure (only valid for https)\nSESSION_SECURE_COOKIE = get_boolean(\"session_secure_cookie\", False)\n\n# Output debug info on sessions\nSESSION_DEBUG = get_boolean(\"session_debug\", False)\n\n# The Content-Security-Policy header to send, or blank for no policy\n# Include 'nonce-%(nonce)s' in any policy to prevent the bootstrap \n# inline script breaking\nCONTENT_SECURITY_POLICY = get_string(\"content_security_policy\", \"\")\n\n# The host/port that memcached is running on if it is to be used.\n# If memcache is not available, an in memory dictionary will be\n# used instead.\n#MEMCACHED_SERVER = \"127.0.0.1:11211\"\nMEMCACHED_SERVER = get_string(\"memcached_server\", \"\")\n\n# Where to store media files.\n# database - media files are base64 encoded in the dbfs.content db column\n# file - media files are stored in a folder \n# s3 - media files are stored in S3 compatible storage\nDBFS_STORE = get_string(\"dbfs_store\", \"database\")\n\n# DBFS_STORE = file: The folder where media files are stored.\n# It must exist and ASM must have write permissions. It should never end with a /\nDBFS_FILESTORAGE_FOLDER = get_string(\"dbfs_filestorage_folder\", \"/home/robin/tmp/dbfs\")\n\n# DBFS_STORE = s3: The S3 bucket to store media in and credentials/URL\nDBFS_S3_BUCKET = get_string(\"dbfs_s3_bucket\", \"\")\n# DBFS_STORE = s3: Credentials, if these aren't set, $HOME/.aws/credentials or env will be used\nDBFS_S3_ACCESS_KEY_ID = get_string(\"dbfs_s3_access_key_id\", \"\")\nDBFS_S3_SECRET_ACCESS_KEY = get_string(\"dbfs_s3_secret_access_key\", \"\")\n# DBFS_STORE = s3: endpoint URL if you are using an S3 compatible service rather than AWS S3\nDBFS_S3_ENDPOINT_URL = get_string(\"dbfs_s3_endpoint_url\", \"\")\n\n# The directory to use to cache elements on disk. Must already exist\n# as the application will not attempt to create it.\nDISK_CACHE = get_string(\"disk_cache\", \"/tmp/asm_disk_cache\")\n\n# Cache results of the most common, less important queries for\n# a short period (60 seconds) in the disk cache to help performance. \n# These queries include shelterview animals and main screen links) \nCACHE_COMMON_QUERIES = get_boolean(\"cache_common_queries\", False)\n\n# Cache service call responses on the server side according\n# to their max-age headers in the disk cache\nCACHE_SERVICE_RESPONSES = get_boolean(\"cache_service_responses\", False)\n\n# If EMAIL_ERRORS is set to True, all errors from the site\n# are emailed to ADMIN_EMAIL and the user is given a generic\n# error page. If set to False, debug information is output.\nEMAIL_ERRORS = get_boolean(\"email_errors\", False)\nADMIN_EMAIL = get_string(\"admin_email\", \"you@youraddress.com\")\n\n# If ROLLUP_JS is set to True, a single, rolled up and minified\n# javascript file will be sent to the client\nROLLUP_JS = get_boolean(\"rollup_js\", False)\n\n# Only allow hotlinks to the animal_image and extra_image\n# service calls from this domain, or comma separated list of domains\nIMAGE_HOTLINKING_ONLY_FROM_DOMAIN = get_string(\"image_hotlinking_only_from_domain\", \"\")\n\n# Use Transfer-Encoding: chunked for large files. Note that\n# this does not work with mod_wsgi. Turning it off will cause\n# web.py to buffer the output, which can cause problems with\n# dumps of large databases.\nLARGE_FILES_CHUNKED = get_boolean(\"large_files_chunked\", True)\n\n# QR code provider. \"url\" and \"size\" tokens will be substituted\nQR_IMG_SRC = get_string(\"qr_img_src\", \"//chart.googleapis.com/chart?cht=qr&chl=%(url)s&chs=%(size)s\")\n\n# Whether to resize incoming images\nRESIZE_IMAGES_DURING_ATTACH = get_boolean(\"resize_images_during_attach\", True)\nRESIZE_IMAGES_SPEC = get_string(\"resize_images_spec\", \"1024x1024\")\n\n# Shell command to use to compress PDFs\nSCALE_PDF_DURING_ATTACH = get_boolean(\"scale_pdf_during_attach\", False)\nSCALE_PDF_CMD = get_string(\"scale_pdf_cmd\", \"convert -density 120 -quality 60 %(input)s -compress Jpeg %(output)s\")\n#SCALE_PDF_CMD = \"pdftk %(input)s output %(output)s compress\"\n#SCALE_PDF_CMD = \"gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile=%(output)s %(input)s\"\n\n# Shell command to convert HTML to PDF\nHTML_TO_PDF = get_string(\"html_to_pdf\", \"wkhtmltopdf --orientation %(orientation)s %(papersize)s %(input)s %(output)s\")\n#HTML_TO_PDF = \"html2pdf %(input)s %(output)s\"\n\n# Target for viewing an address on a map, {0} is the address\nMAP_LINK = get_string(\"map_link\", \"https://www.openstreetmap.org/search?query={0}\")\n\n# Map provider for rendering maps on the client, can be \"osm\" or \"google\"\nMAP_PROVIDER = get_string(\"map_provider\", \"osm\")\nMAP_PROVIDER_KEY = get_string(\"map_provider_key\", \"\") # For google, the API key to use when making map requests\nOSM_MAP_TILES = get_string(\"osm_map_tiles\", \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\")\n\nGEO_PROVIDER = get_string(\"geo_provider\", \"nominatim\")  # Geocode provider to use - nominatim or google\nGEO_PROVIDER_KEY = get_string(\"geo_provider_key\", \"\")   # For google, the API key to use when making geocoding requests\nGEO_SMCOM_URL = get_string(\"geo_smcom_url\", \"\")\nGEO_BATCH = get_boolean(\"geo_batch\", False)             # Whether or not to try and lookup geocodes as part of the batch\nGEO_LIMIT = get_integer(\"geo_limit\", 100)               # How many geocodes to lookup as part of the batch\nGEO_LOOKUP_TIMEOUT = get_integer(\"geo_lookup_timeout\", 5) # Timeout in seconds when doing geocode lookups\nGEO_SLEEP_AFTER = get_integer(\"geo_sleep_after\", 1)     # Sleep for seconds after a request to throttle (nominatim has a 1/s limit)\n\n# Enable the database field on login and allow login to multiple databases\nMULTIPLE_DATABASES = get_boolean(\"multiple_databases\", False)\nMULTIPLE_DATABASES_TYPE = get_string(\"multiple_databases_type\", \"map\")\n# { \"alias\": { \"dbtype\": \"MYSQL\", \"host\": \"localhost\", \"port\": 3306, \"username\": \"root\", \"password\": \"root\", \"database\": \"asm\" } }\nMULTIPLE_DATABASES_MAP = get_dict(\"multiple_databases_map\")\n\n# Whether the old HTML/FTP publisher of static files is enabled\nHTMLFTP_PUBLISHER_ENABLED = get_boolean(\"htmlftp_publisher_enabled\", True)\n\n# FTP hosts and URLs for third party publishing services\nADOPTAPET_FTP_HOST = get_string(\"adoptapet_ftp_host\", \"autoupload.adoptapet.com\")\nAKC_REUNITE_BASE_URL = get_string(\"akc_reunite_base_url\", \"\")\nAKC_REUNITE_USER = get_string(\"akc_reunite_user\", \"\")\nAKC_REUNITE_PASSWORD = get_string(\"akc_reunite_password\", \"\")\nANIBASE_BASE_URL = get_string(\"anibase_base_url\", \"\")\nANIBASE_API_USER = get_string(\"anibase_api_user\", \"\")\nANIBASE_API_KEY = get_string(\"anibase_api_key\", \"\")\nFOUNDANIMALS_FTP_HOST = get_string(\"foundanimals_ftp_host\", \"\")\nFOUNDANIMALS_FTP_USER = get_string(\"foundanimals_ftp_user\", \"\")\nFOUNDANIMALS_FTP_PASSWORD = get_string(\"foundanimals_ftp_password\", \"\")\nHELPINGLOSTPETS_FTP_HOST = get_string(\"helpinglostpets_ftp_host\", \"www.helpinglostpets.com\")\nHOMEAGAIN_BASE_URL = get_string(\"homeagain_base_url\", \"\")\nMADDIES_FUND_TOKEN_URL = get_string(\"maddies_fund_token_url\", \"\")\nMADDIES_FUND_UPLOAD_URL = get_string(\"maddies_fund_upload_url\", \"\")\nPETCADEMY_FTP_HOST = get_string(\"petcademy_ftp_host\", \"\")\nPETCADEMY_FTP_USER = get_string(\"petcademy_ftp_user\", \"\")\nPETCADEMY_FTP_PASSWORD = get_string(\"petcademy_ftp_password\", \"\")\nPETFINDER_FTP_HOST = get_string(\"petfinder_ftp_host\", \"members.petfinder.com\")\nPETFINDER_SEND_PHOTOS_BY_FTP = get_boolean(\"petfinder_send_photos_by_ftp\", True)\nPETRESCUE_URL = get_string(\"petrescue_url\", \"\")\nRESCUEGROUPS_FTP_HOST = get_string(\"rescuegroups_ftp_host\", \"ftp.rescuegroups.org\")\nSAVOURLIFE_API_KEY = get_string(\"savourlife_api_key\", \"\")\nSAVOURLIFE_URL = get_string(\"savourlife_url\", \"\")\nSMARTTAG_FTP_HOST = get_string(\"smarttag_ftp_host\", \"ftp.idtag.com\")\nSMARTTAG_FTP_USER = get_string(\"smarttag_ftp_user\", \"\")\nSMARTTAG_FTP_PASSWORD = get_string(\"smarttag_ftp_password\", \"\")\nPETTRAC_UK_POST_URL = get_string(\"pettrac_uk_post_url\", \"https://online.pettrac.com/registration/onlineregistration.aspx\")\nPETLINK_BASE_URL = get_string(\"petlink_base_url\", \"\")\nPETSLOCATED_FTP_HOST = get_string(\"petslocated_ftp_host\", \"ftp.petslocated.com\")\nPETSLOCATED_FTP_USER = get_string(\"petslocated_ftp_user\", \"\")\nPETSLOCATED_FTP_PASSWORD = get_string(\"petslocated_ftp_password\", \"\")\nVETENVOY_US_VENDOR_USERID = get_string(\"vetenvoy_us_vendor_userid\", \"\")\nVETENVOY_US_VENDOR_PASSWORD = get_string(\"vetenvoy_us_vendor_password\", \"\")\nVETENVOY_US_BASE_URL = get_string(\"vetenvoy_us_base_url\", \"\")\nVETENVOY_US_SYSTEM_ID = get_string(\"vetenvoy_us_system_id\", \"20\")\nVETENVOY_US_HOMEAGAIN_RECIPIENTID = get_string(\"vetenvoy_us_homeagain_recipientid\", \"\")\nVETENVOY_US_AKC_REUNITE_RECIPIENTID = get_string(\"vetenvoy_us_akc_reunite_recipientid\", \"\")\n\n# Config for payment processing services\nPAYPAL_VALIDATE_IPN_URL = get_string(\"paypal_validate_ipn_url\", \"\")\n\n# Options available under the share button\nSHARE_BUTTON = get_string(\"share_button\", \"shareweb,sharepic,shareemail\")\n\n# Type of electronic signing device available\nELECTRONIC_SIGNATURES = get_string(\"electronic_signatures\", \"\")\n\n# If you have an emergency notice you'd like displaying on the\n# login and home screens, set a filename here for the content\n# (if the file does not exist or has no content, nothing will\n# be displayed).\nEMERGENCY_NOTICE = get_string(\"emergency_notice\", \"\")\n\n# SMTP_SERVER = { \"sendmail\": False, \"host\": \"mail.yourdomain.com\", \"port\": 25, \"username\": \"userifauth\", \"password\": \"passifauth\", \"usetls\": False }\n# SMTP_SERVER = { \"sendmail\": False, \"host\": \"mail.yourdomain.com\", \"port\": 25, \"username\": \"\", \"password\": \"\", \"usetls\": False }\nSMTP_SERVER = get_dict(\"smtp_server\", { \"sendmail\": True })\n\n# The from address for all outgoing emails. The email address configured\n# in the database will be used as the Reply-To header to avoid\n# any issues with DKIM/SPF/DMARC spoofing\n# substitutions: \n# {organisation} organisation name\n# {database} database name\n# {alias} database alias\nFROM_ADDRESS = get_string(\"from_address\", \"you@yourdomain.com\")\n\n# URLs to access manuals and help documentation\nMANUAL_HTML_URL = get_string(\"manual_html_url\", \"static/pages/manual/index.html\")\nMANUAL_FAQ_URL = get_string(\"manual_faq_url\", \"static/pages/manual/faq.html\")\nMANUAL_PDF_URL = get_string(\"manual_pdf_url\", \"\")\nMANUAL_VIDEO_URL = get_string(\"manual_video_url\", \"\")\n\nSMCOM_PAYMENT_LINK = get_string(\"smcom_payment_link\", \"\")\nSMCOM_LOGIN_URL = get_string(\"smcom_login_url\", \"\")\n\n# Script and css references for dependencies (can be substituted for separate CDN here)\nASMSELECT_CSS = get_string(\"asmselect_css\", 'static/lib/asmselect/1.0.4a/jquery.asmselect.css')\nASMSELECT_JS = get_string(\"asmselect_js\", 'static/lib/asmselect/1.0.4a/jquery.asmselect.js')\nBASE64_JS = get_string(\"base64_js\", 'static/lib/base64/0.3.0/base64.min.js')\nBOOTSTRAP_JS = get_string(\"bootstrap_js\", 'static/lib/bootstrap/5.1.0/js/bootstrap.min.js')\nBOOTSTRAP_CSS = get_string(\"bootstrap_css\", 'static/lib/bootstrap/5.1.0/css/bootstrap.min.css')\nBOOTSTRAP_GRID_CSS = get_string(\"bootstrap_grid_css\", 'static/lib/bootstrap/5.1.0/css/bootstrap-grid.min.css')\nBOOTSTRAP_ICONS_CSS = get_string(\"bootstrap_icons_css\", 'static/lib/bootstrap-icons/1.5.0/bootstrap-icons.css')\nCODEMIRROR_JS = get_string(\"codemirror_js\", 'static/lib/codemirror/5.65.2/lib/codemirror.js')\nCODEMIRROR_CSS = get_string(\"codemirror_css\", 'static/lib/codemirror/5.65.2/lib/codemirror.css')\nCODEMIRROR_BASE = get_string(\"codemirror_base\", 'static/lib/codemirror/5.65.2/')\nFLOT_JS = get_string(\"flot_js\", 'static/lib/flot/0.8.3/jquery.flot.min.js')\nFLOT_PIE_JS = get_string(\"flot_pie_js\", 'static/lib/flot/0.8.3/jquery.flot.pie.min.js')\nFULLCALENDAR_CSS = get_string(\"fullcalendar_css\", 'static/lib/fullcalendar/3.10.2/fullcalendar.min.css')\nFULLCALENDAR_JS = get_string(\"fullcalendar_js\", 'static/lib/fullcalendar/3.10.2/fullcalendar.min.js')\nJQUERY_UI_CSS = get_string(\"jquery_ui_css\", 'static/lib/jqueryui/jquery-ui-themes-1.13.0/themes/%(theme)s/jquery-ui.css')\nJQUERY_UI_JS = get_string(\"jquery_ui_js\", 'static/lib/jqueryui/jquery-ui-1.13.0/jquery-ui.min.js')\nJQUERY_JS = get_string(\"jquery_js\", 'static/lib/jquery/3.6.0/jquery.min.js')\nJQUERY_MOBILE_CSS = get_string(\"jquery_mobile_css\", 'static/lib/jquerymobile/1.4.5/jquery.mobile.min.css')\nJQUERY_MOBILE_JS = get_string(\"jquery_mobile_js\", 'static/lib/jquerymobile/1.4.5/jquery.mobile.min.js')\nJQUERY_MOBILE_JQUERY_JS = get_string(\"jquery_mobile_jquery_js\", 'static/lib/jquery/2.2.4/jquery.min.js')\nLEAFLET_CSS = get_string(\"leaflet_css\", 'static/lib/leaflet/1.3.1/leaflet.css')\nLEAFLET_JS = get_string(\"leaflet_js\", 'static/lib/leaflet/1.3.1/leaflet.js')\nMOMENT_JS = get_string(\"moment_js\", 'static/lib/moment/2.29.1/moment.min.js')\nMOUSETRAP_JS = get_string(\"mousetrap_js\", 'static/lib/mousetrap/1.4.6/mousetrap.min.js')\nPATH_JS = get_string(\"path_js\", 'static/lib/pathjs/0.8.4.smcom/path.min.js')\nSIGNATURE_JS = get_string(\"signature_js\", 'static/lib/signature/1.1.1/jquery.signature.min.js')\nTABLESORTER_CSS = get_string(\"tablesorter_css\", 'static/lib/tablesorter/2.7.12/themes/theme.asm.css')\nTABLESORTER_JS = get_string(\"tablesorter_js\", 'static/lib/tablesorter/2.7.12/jquery.tablesorter.min.js')\nTABLESORTER_WIDGETS_JS = get_string(\"tablesorter_widgets_js\", 'static/lib/tablesorter/2.7.12/jquery.tablesorter.widgets.min.js')\nTIMEPICKER_CSS = get_string(\"timepicker_css\", 'static/lib/timepicker/0.3.3/jquery.ui.timepicker.css')\nTIMEPICKER_JS = get_string(\"timepicker_js\", 'static/lib/timepicker/0.3.3/jquery.ui.timepicker.js')\nTINYMCE_5_JS = get_string(\"tinymce_4_js\", 'static/lib/tinymce/5.5.1/tinymce/js/tinymce/tinymce.min.js')\nTOUCHPUNCH_JS = get_string(\"touchpunch_js\", 'static/lib/touchpunch/0.2.3/jquery.ui.touch-punch.min.js')\n\n# Watermark Settings for adding an animal's name and shelter logo to an image\nWATERMARK_X_OFFSET = get_string(\"watermark_x_offset\", 10)\nWATERMARK_Y_OFFSET = get_string(\"watermark_y_offset\", 10)\nWATERMARK_FONT_FILE = get_string(\"watermark_font_file\", \"/usr/share/fonts/truetype/liberation/LiberationSans-BoldItalic.ttf\")\nWATERMARK_FONT_SHADOWCOLOR = get_string(\"watermark_font_shadowcolor\", \"black\")\nWATERMARK_FONT_FILLCOLOR = get_string(\"watermark_font_fillcolor\", \"white\")\nWATERMARK_FONT_STROKE = get_string(\"watermark_font_stroke\", 3)\nWATERMARK_FONT_OFFSET = get_string(\"watermark_font_offset\", 20)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/asm3/sitedefs.py b/src/asm3/sitedefs.py
--- a/src/asm3/sitedefs.py	(revision b0a8ce62bff68bb38ec7329c8f8da39aea676384)
+++ b/src/asm3/sitedefs.py	(date 1659005563246)
@@ -92,7 +92,7 @@
 # to disable debug messages
 LOG_DEBUG = get_boolean("log_debug", True)
 
-# Whether to reload the application when the code.py filestamp changes
+# Whether to reload the application when the code_test.py filestamp changes
 AUTORELOAD = get_boolean("autoreload", False)
 
 # Database info
